// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: StoredPodcastProto.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum StoredPodcastStateProto: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case unknown // = 0
  case ready // = 1
  case inputReady // = 2
  case generationStarted // = 3
  case generationFailed // = 4
  case UNRECOGNIZED(Int)

  init() {
    self = .unknown
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .ready
    case 2: self = .inputReady
    case 3: self = .generationStarted
    case 4: self = .generationFailed
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .ready: return 1
    case .inputReady: return 2
    case .generationStarted: return 3
    case .generationFailed: return 4
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension StoredPodcastStateProto: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [StoredPodcastStateProto] = [
    .unknown,
    .ready,
    .inputReady,
    .generationStarted,
    .generationFailed,
  ]
}

#endif  // swift(>=4.2)

enum StoredPodcastSectionTypeProto: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case unknown // = 0
  case introduction // = 1
  case section // = 2
  case conclusion // = 3
  case UNRECOGNIZED(Int)

  init() {
    self = .unknown
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .introduction
    case 2: self = .section
    case 3: self = .conclusion
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .introduction: return 1
    case .section: return 2
    case .conclusion: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension StoredPodcastSectionTypeProto: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [StoredPodcastSectionTypeProto] = [
    .unknown,
    .introduction,
    .section,
    .conclusion,
  ]
}

#endif  // swift(>=4.2)

enum StoredPodcastSuggestionsStateProto: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case undefined // = 0
  case generating // = 1
  case ready // = 2
  case failed // = 3
  case UNRECOGNIZED(Int)

  init() {
    self = .undefined
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .undefined
    case 1: self = .generating
    case 2: self = .ready
    case 3: self = .failed
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .undefined: return 0
    case .generating: return 1
    case .ready: return 2
    case .failed: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension StoredPodcastSuggestionsStateProto: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [StoredPodcastSuggestionsStateProto] = [
    .undefined,
    .generating,
    .ready,
    .failed,
  ]
}

#endif  // swift(>=4.2)

enum StoredPodcastStoryStateProto: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case undefined // = 0
  case inputReady // = 1
  case generating // = 2
  case ready // = 3
  case failed // = 4
  case UNRECOGNIZED(Int)

  init() {
    self = .undefined
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .undefined
    case 1: self = .inputReady
    case 2: self = .generating
    case 3: self = .ready
    case 4: self = .failed
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .undefined: return 0
    case .inputReady: return 1
    case .generating: return 2
    case .ready: return 3
    case .failed: return 4
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension StoredPodcastStoryStateProto: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [StoredPodcastStoryStateProto] = [
    .undefined,
    .inputReady,
    .generating,
    .ready,
    .failed,
  ]
}

#endif  // swift(>=4.2)

struct StoredPodcastProto {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var podcastID: String {
    get {return _storage._podcastID}
    set {_uniqueStorage()._podcastID = newValue}
  }

  var createdBy: String {
    get {return _storage._createdBy}
    set {_uniqueStorage()._createdBy = newValue}
  }

  var createdAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._createdAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._createdAt = newValue}
  }
  /// Returns true if `createdAt` has been explicitly set.
  var hasCreatedAt: Bool {return _storage._createdAt != nil}
  /// Clears the value of `createdAt`. Subsequent reads from it will return its default value.
  mutating func clearCreatedAt() {_uniqueStorage()._createdAt = nil}

  var updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._updatedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._updatedAt = newValue}
  }
  /// Returns true if `updatedAt` has been explicitly set.
  var hasUpdatedAt: Bool {return _storage._updatedAt != nil}
  /// Clears the value of `updatedAt`. Subsequent reads from it will return its default value.
  mutating func clearUpdatedAt() {_uniqueStorage()._updatedAt = nil}

  var deletedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._deletedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._deletedAt = newValue}
  }
  /// Returns true if `deletedAt` has been explicitly set.
  var hasDeletedAt: Bool {return _storage._deletedAt != nil}
  /// Clears the value of `deletedAt`. Subsequent reads from it will return its default value.
  mutating func clearDeletedAt() {_uniqueStorage()._deletedAt = nil}

  var userInput: StoredPodcastUserInputProto {
    get {return _storage._userInput ?? StoredPodcastUserInputProto()}
    set {_uniqueStorage()._userInput = newValue}
  }
  /// Returns true if `userInput` has been explicitly set.
  var hasUserInput: Bool {return _storage._userInput != nil}
  /// Clears the value of `userInput`. Subsequent reads from it will return its default value.
  mutating func clearUserInput() {_uniqueStorage()._userInput = nil}

  var suggestionInput: StoredPodcastSuggestionInputProto {
    get {return _storage._suggestionInput ?? StoredPodcastSuggestionInputProto()}
    set {_uniqueStorage()._suggestionInput = newValue}
  }
  /// Returns true if `suggestionInput` has been explicitly set.
  var hasSuggestionInput: Bool {return _storage._suggestionInput != nil}
  /// Clears the value of `suggestionInput`. Subsequent reads from it will return its default value.
  mutating func clearSuggestionInput() {_uniqueStorage()._suggestionInput = nil}

  var state: StoredPodcastStateProto {
    get {return _storage._state}
    set {_uniqueStorage()._state = newValue}
  }

  var answer: PodcastPromptAnswerProto {
    get {return _storage._answer ?? PodcastPromptAnswerProto()}
    set {_uniqueStorage()._answer = newValue}
  }
  /// Returns true if `answer` has been explicitly set.
  var hasAnswer: Bool {return _storage._answer != nil}
  /// Clears the value of `answer`. Subsequent reads from it will return its default value.
  mutating func clearAnswer() {_uniqueStorage()._answer = nil}

  var points: StoredPodcastPointsProto {
    get {return _storage._points ?? StoredPodcastPointsProto()}
    set {_uniqueStorage()._points = newValue}
  }
  /// Returns true if `points` has been explicitly set.
  var hasPoints: Bool {return _storage._points != nil}
  /// Clears the value of `points`. Subsequent reads from it will return its default value.
  mutating func clearPoints() {_uniqueStorage()._points = nil}

  var plan: StoredPodcastPlanProto {
    get {return _storage._plan ?? StoredPodcastPlanProto()}
    set {_uniqueStorage()._plan = newValue}
  }
  /// Returns true if `plan` has been explicitly set.
  var hasPlan: Bool {return _storage._plan != nil}
  /// Clears the value of `plan`. Subsequent reads from it will return its default value.
  mutating func clearPlan() {_uniqueStorage()._plan = nil}

  var transcript: StoredPodcastTranscriptProto {
    get {return _storage._transcript ?? StoredPodcastTranscriptProto()}
    set {_uniqueStorage()._transcript = newValue}
  }
  /// Returns true if `transcript` has been explicitly set.
  var hasTranscript: Bool {return _storage._transcript != nil}
  /// Clears the value of `transcript`. Subsequent reads from it will return its default value.
  mutating func clearTranscript() {_uniqueStorage()._transcript = nil}

  var audio: StoredPodcastAudioProto {
    get {return _storage._audio ?? StoredPodcastAudioProto()}
    set {_uniqueStorage()._audio = newValue}
  }
  /// Returns true if `audio` has been explicitly set.
  var hasAudio: Bool {return _storage._audio != nil}
  /// Clears the value of `audio`. Subsequent reads from it will return its default value.
  mutating func clearAudio() {_uniqueStorage()._audio = nil}

  var visuals: StoredPodcastVisualsProto {
    get {return _storage._visuals ?? StoredPodcastVisualsProto()}
    set {_uniqueStorage()._visuals = newValue}
  }
  /// Returns true if `visuals` has been explicitly set.
  var hasVisuals: Bool {return _storage._visuals != nil}
  /// Clears the value of `visuals`. Subsequent reads from it will return its default value.
  mutating func clearVisuals() {_uniqueStorage()._visuals = nil}

  var keyPoints: StoredPodcastKeyPointsProto {
    get {return _storage._keyPoints ?? StoredPodcastKeyPointsProto()}
    set {_uniqueStorage()._keyPoints = newValue}
  }
  /// Returns true if `keyPoints` has been explicitly set.
  var hasKeyPoints: Bool {return _storage._keyPoints != nil}
  /// Clears the value of `keyPoints`. Subsequent reads from it will return its default value.
  mutating func clearKeyPoints() {_uniqueStorage()._keyPoints = nil}

  var followups: StoredPodcastFollowupsProto {
    get {return _storage._followups ?? StoredPodcastFollowupsProto()}
    set {_uniqueStorage()._followups = newValue}
  }
  /// Returns true if `followups` has been explicitly set.
  var hasFollowups: Bool {return _storage._followups != nil}
  /// Clears the value of `followups`. Subsequent reads from it will return its default value.
  mutating func clearFollowups() {_uniqueStorage()._followups = nil}

  var log: LogProto {
    get {return _storage._log ?? LogProto()}
    set {_uniqueStorage()._log = newValue}
  }
  /// Returns true if `log` has been explicitly set.
  var hasLog: Bool {return _storage._log != nil}
  /// Clears the value of `log`. Subsequent reads from it will return its default value.
  mutating func clearLog() {_uniqueStorage()._log = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct StoredPodcastUserInputProto {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var prompt: String = String()

  var pointIds: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct StoredPodcastSuggestionInputProto {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var suggestionSectionID: String = String()

  var suggestionSectionReasoning: String = String()

  var suggestionTitle: String = String()

  var suggestionThumbnailPrompt: String = String()

  var suggestionBadge: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct StoredPodcastPointsProto {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var points: [StoredPodcastPointProto] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct StoredPodcastPointProto {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var pointID: String = String()

  var reasoning: String = String()

  var title: String = String()

  var titleEmoji: String = String()

  var outline: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct StoredPodcastPlanProto {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var title: String = String()

  var plan: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct StoredPodcastTranscriptProto {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var sections: [StoredPodcastSectionTranscriptProto] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct StoredPodcastSectionTranscriptProto {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var sectionType: StoredPodcastSectionTypeProto = .unknown

  var entries: [StoredPodcastTranscriptEntryProto] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct StoredPodcastTranscriptEntryProto {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var host: PodcastHostProto = .unknown

  var text: String = String()

  var startMillis: Int32 = 0

  var endMillis: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct StoredPodcastVisualsProto {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var stylePrompt: String = String()

  var thumbnailPrompt: String = String()

  var thumbnailKey: String = String()

  var visuals: [StoredPodcastVisualProto] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct StoredPodcastVisualProto {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var timestampMillis: Int32 = 0

  var imagePrompt: String = String()

  var imageKey: String = String()

  var transition: PodcastVisualTransitionProto = .undefined

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct StoredPodcastAudioProto {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var audioKey: String = String()

  var audioDuration: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _audioDuration ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_audioDuration = newValue}
  }
  /// Returns true if `audioDuration` has been explicitly set.
  var hasAudioDuration: Bool {return self._audioDuration != nil}
  /// Clears the value of `audioDuration`. Subsequent reads from it will return its default value.
  mutating func clearAudioDuration() {self._audioDuration = nil}

  var words: [PodcastWordProto] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _audioDuration: SwiftProtobuf.Google_Protobuf_Duration? = nil
}

struct StoredPodcastKeyPointsProto {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var label: String = String()

  var keyPoints: [StoredPodcastKeyPointProto] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct StoredPodcastFollowupsProto {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var label: String = String()

  var followups: [StoredPodcastFollowupProto] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct StoredPodcastFollowupProto {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var followupID: String = String()

  var reasoning: String = String()

  var emoji: String = String()

  var outline: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct StoredPodcastKeyPointProto {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var keyPointID: String = String()

  var title: String = String()

  var titleEmoji: String = String()

  var outline: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct StoredPodcastSuggestionsProto {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var suggestionsID: String = String()

  var state: StoredPodcastSuggestionsStateProto = .undefined

  var createdAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _createdAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_createdAt = newValue}
  }
  /// Returns true if `createdAt` has been explicitly set.
  var hasCreatedAt: Bool {return self._createdAt != nil}
  /// Clears the value of `createdAt`. Subsequent reads from it will return its default value.
  mutating func clearCreatedAt() {self._createdAt = nil}

  var updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _updatedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_updatedAt = newValue}
  }
  /// Returns true if `updatedAt` has been explicitly set.
  var hasUpdatedAt: Bool {return self._updatedAt != nil}
  /// Clears the value of `updatedAt`. Subsequent reads from it will return its default value.
  mutating func clearUpdatedAt() {self._updatedAt = nil}

  var reasoning: String = String()

  var ranking: String = String()

  var sections: [StoredPodcastSuggestionsSectionProto] = []

  var log: LogProto {
    get {return _log ?? LogProto()}
    set {_log = newValue}
  }
  /// Returns true if `log` has been explicitly set.
  var hasLog: Bool {return self._log != nil}
  /// Clears the value of `log`. Subsequent reads from it will return its default value.
  mutating func clearLog() {self._log = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _createdAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _log: LogProto? = nil
}

struct StoredPodcastSuggestionsSectionProto {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// e.g. "do-right-now"
  var sectionID: String {
    get {return _storage._sectionID}
    set {_uniqueStorage()._sectionID = newValue}
  }

  var reasoning: String {
    get {return _storage._reasoning}
    set {_uniqueStorage()._reasoning = newValue}
  }

  var title: String {
    get {return _storage._title}
    set {_uniqueStorage()._title = newValue}
  }

  var stylePrompt: String {
    get {return _storage._stylePrompt}
    set {_uniqueStorage()._stylePrompt = newValue}
  }

  var bannerSuggestion: StoredPodcastSuggestionProto {
    get {return _storage._bannerSuggestion ?? StoredPodcastSuggestionProto()}
    set {_uniqueStorage()._bannerSuggestion = newValue}
  }
  /// Returns true if `bannerSuggestion` has been explicitly set.
  var hasBannerSuggestion: Bool {return _storage._bannerSuggestion != nil}
  /// Clears the value of `bannerSuggestion`. Subsequent reads from it will return its default value.
  mutating func clearBannerSuggestion() {_uniqueStorage()._bannerSuggestion = nil}

  var footerSuggestion: StoredPodcastSuggestionProto {
    get {return _storage._footerSuggestion ?? StoredPodcastSuggestionProto()}
    set {_uniqueStorage()._footerSuggestion = newValue}
  }
  /// Returns true if `footerSuggestion` has been explicitly set.
  var hasFooterSuggestion: Bool {return _storage._footerSuggestion != nil}
  /// Clears the value of `footerSuggestion`. Subsequent reads from it will return its default value.
  mutating func clearFooterSuggestion() {_uniqueStorage()._footerSuggestion = nil}

  var story1: StoredPodcastStorySuggestionProto {
    get {return _storage._story1 ?? StoredPodcastStorySuggestionProto()}
    set {_uniqueStorage()._story1 = newValue}
  }
  /// Returns true if `story1` has been explicitly set.
  var hasStory1: Bool {return _storage._story1 != nil}
  /// Clears the value of `story1`. Subsequent reads from it will return its default value.
  mutating func clearStory1() {_uniqueStorage()._story1 = nil}

  var story2: StoredPodcastStorySuggestionProto {
    get {return _storage._story2 ?? StoredPodcastStorySuggestionProto()}
    set {_uniqueStorage()._story2 = newValue}
  }
  /// Returns true if `story2` has been explicitly set.
  var hasStory2: Bool {return _storage._story2 != nil}
  /// Clears the value of `story2`. Subsequent reads from it will return its default value.
  mutating func clearStory2() {_uniqueStorage()._story2 = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct StoredPodcastSuggestionProto {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var suggestedPodcastID: String = String()

  var title: String = String()

  /// Q&A, Explainer, ...
  var badge: String = String()

  var thumbnailPrompt: String = String()

  var thumbnailKey: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct StoredPodcastStorySuggestionProto {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var suggestedStoryID: String = String()

  var title: String = String()

  var thumbnailPrompt: String = String()

  var thumbnailKey: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct StoredPodcastStoryProto {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var storyID: String {
    get {return _storage._storyID}
    set {_uniqueStorage()._storyID = newValue}
  }

  var userID: String {
    get {return _storage._userID}
    set {_uniqueStorage()._userID = newValue}
  }

  var createdAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._createdAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._createdAt = newValue}
  }
  /// Returns true if `createdAt` has been explicitly set.
  var hasCreatedAt: Bool {return _storage._createdAt != nil}
  /// Clears the value of `createdAt`. Subsequent reads from it will return its default value.
  mutating func clearCreatedAt() {_uniqueStorage()._createdAt = nil}

  var updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._updatedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._updatedAt = newValue}
  }
  /// Returns true if `updatedAt` has been explicitly set.
  var hasUpdatedAt: Bool {return _storage._updatedAt != nil}
  /// Clears the value of `updatedAt`. Subsequent reads from it will return its default value.
  mutating func clearUpdatedAt() {_uniqueStorage()._updatedAt = nil}

  var deletedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._deletedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._deletedAt = newValue}
  }
  /// Returns true if `deletedAt` has been explicitly set.
  var hasDeletedAt: Bool {return _storage._deletedAt != nil}
  /// Clears the value of `deletedAt`. Subsequent reads from it will return its default value.
  mutating func clearDeletedAt() {_uniqueStorage()._deletedAt = nil}

  var state: StoredPodcastStoryStateProto {
    get {return _storage._state}
    set {_uniqueStorage()._state = newValue}
  }

  var input: StoredPodcastStoryInputProto {
    get {return _storage._input ?? StoredPodcastStoryInputProto()}
    set {_uniqueStorage()._input = newValue}
  }
  /// Returns true if `input` has been explicitly set.
  var hasInput: Bool {return _storage._input != nil}
  /// Clears the value of `input`. Subsequent reads from it will return its default value.
  mutating func clearInput() {_uniqueStorage()._input = nil}

  var slides: StoredPodcastStorySlidesProto {
    get {return _storage._slides ?? StoredPodcastStorySlidesProto()}
    set {_uniqueStorage()._slides = newValue}
  }
  /// Returns true if `slides` has been explicitly set.
  var hasSlides: Bool {return _storage._slides != nil}
  /// Clears the value of `slides`. Subsequent reads from it will return its default value.
  mutating func clearSlides() {_uniqueStorage()._slides = nil}

  /// Debug metadata
  var log: LogProto {
    get {return _storage._log ?? LogProto()}
    set {_uniqueStorage()._log = newValue}
  }
  /// Returns true if `log` has been explicitly set.
  var hasLog: Bool {return _storage._log != nil}
  /// Clears the value of `log`. Subsequent reads from it will return its default value.
  mutating func clearLog() {_uniqueStorage()._log = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct StoredPodcastStoryInputProto {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var type: StoredPodcastStoryInputProto.OneOf_Type? = nil

  var suggestion: StoredPodcastStorySuggestionInputProto {
    get {
      if case .suggestion(let v)? = type {return v}
      return StoredPodcastStorySuggestionInputProto()
    }
    set {type = .suggestion(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Type: Equatable {
    case suggestion(StoredPodcastStorySuggestionInputProto)

  #if !swift(>=4.1)
    static func ==(lhs: StoredPodcastStoryInputProto.OneOf_Type, rhs: StoredPodcastStoryInputProto.OneOf_Type) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.suggestion, .suggestion): return {
        guard case .suggestion(let l) = lhs, case .suggestion(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      }
    }
  #endif
  }

  init() {}
}

struct StoredPodcastStorySuggestionInputProto {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var suggestionSectionID: String = String()

  var suggestionSectionReasoning: String = String()

  var suggestionTitle: String = String()

  var suggestionStylePrompt: String = String()

  var suggestionThumbnailPrompt: String = String()

  var suggestionThumbnailKey: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct StoredPodcastStorySlidesProto {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var isReady: Bool = false

  var reasoning: String = String()

  var structure: String = String()

  var slides: [StoredPodcastStorySlideProto] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct StoredPodcastStorySlideProto {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var slideID: String = String()

  var isReady: Bool = false

  var title: String = String()

  var text: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension StoredPodcastStateProto: @unchecked Sendable {}
extension StoredPodcastSectionTypeProto: @unchecked Sendable {}
extension StoredPodcastSuggestionsStateProto: @unchecked Sendable {}
extension StoredPodcastStoryStateProto: @unchecked Sendable {}
extension StoredPodcastProto: @unchecked Sendable {}
extension StoredPodcastUserInputProto: @unchecked Sendable {}
extension StoredPodcastSuggestionInputProto: @unchecked Sendable {}
extension StoredPodcastPointsProto: @unchecked Sendable {}
extension StoredPodcastPointProto: @unchecked Sendable {}
extension StoredPodcastPlanProto: @unchecked Sendable {}
extension StoredPodcastTranscriptProto: @unchecked Sendable {}
extension StoredPodcastSectionTranscriptProto: @unchecked Sendable {}
extension StoredPodcastTranscriptEntryProto: @unchecked Sendable {}
extension StoredPodcastVisualsProto: @unchecked Sendable {}
extension StoredPodcastVisualProto: @unchecked Sendable {}
extension StoredPodcastAudioProto: @unchecked Sendable {}
extension StoredPodcastKeyPointsProto: @unchecked Sendable {}
extension StoredPodcastFollowupsProto: @unchecked Sendable {}
extension StoredPodcastFollowupProto: @unchecked Sendable {}
extension StoredPodcastKeyPointProto: @unchecked Sendable {}
extension StoredPodcastSuggestionsProto: @unchecked Sendable {}
extension StoredPodcastSuggestionsSectionProto: @unchecked Sendable {}
extension StoredPodcastSuggestionProto: @unchecked Sendable {}
extension StoredPodcastStorySuggestionProto: @unchecked Sendable {}
extension StoredPodcastStoryProto: @unchecked Sendable {}
extension StoredPodcastStoryInputProto: @unchecked Sendable {}
extension StoredPodcastStoryInputProto.OneOf_Type: @unchecked Sendable {}
extension StoredPodcastStorySuggestionInputProto: @unchecked Sendable {}
extension StoredPodcastStorySlidesProto: @unchecked Sendable {}
extension StoredPodcastStorySlideProto: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension StoredPodcastStateProto: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "STORED_PODCAST_STATE_PROTO_UNKNOWN"),
    1: .same(proto: "STORED_PODCAST_STATE_PROTO_READY"),
    2: .same(proto: "STORED_PODCAST_STATE_PROTO_INPUT_READY"),
    3: .same(proto: "STORED_PODCAST_STATE_PROTO_GENERATION_STARTED"),
    4: .same(proto: "STORED_PODCAST_STATE_PROTO_GENERATION_FAILED"),
  ]
}

extension StoredPodcastSectionTypeProto: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "STORED_PODCAST_SECTION_TYPE_PROTO_UNKNOWN"),
    1: .same(proto: "STORED_PODCAST_SECTION_TYPE_PROTO_INTRODUCTION"),
    2: .same(proto: "STORED_PODCAST_SECTION_TYPE_PROTO_SECTION"),
    3: .same(proto: "STORED_PODCAST_SECTION_TYPE_PROTO_CONCLUSION"),
  ]
}

extension StoredPodcastSuggestionsStateProto: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "STORED_PODCAST_SUGGESTIONS_STATE_PROTO_UNDEFINED"),
    1: .same(proto: "STORED_PODCAST_SUGGESTIONS_STATE_PROTO_GENERATING"),
    2: .same(proto: "STORED_PODCAST_SUGGESTIONS_STATE_PROTO_READY"),
    3: .same(proto: "STORED_PODCAST_SUGGESTIONS_STATE_PROTO_FAILED"),
  ]
}

extension StoredPodcastStoryStateProto: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "STORED_PODCAST_STORY_STATE_PROTO_UNDEFINED"),
    1: .same(proto: "STORED_PODCAST_STORY_STATE_PROTO_INPUT_READY"),
    2: .same(proto: "STORED_PODCAST_STORY_STATE_PROTO_GENERATING"),
    3: .same(proto: "STORED_PODCAST_STORY_STATE_PROTO_READY"),
    4: .same(proto: "STORED_PODCAST_STORY_STATE_PROTO_FAILED"),
  ]
}

extension StoredPodcastProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "StoredPodcastProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "podcast_id"),
    2: .standard(proto: "created_by"),
    3: .standard(proto: "created_at"),
    4: .standard(proto: "updated_at"),
    16: .standard(proto: "deleted_at"),
    5: .standard(proto: "user_input"),
    15: .standard(proto: "suggestion_input"),
    6: .same(proto: "state"),
    7: .same(proto: "answer"),
    8: .same(proto: "points"),
    9: .same(proto: "plan"),
    10: .same(proto: "transcript"),
    11: .same(proto: "audio"),
    12: .same(proto: "visuals"),
    13: .standard(proto: "key_points"),
    14: .same(proto: "followups"),
    101: .same(proto: "log"),
  ]

  fileprivate class _StorageClass {
    var _podcastID: String = String()
    var _createdBy: String = String()
    var _createdAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _deletedAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _userInput: StoredPodcastUserInputProto? = nil
    var _suggestionInput: StoredPodcastSuggestionInputProto? = nil
    var _state: StoredPodcastStateProto = .unknown
    var _answer: PodcastPromptAnswerProto? = nil
    var _points: StoredPodcastPointsProto? = nil
    var _plan: StoredPodcastPlanProto? = nil
    var _transcript: StoredPodcastTranscriptProto? = nil
    var _audio: StoredPodcastAudioProto? = nil
    var _visuals: StoredPodcastVisualsProto? = nil
    var _keyPoints: StoredPodcastKeyPointsProto? = nil
    var _followups: StoredPodcastFollowupsProto? = nil
    var _log: LogProto? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _podcastID = source._podcastID
      _createdBy = source._createdBy
      _createdAt = source._createdAt
      _updatedAt = source._updatedAt
      _deletedAt = source._deletedAt
      _userInput = source._userInput
      _suggestionInput = source._suggestionInput
      _state = source._state
      _answer = source._answer
      _points = source._points
      _plan = source._plan
      _transcript = source._transcript
      _audio = source._audio
      _visuals = source._visuals
      _keyPoints = source._keyPoints
      _followups = source._followups
      _log = source._log
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._podcastID) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._createdBy) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._createdAt) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._updatedAt) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._userInput) }()
        case 6: try { try decoder.decodeSingularEnumField(value: &_storage._state) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._answer) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._points) }()
        case 9: try { try decoder.decodeSingularMessageField(value: &_storage._plan) }()
        case 10: try { try decoder.decodeSingularMessageField(value: &_storage._transcript) }()
        case 11: try { try decoder.decodeSingularMessageField(value: &_storage._audio) }()
        case 12: try { try decoder.decodeSingularMessageField(value: &_storage._visuals) }()
        case 13: try { try decoder.decodeSingularMessageField(value: &_storage._keyPoints) }()
        case 14: try { try decoder.decodeSingularMessageField(value: &_storage._followups) }()
        case 15: try { try decoder.decodeSingularMessageField(value: &_storage._suggestionInput) }()
        case 16: try { try decoder.decodeSingularMessageField(value: &_storage._deletedAt) }()
        case 101: try { try decoder.decodeSingularMessageField(value: &_storage._log) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._podcastID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._podcastID, fieldNumber: 1)
      }
      if !_storage._createdBy.isEmpty {
        try visitor.visitSingularStringField(value: _storage._createdBy, fieldNumber: 2)
      }
      try { if let v = _storage._createdAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._updatedAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._userInput {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
      if _storage._state != .unknown {
        try visitor.visitSingularEnumField(value: _storage._state, fieldNumber: 6)
      }
      try { if let v = _storage._answer {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._points {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._plan {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      } }()
      try { if let v = _storage._transcript {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      } }()
      try { if let v = _storage._audio {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      } }()
      try { if let v = _storage._visuals {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      } }()
      try { if let v = _storage._keyPoints {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      } }()
      try { if let v = _storage._followups {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      } }()
      try { if let v = _storage._suggestionInput {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      } }()
      try { if let v = _storage._deletedAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
      } }()
      try { if let v = _storage._log {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 101)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: StoredPodcastProto, rhs: StoredPodcastProto) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._podcastID != rhs_storage._podcastID {return false}
        if _storage._createdBy != rhs_storage._createdBy {return false}
        if _storage._createdAt != rhs_storage._createdAt {return false}
        if _storage._updatedAt != rhs_storage._updatedAt {return false}
        if _storage._deletedAt != rhs_storage._deletedAt {return false}
        if _storage._userInput != rhs_storage._userInput {return false}
        if _storage._suggestionInput != rhs_storage._suggestionInput {return false}
        if _storage._state != rhs_storage._state {return false}
        if _storage._answer != rhs_storage._answer {return false}
        if _storage._points != rhs_storage._points {return false}
        if _storage._plan != rhs_storage._plan {return false}
        if _storage._transcript != rhs_storage._transcript {return false}
        if _storage._audio != rhs_storage._audio {return false}
        if _storage._visuals != rhs_storage._visuals {return false}
        if _storage._keyPoints != rhs_storage._keyPoints {return false}
        if _storage._followups != rhs_storage._followups {return false}
        if _storage._log != rhs_storage._log {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension StoredPodcastUserInputProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "StoredPodcastUserInputProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "prompt"),
    2: .standard(proto: "point_ids"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.prompt) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.pointIds) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.prompt.isEmpty {
      try visitor.visitSingularStringField(value: self.prompt, fieldNumber: 1)
    }
    if !self.pointIds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.pointIds, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: StoredPodcastUserInputProto, rhs: StoredPodcastUserInputProto) -> Bool {
    if lhs.prompt != rhs.prompt {return false}
    if lhs.pointIds != rhs.pointIds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension StoredPodcastSuggestionInputProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "StoredPodcastSuggestionInputProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "suggestion_section_id"),
    2: .standard(proto: "suggestion_section_reasoning"),
    3: .standard(proto: "suggestion_title"),
    4: .standard(proto: "suggestion_thumbnail_prompt"),
    5: .standard(proto: "suggestion_badge"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.suggestionSectionID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.suggestionSectionReasoning) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.suggestionTitle) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.suggestionThumbnailPrompt) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.suggestionBadge) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.suggestionSectionID.isEmpty {
      try visitor.visitSingularStringField(value: self.suggestionSectionID, fieldNumber: 1)
    }
    if !self.suggestionSectionReasoning.isEmpty {
      try visitor.visitSingularStringField(value: self.suggestionSectionReasoning, fieldNumber: 2)
    }
    if !self.suggestionTitle.isEmpty {
      try visitor.visitSingularStringField(value: self.suggestionTitle, fieldNumber: 3)
    }
    if !self.suggestionThumbnailPrompt.isEmpty {
      try visitor.visitSingularStringField(value: self.suggestionThumbnailPrompt, fieldNumber: 4)
    }
    if !self.suggestionBadge.isEmpty {
      try visitor.visitSingularStringField(value: self.suggestionBadge, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: StoredPodcastSuggestionInputProto, rhs: StoredPodcastSuggestionInputProto) -> Bool {
    if lhs.suggestionSectionID != rhs.suggestionSectionID {return false}
    if lhs.suggestionSectionReasoning != rhs.suggestionSectionReasoning {return false}
    if lhs.suggestionTitle != rhs.suggestionTitle {return false}
    if lhs.suggestionThumbnailPrompt != rhs.suggestionThumbnailPrompt {return false}
    if lhs.suggestionBadge != rhs.suggestionBadge {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension StoredPodcastPointsProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "StoredPodcastPointsProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "points"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.points) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.points.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.points, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: StoredPodcastPointsProto, rhs: StoredPodcastPointsProto) -> Bool {
    if lhs.points != rhs.points {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension StoredPodcastPointProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "StoredPodcastPointProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "point_id"),
    2: .same(proto: "reasoning"),
    3: .same(proto: "title"),
    4: .standard(proto: "title_emoji"),
    5: .same(proto: "outline"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.pointID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.reasoning) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.titleEmoji) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.outline) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.pointID.isEmpty {
      try visitor.visitSingularStringField(value: self.pointID, fieldNumber: 1)
    }
    if !self.reasoning.isEmpty {
      try visitor.visitSingularStringField(value: self.reasoning, fieldNumber: 2)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 3)
    }
    if !self.titleEmoji.isEmpty {
      try visitor.visitSingularStringField(value: self.titleEmoji, fieldNumber: 4)
    }
    if !self.outline.isEmpty {
      try visitor.visitSingularStringField(value: self.outline, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: StoredPodcastPointProto, rhs: StoredPodcastPointProto) -> Bool {
    if lhs.pointID != rhs.pointID {return false}
    if lhs.reasoning != rhs.reasoning {return false}
    if lhs.title != rhs.title {return false}
    if lhs.titleEmoji != rhs.titleEmoji {return false}
    if lhs.outline != rhs.outline {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension StoredPodcastPlanProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "StoredPodcastPlanProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "plan"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.plan) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if !self.plan.isEmpty {
      try visitor.visitSingularStringField(value: self.plan, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: StoredPodcastPlanProto, rhs: StoredPodcastPlanProto) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.plan != rhs.plan {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension StoredPodcastTranscriptProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "StoredPodcastTranscriptProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sections"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.sections) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.sections.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.sections, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: StoredPodcastTranscriptProto, rhs: StoredPodcastTranscriptProto) -> Bool {
    if lhs.sections != rhs.sections {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension StoredPodcastSectionTranscriptProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "StoredPodcastSectionTranscriptProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "section_type"),
    2: .same(proto: "entries"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.sectionType) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.entries) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.sectionType != .unknown {
      try visitor.visitSingularEnumField(value: self.sectionType, fieldNumber: 1)
    }
    if !self.entries.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.entries, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: StoredPodcastSectionTranscriptProto, rhs: StoredPodcastSectionTranscriptProto) -> Bool {
    if lhs.sectionType != rhs.sectionType {return false}
    if lhs.entries != rhs.entries {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension StoredPodcastTranscriptEntryProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "StoredPodcastTranscriptEntryProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "host"),
    2: .same(proto: "text"),
    3: .standard(proto: "start_millis"),
    4: .standard(proto: "end_millis"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.host) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.text) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.startMillis) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.endMillis) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.host != .unknown {
      try visitor.visitSingularEnumField(value: self.host, fieldNumber: 1)
    }
    if !self.text.isEmpty {
      try visitor.visitSingularStringField(value: self.text, fieldNumber: 2)
    }
    if self.startMillis != 0 {
      try visitor.visitSingularInt32Field(value: self.startMillis, fieldNumber: 3)
    }
    if self.endMillis != 0 {
      try visitor.visitSingularInt32Field(value: self.endMillis, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: StoredPodcastTranscriptEntryProto, rhs: StoredPodcastTranscriptEntryProto) -> Bool {
    if lhs.host != rhs.host {return false}
    if lhs.text != rhs.text {return false}
    if lhs.startMillis != rhs.startMillis {return false}
    if lhs.endMillis != rhs.endMillis {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension StoredPodcastVisualsProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "StoredPodcastVisualsProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "style_prompt"),
    2: .standard(proto: "thumbnail_prompt"),
    3: .standard(proto: "thumbnail_key"),
    4: .same(proto: "visuals"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.stylePrompt) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.thumbnailPrompt) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.thumbnailKey) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.visuals) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.stylePrompt.isEmpty {
      try visitor.visitSingularStringField(value: self.stylePrompt, fieldNumber: 1)
    }
    if !self.thumbnailPrompt.isEmpty {
      try visitor.visitSingularStringField(value: self.thumbnailPrompt, fieldNumber: 2)
    }
    if !self.thumbnailKey.isEmpty {
      try visitor.visitSingularStringField(value: self.thumbnailKey, fieldNumber: 3)
    }
    if !self.visuals.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.visuals, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: StoredPodcastVisualsProto, rhs: StoredPodcastVisualsProto) -> Bool {
    if lhs.stylePrompt != rhs.stylePrompt {return false}
    if lhs.thumbnailPrompt != rhs.thumbnailPrompt {return false}
    if lhs.thumbnailKey != rhs.thumbnailKey {return false}
    if lhs.visuals != rhs.visuals {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension StoredPodcastVisualProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "StoredPodcastVisualProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "timestamp_millis"),
    2: .standard(proto: "image_prompt"),
    3: .standard(proto: "image_key"),
    4: .same(proto: "transition"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.timestampMillis) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.imagePrompt) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.imageKey) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.transition) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.timestampMillis != 0 {
      try visitor.visitSingularInt32Field(value: self.timestampMillis, fieldNumber: 1)
    }
    if !self.imagePrompt.isEmpty {
      try visitor.visitSingularStringField(value: self.imagePrompt, fieldNumber: 2)
    }
    if !self.imageKey.isEmpty {
      try visitor.visitSingularStringField(value: self.imageKey, fieldNumber: 3)
    }
    if self.transition != .undefined {
      try visitor.visitSingularEnumField(value: self.transition, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: StoredPodcastVisualProto, rhs: StoredPodcastVisualProto) -> Bool {
    if lhs.timestampMillis != rhs.timestampMillis {return false}
    if lhs.imagePrompt != rhs.imagePrompt {return false}
    if lhs.imageKey != rhs.imageKey {return false}
    if lhs.transition != rhs.transition {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension StoredPodcastAudioProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "StoredPodcastAudioProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "audio_key"),
    2: .standard(proto: "audio_duration"),
    3: .same(proto: "words"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.audioKey) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._audioDuration) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.words) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.audioKey.isEmpty {
      try visitor.visitSingularStringField(value: self.audioKey, fieldNumber: 1)
    }
    try { if let v = self._audioDuration {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.words.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.words, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: StoredPodcastAudioProto, rhs: StoredPodcastAudioProto) -> Bool {
    if lhs.audioKey != rhs.audioKey {return false}
    if lhs._audioDuration != rhs._audioDuration {return false}
    if lhs.words != rhs.words {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension StoredPodcastKeyPointsProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "StoredPodcastKeyPointsProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "label"),
    2: .standard(proto: "key_points"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.label) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.keyPoints) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.label.isEmpty {
      try visitor.visitSingularStringField(value: self.label, fieldNumber: 1)
    }
    if !self.keyPoints.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.keyPoints, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: StoredPodcastKeyPointsProto, rhs: StoredPodcastKeyPointsProto) -> Bool {
    if lhs.label != rhs.label {return false}
    if lhs.keyPoints != rhs.keyPoints {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension StoredPodcastFollowupsProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "StoredPodcastFollowupsProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "label"),
    2: .same(proto: "followups"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.label) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.followups) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.label.isEmpty {
      try visitor.visitSingularStringField(value: self.label, fieldNumber: 1)
    }
    if !self.followups.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.followups, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: StoredPodcastFollowupsProto, rhs: StoredPodcastFollowupsProto) -> Bool {
    if lhs.label != rhs.label {return false}
    if lhs.followups != rhs.followups {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension StoredPodcastFollowupProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "StoredPodcastFollowupProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "followup_id"),
    2: .same(proto: "reasoning"),
    3: .same(proto: "emoji"),
    4: .same(proto: "outline"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.followupID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.reasoning) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.emoji) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.outline) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.followupID.isEmpty {
      try visitor.visitSingularStringField(value: self.followupID, fieldNumber: 1)
    }
    if !self.reasoning.isEmpty {
      try visitor.visitSingularStringField(value: self.reasoning, fieldNumber: 2)
    }
    if !self.emoji.isEmpty {
      try visitor.visitSingularStringField(value: self.emoji, fieldNumber: 3)
    }
    if !self.outline.isEmpty {
      try visitor.visitSingularStringField(value: self.outline, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: StoredPodcastFollowupProto, rhs: StoredPodcastFollowupProto) -> Bool {
    if lhs.followupID != rhs.followupID {return false}
    if lhs.reasoning != rhs.reasoning {return false}
    if lhs.emoji != rhs.emoji {return false}
    if lhs.outline != rhs.outline {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension StoredPodcastKeyPointProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "StoredPodcastKeyPointProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "key_point_id"),
    2: .same(proto: "title"),
    3: .standard(proto: "title_emoji"),
    4: .same(proto: "outline"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.keyPointID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.titleEmoji) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.outline) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.keyPointID.isEmpty {
      try visitor.visitSingularStringField(value: self.keyPointID, fieldNumber: 1)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 2)
    }
    if !self.titleEmoji.isEmpty {
      try visitor.visitSingularStringField(value: self.titleEmoji, fieldNumber: 3)
    }
    if !self.outline.isEmpty {
      try visitor.visitSingularStringField(value: self.outline, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: StoredPodcastKeyPointProto, rhs: StoredPodcastKeyPointProto) -> Bool {
    if lhs.keyPointID != rhs.keyPointID {return false}
    if lhs.title != rhs.title {return false}
    if lhs.titleEmoji != rhs.titleEmoji {return false}
    if lhs.outline != rhs.outline {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension StoredPodcastSuggestionsProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "StoredPodcastSuggestionsProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "suggestions_id"),
    2: .same(proto: "state"),
    3: .standard(proto: "created_at"),
    4: .standard(proto: "updated_at"),
    5: .same(proto: "reasoning"),
    6: .same(proto: "ranking"),
    7: .same(proto: "sections"),
    101: .same(proto: "log"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.suggestionsID) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.state) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._createdAt) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._updatedAt) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.reasoning) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.ranking) }()
      case 7: try { try decoder.decodeRepeatedMessageField(value: &self.sections) }()
      case 101: try { try decoder.decodeSingularMessageField(value: &self._log) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.suggestionsID.isEmpty {
      try visitor.visitSingularStringField(value: self.suggestionsID, fieldNumber: 1)
    }
    if self.state != .undefined {
      try visitor.visitSingularEnumField(value: self.state, fieldNumber: 2)
    }
    try { if let v = self._createdAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._updatedAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    if !self.reasoning.isEmpty {
      try visitor.visitSingularStringField(value: self.reasoning, fieldNumber: 5)
    }
    if !self.ranking.isEmpty {
      try visitor.visitSingularStringField(value: self.ranking, fieldNumber: 6)
    }
    if !self.sections.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.sections, fieldNumber: 7)
    }
    try { if let v = self._log {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 101)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: StoredPodcastSuggestionsProto, rhs: StoredPodcastSuggestionsProto) -> Bool {
    if lhs.suggestionsID != rhs.suggestionsID {return false}
    if lhs.state != rhs.state {return false}
    if lhs._createdAt != rhs._createdAt {return false}
    if lhs._updatedAt != rhs._updatedAt {return false}
    if lhs.reasoning != rhs.reasoning {return false}
    if lhs.ranking != rhs.ranking {return false}
    if lhs.sections != rhs.sections {return false}
    if lhs._log != rhs._log {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension StoredPodcastSuggestionsSectionProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "StoredPodcastSuggestionsSectionProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "section_id"),
    2: .same(proto: "reasoning"),
    3: .same(proto: "title"),
    4: .standard(proto: "style_prompt"),
    5: .standard(proto: "banner_suggestion"),
    6: .standard(proto: "footer_suggestion"),
    7: .same(proto: "story1"),
    8: .same(proto: "story2"),
  ]

  fileprivate class _StorageClass {
    var _sectionID: String = String()
    var _reasoning: String = String()
    var _title: String = String()
    var _stylePrompt: String = String()
    var _bannerSuggestion: StoredPodcastSuggestionProto? = nil
    var _footerSuggestion: StoredPodcastSuggestionProto? = nil
    var _story1: StoredPodcastStorySuggestionProto? = nil
    var _story2: StoredPodcastStorySuggestionProto? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _sectionID = source._sectionID
      _reasoning = source._reasoning
      _title = source._title
      _stylePrompt = source._stylePrompt
      _bannerSuggestion = source._bannerSuggestion
      _footerSuggestion = source._footerSuggestion
      _story1 = source._story1
      _story2 = source._story2
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._sectionID) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._reasoning) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._title) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._stylePrompt) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._bannerSuggestion) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._footerSuggestion) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._story1) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._story2) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._sectionID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._sectionID, fieldNumber: 1)
      }
      if !_storage._reasoning.isEmpty {
        try visitor.visitSingularStringField(value: _storage._reasoning, fieldNumber: 2)
      }
      if !_storage._title.isEmpty {
        try visitor.visitSingularStringField(value: _storage._title, fieldNumber: 3)
      }
      if !_storage._stylePrompt.isEmpty {
        try visitor.visitSingularStringField(value: _storage._stylePrompt, fieldNumber: 4)
      }
      try { if let v = _storage._bannerSuggestion {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._footerSuggestion {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._story1 {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._story2 {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: StoredPodcastSuggestionsSectionProto, rhs: StoredPodcastSuggestionsSectionProto) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._sectionID != rhs_storage._sectionID {return false}
        if _storage._reasoning != rhs_storage._reasoning {return false}
        if _storage._title != rhs_storage._title {return false}
        if _storage._stylePrompt != rhs_storage._stylePrompt {return false}
        if _storage._bannerSuggestion != rhs_storage._bannerSuggestion {return false}
        if _storage._footerSuggestion != rhs_storage._footerSuggestion {return false}
        if _storage._story1 != rhs_storage._story1 {return false}
        if _storage._story2 != rhs_storage._story2 {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension StoredPodcastSuggestionProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "StoredPodcastSuggestionProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "suggested_podcast_id"),
    2: .same(proto: "title"),
    3: .same(proto: "badge"),
    4: .standard(proto: "thumbnail_prompt"),
    5: .standard(proto: "thumbnail_key"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.suggestedPodcastID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.badge) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.thumbnailPrompt) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.thumbnailKey) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.suggestedPodcastID.isEmpty {
      try visitor.visitSingularStringField(value: self.suggestedPodcastID, fieldNumber: 1)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 2)
    }
    if !self.badge.isEmpty {
      try visitor.visitSingularStringField(value: self.badge, fieldNumber: 3)
    }
    if !self.thumbnailPrompt.isEmpty {
      try visitor.visitSingularStringField(value: self.thumbnailPrompt, fieldNumber: 4)
    }
    if !self.thumbnailKey.isEmpty {
      try visitor.visitSingularStringField(value: self.thumbnailKey, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: StoredPodcastSuggestionProto, rhs: StoredPodcastSuggestionProto) -> Bool {
    if lhs.suggestedPodcastID != rhs.suggestedPodcastID {return false}
    if lhs.title != rhs.title {return false}
    if lhs.badge != rhs.badge {return false}
    if lhs.thumbnailPrompt != rhs.thumbnailPrompt {return false}
    if lhs.thumbnailKey != rhs.thumbnailKey {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension StoredPodcastStorySuggestionProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "StoredPodcastStorySuggestionProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "suggested_story_id"),
    2: .same(proto: "title"),
    3: .standard(proto: "thumbnail_prompt"),
    4: .standard(proto: "thumbnail_key"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.suggestedStoryID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.thumbnailPrompt) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.thumbnailKey) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.suggestedStoryID.isEmpty {
      try visitor.visitSingularStringField(value: self.suggestedStoryID, fieldNumber: 1)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 2)
    }
    if !self.thumbnailPrompt.isEmpty {
      try visitor.visitSingularStringField(value: self.thumbnailPrompt, fieldNumber: 3)
    }
    if !self.thumbnailKey.isEmpty {
      try visitor.visitSingularStringField(value: self.thumbnailKey, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: StoredPodcastStorySuggestionProto, rhs: StoredPodcastStorySuggestionProto) -> Bool {
    if lhs.suggestedStoryID != rhs.suggestedStoryID {return false}
    if lhs.title != rhs.title {return false}
    if lhs.thumbnailPrompt != rhs.thumbnailPrompt {return false}
    if lhs.thumbnailKey != rhs.thumbnailKey {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension StoredPodcastStoryProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "StoredPodcastStoryProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "story_id"),
    2: .standard(proto: "user_id"),
    3: .standard(proto: "created_at"),
    4: .standard(proto: "updated_at"),
    5: .standard(proto: "deleted_at"),
    6: .same(proto: "state"),
    7: .same(proto: "input"),
    8: .same(proto: "slides"),
    100: .same(proto: "log"),
  ]

  fileprivate class _StorageClass {
    var _storyID: String = String()
    var _userID: String = String()
    var _createdAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _deletedAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _state: StoredPodcastStoryStateProto = .undefined
    var _input: StoredPodcastStoryInputProto? = nil
    var _slides: StoredPodcastStorySlidesProto? = nil
    var _log: LogProto? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _storyID = source._storyID
      _userID = source._userID
      _createdAt = source._createdAt
      _updatedAt = source._updatedAt
      _deletedAt = source._deletedAt
      _state = source._state
      _input = source._input
      _slides = source._slides
      _log = source._log
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._storyID) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._userID) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._createdAt) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._updatedAt) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._deletedAt) }()
        case 6: try { try decoder.decodeSingularEnumField(value: &_storage._state) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._input) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._slides) }()
        case 100: try { try decoder.decodeSingularMessageField(value: &_storage._log) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._storyID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._storyID, fieldNumber: 1)
      }
      if !_storage._userID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._userID, fieldNumber: 2)
      }
      try { if let v = _storage._createdAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._updatedAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._deletedAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
      if _storage._state != .undefined {
        try visitor.visitSingularEnumField(value: _storage._state, fieldNumber: 6)
      }
      try { if let v = _storage._input {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._slides {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._log {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 100)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: StoredPodcastStoryProto, rhs: StoredPodcastStoryProto) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._storyID != rhs_storage._storyID {return false}
        if _storage._userID != rhs_storage._userID {return false}
        if _storage._createdAt != rhs_storage._createdAt {return false}
        if _storage._updatedAt != rhs_storage._updatedAt {return false}
        if _storage._deletedAt != rhs_storage._deletedAt {return false}
        if _storage._state != rhs_storage._state {return false}
        if _storage._input != rhs_storage._input {return false}
        if _storage._slides != rhs_storage._slides {return false}
        if _storage._log != rhs_storage._log {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension StoredPodcastStoryInputProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "StoredPodcastStoryInputProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "suggestion"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: StoredPodcastStorySuggestionInputProto?
        var hadOneofValue = false
        if let current = self.type {
          hadOneofValue = true
          if case .suggestion(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.type = .suggestion(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if case .suggestion(let v)? = self.type {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: StoredPodcastStoryInputProto, rhs: StoredPodcastStoryInputProto) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension StoredPodcastStorySuggestionInputProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "StoredPodcastStorySuggestionInputProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "suggestion_section_id"),
    2: .standard(proto: "suggestion_section_reasoning"),
    3: .standard(proto: "suggestion_title"),
    4: .standard(proto: "suggestion_style_prompt"),
    5: .standard(proto: "suggestion_thumbnail_prompt"),
    6: .standard(proto: "suggestion_thumbnail_key"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.suggestionSectionID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.suggestionSectionReasoning) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.suggestionTitle) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.suggestionStylePrompt) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.suggestionThumbnailPrompt) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.suggestionThumbnailKey) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.suggestionSectionID.isEmpty {
      try visitor.visitSingularStringField(value: self.suggestionSectionID, fieldNumber: 1)
    }
    if !self.suggestionSectionReasoning.isEmpty {
      try visitor.visitSingularStringField(value: self.suggestionSectionReasoning, fieldNumber: 2)
    }
    if !self.suggestionTitle.isEmpty {
      try visitor.visitSingularStringField(value: self.suggestionTitle, fieldNumber: 3)
    }
    if !self.suggestionStylePrompt.isEmpty {
      try visitor.visitSingularStringField(value: self.suggestionStylePrompt, fieldNumber: 4)
    }
    if !self.suggestionThumbnailPrompt.isEmpty {
      try visitor.visitSingularStringField(value: self.suggestionThumbnailPrompt, fieldNumber: 5)
    }
    if !self.suggestionThumbnailKey.isEmpty {
      try visitor.visitSingularStringField(value: self.suggestionThumbnailKey, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: StoredPodcastStorySuggestionInputProto, rhs: StoredPodcastStorySuggestionInputProto) -> Bool {
    if lhs.suggestionSectionID != rhs.suggestionSectionID {return false}
    if lhs.suggestionSectionReasoning != rhs.suggestionSectionReasoning {return false}
    if lhs.suggestionTitle != rhs.suggestionTitle {return false}
    if lhs.suggestionStylePrompt != rhs.suggestionStylePrompt {return false}
    if lhs.suggestionThumbnailPrompt != rhs.suggestionThumbnailPrompt {return false}
    if lhs.suggestionThumbnailKey != rhs.suggestionThumbnailKey {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension StoredPodcastStorySlidesProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "StoredPodcastStorySlidesProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "is_ready"),
    2: .same(proto: "reasoning"),
    3: .same(proto: "structure"),
    4: .same(proto: "slides"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.isReady) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.reasoning) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.structure) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.slides) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.isReady != false {
      try visitor.visitSingularBoolField(value: self.isReady, fieldNumber: 1)
    }
    if !self.reasoning.isEmpty {
      try visitor.visitSingularStringField(value: self.reasoning, fieldNumber: 2)
    }
    if !self.structure.isEmpty {
      try visitor.visitSingularStringField(value: self.structure, fieldNumber: 3)
    }
    if !self.slides.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.slides, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: StoredPodcastStorySlidesProto, rhs: StoredPodcastStorySlidesProto) -> Bool {
    if lhs.isReady != rhs.isReady {return false}
    if lhs.reasoning != rhs.reasoning {return false}
    if lhs.structure != rhs.structure {return false}
    if lhs.slides != rhs.slides {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension StoredPodcastStorySlideProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "StoredPodcastStorySlideProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "slide_id"),
    2: .standard(proto: "is_ready"),
    3: .same(proto: "title"),
    4: .same(proto: "text"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.slideID) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.isReady) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.text) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.slideID.isEmpty {
      try visitor.visitSingularStringField(value: self.slideID, fieldNumber: 1)
    }
    if self.isReady != false {
      try visitor.visitSingularBoolField(value: self.isReady, fieldNumber: 2)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 3)
    }
    if !self.text.isEmpty {
      try visitor.visitSingularStringField(value: self.text, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: StoredPodcastStorySlideProto, rhs: StoredPodcastStorySlideProto) -> Bool {
    if lhs.slideID != rhs.slideID {return false}
    if lhs.isReady != rhs.isReady {return false}
    if lhs.title != rhs.title {return false}
    if lhs.text != rhs.text {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
