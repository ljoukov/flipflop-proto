// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: PodcastProto.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum PodcastSubscriptionSourceProto: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Int
  case undefined // = 0
  case platformSubscription // = 1
  case externalSubscription // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .undefined
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .undefined
    case 1: self = .platformSubscription
    case 2: self = .externalSubscription
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .undefined: return 0
    case .platformSubscription: return 1
    case .externalSubscription: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static let allCases: [PodcastSubscriptionSourceProto] = [
    .undefined,
    .platformSubscription,
    .externalSubscription,
  ]

}

enum PodcastStatusProto: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Int
  case undefined // = 0
  case generating // = 1
  case ready // = 2
  case failed // = 3
  case UNRECOGNIZED(Int)

  init() {
    self = .undefined
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .undefined
    case 1: self = .generating
    case 2: self = .ready
    case 3: self = .failed
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .undefined: return 0
    case .generating: return 1
    case .ready: return 2
    case .failed: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static let allCases: [PodcastStatusProto] = [
    .undefined,
    .generating,
    .ready,
    .failed,
  ]

}

enum PodcastVisualTransitionProto: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Int
  case undefined // = 0
  case dissolve // = 1
  case swipe // = 2
  case barSwipe // = 3
  case pageCurl // = 4
  case UNRECOGNIZED(Int)

  init() {
    self = .undefined
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .undefined
    case 1: self = .dissolve
    case 2: self = .swipe
    case 3: self = .barSwipe
    case 4: self = .pageCurl
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .undefined: return 0
    case .dissolve: return 1
    case .swipe: return 2
    case .barSwipe: return 3
    case .pageCurl: return 4
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static let allCases: [PodcastVisualTransitionProto] = [
    .undefined,
    .dissolve,
    .swipe,
    .barSwipe,
    .pageCurl,
  ]

}

enum PodcastHostProto: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Int
  case unknown // = 0
  case male // = 1
  case female // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .unknown
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .male
    case 2: self = .female
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .male: return 1
    case .female: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static let allCases: [PodcastHostProto] = [
    .unknown,
    .male,
    .female,
  ]

}

enum PodcastSuggestionsStateProto: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Int
  case undefined // = 0
  case generating // = 1
  case ready // = 2
  case failed // = 3
  case UNRECOGNIZED(Int)

  init() {
    self = .undefined
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .undefined
    case 1: self = .generating
    case 2: self = .ready
    case 3: self = .failed
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .undefined: return 0
    case .generating: return 1
    case .ready: return 2
    case .failed: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static let allCases: [PodcastSuggestionsStateProto] = [
    .undefined,
    .generating,
    .ready,
    .failed,
  ]

}

struct PodcastRequestAuthProto: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var firebaseIDToken: String = String()

  var appcheckToken: String = String()

  var isAnonomous: Bool = false

  var appstoreCurrentEntitlements: [PodcastAppStoreTransactionProto] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct PodcastSubscriptionStatusProto: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var isSubscriber: Bool = false

  var source: PodcastSubscriptionSourceProto = .undefined

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct PodcastStreamApiRequestProto: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var requestAuth: PodcastRequestAuthProto {
    get {return _requestAuth ?? PodcastRequestAuthProto()}
    set {_requestAuth = newValue}
  }
  /// Returns true if `requestAuth` has been explicitly set.
  var hasRequestAuth: Bool {return self._requestAuth != nil}
  /// Clears the value of `requestAuth`. Subsequent reads from it will return its default value.
  mutating func clearRequestAuth() {self._requestAuth = nil}

  var request: PodcastStreamApiRequestProto.OneOf_Request? = nil

  var create: CreatePodcastRequestProto {
    get {
      if case .create(let v)? = request {return v}
      return CreatePodcastRequestProto()
    }
    set {request = .create(newValue)}
  }

  var generate: GeneratePodcastRequestProto {
    get {
      if case .generate(let v)? = request {return v}
      return GeneratePodcastRequestProto()
    }
    set {request = .generate(newValue)}
  }

  var podcast: GetPodcastRequestProto {
    get {
      if case .podcast(let v)? = request {return v}
      return GetPodcastRequestProto()
    }
    set {request = .podcast(newValue)}
  }

  var story: GetPodcastStoryRequestProto {
    get {
      if case .story(let v)? = request {return v}
      return GetPodcastStoryRequestProto()
    }
    set {request = .story(newValue)}
  }

  var suggestionPoints: GetPodcastSuggestionPointsProto {
    get {
      if case .suggestionPoints(let v)? = request {return v}
      return GetPodcastSuggestionPointsProto()
    }
    set {request = .suggestionPoints(newValue)}
  }

  var home: GetPodcastHomeRequestProto {
    get {
      if case .home(let v)? = request {return v}
      return GetPodcastHomeRequestProto()
    }
    set {request = .home(newValue)}
  }

  var deleteAccount: DeleteAccountRequestProto {
    get {
      if case .deleteAccount(let v)? = request {return v}
      return DeleteAccountRequestProto()
    }
    set {request = .deleteAccount(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Request: Equatable, Sendable {
    case create(CreatePodcastRequestProto)
    case generate(GeneratePodcastRequestProto)
    case podcast(GetPodcastRequestProto)
    case story(GetPodcastStoryRequestProto)
    case suggestionPoints(GetPodcastSuggestionPointsProto)
    case home(GetPodcastHomeRequestProto)
    case deleteAccount(DeleteAccountRequestProto)

  }

  init() {}

  fileprivate var _requestAuth: PodcastRequestAuthProto? = nil
}

struct PodcastStreamApiResponseHeaderProto: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var header: PodcastStreamApiResponseHeaderProto.OneOf_Header? = nil

  var createHeader: CreatePodcastResponseHeaderProto {
    get {
      if case .createHeader(let v)? = header {return v}
      return CreatePodcastResponseHeaderProto()
    }
    set {header = .createHeader(newValue)}
  }

  var generateHeader: GeneratePodcastResponseHeaderProto {
    get {
      if case .generateHeader(let v)? = header {return v}
      return GeneratePodcastResponseHeaderProto()
    }
    set {header = .generateHeader(newValue)}
  }

  var podcastHeader: GetPodcastResponseHeaderProto {
    get {
      if case .podcastHeader(let v)? = header {return v}
      return GetPodcastResponseHeaderProto()
    }
    set {header = .podcastHeader(newValue)}
  }

  var storyHeader: GetPodcastStoryResponseHeaderProto {
    get {
      if case .storyHeader(let v)? = header {return v}
      return GetPodcastStoryResponseHeaderProto()
    }
    set {header = .storyHeader(newValue)}
  }

  var suggestionPointsHeader: GetPodcastSuggestionPointsResponseHeaderProto {
    get {
      if case .suggestionPointsHeader(let v)? = header {return v}
      return GetPodcastSuggestionPointsResponseHeaderProto()
    }
    set {header = .suggestionPointsHeader(newValue)}
  }

  var homeHeader: GetPodcastHomeResponseHeaderProto {
    get {
      if case .homeHeader(let v)? = header {return v}
      return GetPodcastHomeResponseHeaderProto()
    }
    set {header = .homeHeader(newValue)}
  }

  var deleteAccountHeader: DeleteAccountResponseHeaderProto {
    get {
      if case .deleteAccountHeader(let v)? = header {return v}
      return DeleteAccountResponseHeaderProto()
    }
    set {header = .deleteAccountHeader(newValue)}
  }

  var latencies: Dictionary<String,SwiftProtobuf.Google_Protobuf_Duration> = [:]

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Header: Equatable, Sendable {
    case createHeader(CreatePodcastResponseHeaderProto)
    case generateHeader(GeneratePodcastResponseHeaderProto)
    case podcastHeader(GetPodcastResponseHeaderProto)
    case storyHeader(GetPodcastStoryResponseHeaderProto)
    case suggestionPointsHeader(GetPodcastSuggestionPointsResponseHeaderProto)
    case homeHeader(GetPodcastHomeResponseHeaderProto)
    case deleteAccountHeader(DeleteAccountResponseHeaderProto)

  }

  init() {}
}

struct PodcastStreamApiResponseDeltaProto: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var responseDelta: PodcastStreamApiResponseDeltaProto.OneOf_ResponseDelta? = nil

  var createDelta: CreatePodcastResponseDeltaProto {
    get {
      if case .createDelta(let v)? = responseDelta {return v}
      return CreatePodcastResponseDeltaProto()
    }
    set {responseDelta = .createDelta(newValue)}
  }

  var generateDelta: GeneratePodcastResponseDeltaProto {
    get {
      if case .generateDelta(let v)? = responseDelta {return v}
      return GeneratePodcastResponseDeltaProto()
    }
    set {responseDelta = .generateDelta(newValue)}
  }

  var podcastDelta: GetPodcastResponseDeltaProto {
    get {
      if case .podcastDelta(let v)? = responseDelta {return v}
      return GetPodcastResponseDeltaProto()
    }
    set {responseDelta = .podcastDelta(newValue)}
  }

  var storyDelta: GetPodcastStoryResponseDeltaProto {
    get {
      if case .storyDelta(let v)? = responseDelta {return v}
      return GetPodcastStoryResponseDeltaProto()
    }
    set {responseDelta = .storyDelta(newValue)}
  }

  var suggestionPointsDelta: GetPodcastSuggestionPointsResponseDeltaProto {
    get {
      if case .suggestionPointsDelta(let v)? = responseDelta {return v}
      return GetPodcastSuggestionPointsResponseDeltaProto()
    }
    set {responseDelta = .suggestionPointsDelta(newValue)}
  }

  var homeDelta: GetPodcastHomeResponseDeltaProto {
    get {
      if case .homeDelta(let v)? = responseDelta {return v}
      return GetPodcastHomeResponseDeltaProto()
    }
    set {responseDelta = .homeDelta(newValue)}
  }

  var deleteAccountDelta: DeleteAccountResponseDeltaProto {
    get {
      if case .deleteAccountDelta(let v)? = responseDelta {return v}
      return DeleteAccountResponseDeltaProto()
    }
    set {responseDelta = .deleteAccountDelta(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_ResponseDelta: Equatable, Sendable {
    case createDelta(CreatePodcastResponseDeltaProto)
    case generateDelta(GeneratePodcastResponseDeltaProto)
    case podcastDelta(GetPodcastResponseDeltaProto)
    case storyDelta(GetPodcastStoryResponseDeltaProto)
    case suggestionPointsDelta(GetPodcastSuggestionPointsResponseDeltaProto)
    case homeDelta(GetPodcastHomeResponseDeltaProto)
    case deleteAccountDelta(DeleteAccountResponseDeltaProto)

  }

  init() {}
}

struct CreatePodcastRequestProto: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var prompt: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct CreatePodcastResponseHeaderProto: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var podcastID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct CreatePodcastResponseDeltaProto: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var type: CreatePodcastResponseDeltaProto.OneOf_Type? = nil

  /// This is the last delta message
  var error: PodcastErrorProto {
    get {
      if case .error(let v)? = type {return v}
      return PodcastErrorProto()
    }
    set {type = .error(newValue)}
  }

  var answer: PodcastPromptAnswerProto {
    get {
      if case .answer(let v)? = type {return v}
      return PodcastPromptAnswerProto()
    }
    set {type = .answer(newValue)}
  }

  var point: PodcastPointProto {
    get {
      if case .point(let v)? = type {return v}
      return PodcastPointProto()
    }
    set {type = .point(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Type: Equatable, Sendable {
    /// This is the last delta message
    case error(PodcastErrorProto)
    case answer(PodcastPromptAnswerProto)
    case point(PodcastPointProto)

  }

  init() {}
}

struct GeneratePodcastRequestProto: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var type: GeneratePodcastRequestProto.OneOf_Type? = nil

  var points: GeneratePodcastFromPointsProto {
    get {
      if case .points(let v)? = type {return v}
      return GeneratePodcastFromPointsProto()
    }
    set {type = .points(newValue)}
  }

  var suggestion: GeneratePodcastFromSuggestionProto {
    get {
      if case .suggestion(let v)? = type {return v}
      return GeneratePodcastFromSuggestionProto()
    }
    set {type = .suggestion(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Type: Equatable, Sendable {
    case points(GeneratePodcastFromPointsProto)
    case suggestion(GeneratePodcastFromSuggestionProto)

  }

  init() {}
}

struct GeneratePodcastFromPointsProto: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var podcastID: String = String()

  var pointIds: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GeneratePodcastFromSuggestionProto: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var podcastID: String = String()

  var pointIds: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GeneratePodcastResponseHeaderProto: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GeneratePodcastResponseDeltaProto: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var type: GeneratePodcastResponseDeltaProto.OneOf_Type? = nil

  var card: PodcastCardProto {
    get {
      if case .card(let v)? = type {return v}
      return PodcastCardProto()
    }
    set {type = .card(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Type: Equatable, Sendable {
    case card(PodcastCardProto)

  }

  init() {}
}

struct GetPodcastRequestProto: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var podcastID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GetPodcastResponseHeaderProto: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var podcast: PodcastProto {
    get {return _podcast ?? PodcastProto()}
    set {_podcast = newValue}
  }
  /// Returns true if `podcast` has been explicitly set.
  var hasPodcast: Bool {return self._podcast != nil}
  /// Clears the value of `podcast`. Subsequent reads from it will return its default value.
  mutating func clearPodcast() {self._podcast = nil}

  var cards: PodcastCardsProto {
    get {return _cards ?? PodcastCardsProto()}
    set {_cards = newValue}
  }
  /// Returns true if `cards` has been explicitly set.
  var hasCards: Bool {return self._cards != nil}
  /// Clears the value of `cards`. Subsequent reads from it will return its default value.
  mutating func clearCards() {self._cards = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _podcast: PodcastProto? = nil
  fileprivate var _cards: PodcastCardsProto? = nil
}

struct GetPodcastResponseDeltaProto: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GetPodcastStoryRequestProto: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var storyID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GetPodcastStoryResponseHeaderProto: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GetPodcastStoryResponseDeltaProto: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var type: GetPodcastStoryResponseDeltaProto.OneOf_Type? = nil

  var header: PodcastStoryHeaderProto {
    get {
      if case .header(let v)? = type {return v}
      return PodcastStoryHeaderProto()
    }
    set {type = .header(newValue)}
  }

  var slide: PodcastStorySlideProto {
    get {
      if case .slide(let v)? = type {return v}
      return PodcastStorySlideProto()
    }
    set {type = .slide(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Type: Equatable, Sendable {
    case header(PodcastStoryHeaderProto)
    case slide(PodcastStorySlideProto)

  }

  init() {}
}

struct GetPodcastSuggestionPointsProto: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var podcastID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GetPodcastSuggestionPointsResponseHeaderProto: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GetPodcastSuggestionPointsResponseDeltaProto: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var type: GetPodcastSuggestionPointsResponseDeltaProto.OneOf_Type? = nil

  var point: PodcastPointProto {
    get {
      if case .point(let v)? = type {return v}
      return PodcastPointProto()
    }
    set {type = .point(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Type: Equatable, Sendable {
    case point(PodcastPointProto)

  }

  init() {}
}

struct GetPodcastHomeRequestProto: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GetPodcastHomeResponseHeaderProto: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var subscriptionStatus: PodcastSubscriptionStatusProto {
    get {return _subscriptionStatus ?? PodcastSubscriptionStatusProto()}
    set {_subscriptionStatus = newValue}
  }
  /// Returns true if `subscriptionStatus` has been explicitly set.
  var hasSubscriptionStatus: Bool {return self._subscriptionStatus != nil}
  /// Clears the value of `subscriptionStatus`. Subsequent reads from it will return its default value.
  mutating func clearSubscriptionStatus() {self._subscriptionStatus = nil}

  var firestoreSuggestionsPath: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _subscriptionStatus: PodcastSubscriptionStatusProto? = nil
}

struct GetPodcastHomeResponseDeltaProto: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct DeleteAccountRequestProto: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct DeleteAccountResponseHeaderProto: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct DeleteAccountResponseDeltaProto: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct PodcastProto: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._updatedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._updatedAt = newValue}
  }
  /// Returns true if `updatedAt` has been explicitly set.
  var hasUpdatedAt: Bool {return _storage._updatedAt != nil}
  /// Clears the value of `updatedAt`. Subsequent reads from it will return its default value.
  mutating func clearUpdatedAt() {_uniqueStorage()._updatedAt = nil}

  var thumbnail: PodcastThumbnailProto {
    get {return _storage._thumbnail ?? PodcastThumbnailProto()}
    set {_uniqueStorage()._thumbnail = newValue}
  }
  /// Returns true if `thumbnail` has been explicitly set.
  var hasThumbnail: Bool {return _storage._thumbnail != nil}
  /// Clears the value of `thumbnail`. Subsequent reads from it will return its default value.
  mutating func clearThumbnail() {_uniqueStorage()._thumbnail = nil}

  var audio: PodcastAudioProto {
    get {return _storage._audio ?? PodcastAudioProto()}
    set {_uniqueStorage()._audio = newValue}
  }
  /// Returns true if `audio` has been explicitly set.
  var hasAudio: Bool {return _storage._audio != nil}
  /// Clears the value of `audio`. Subsequent reads from it will return its default value.
  mutating func clearAudio() {_uniqueStorage()._audio = nil}

  var visuals: PodcastVisualsProto {
    get {return _storage._visuals ?? PodcastVisualsProto()}
    set {_uniqueStorage()._visuals = newValue}
  }
  /// Returns true if `visuals` has been explicitly set.
  var hasVisuals: Bool {return _storage._visuals != nil}
  /// Clears the value of `visuals`. Subsequent reads from it will return its default value.
  mutating func clearVisuals() {_uniqueStorage()._visuals = nil}

  var transcript: PodcastTranscriptProto {
    get {return _storage._transcript ?? PodcastTranscriptProto()}
    set {_uniqueStorage()._transcript = newValue}
  }
  /// Returns true if `transcript` has been explicitly set.
  var hasTranscript: Bool {return _storage._transcript != nil}
  /// Clears the value of `transcript`. Subsequent reads from it will return its default value.
  mutating func clearTranscript() {_uniqueStorage()._transcript = nil}

  var cards: PodcastCardsProto {
    get {return _storage._cards ?? PodcastCardsProto()}
    set {_uniqueStorage()._cards = newValue}
  }
  /// Returns true if `cards` has been explicitly set.
  var hasCards: Bool {return _storage._cards != nil}
  /// Clears the value of `cards`. Subsequent reads from it will return its default value.
  mutating func clearCards() {_uniqueStorage()._cards = nil}

  var keyPoints: PodcastKeyPointsProto {
    get {return _storage._keyPoints ?? PodcastKeyPointsProto()}
    set {_uniqueStorage()._keyPoints = newValue}
  }
  /// Returns true if `keyPoints` has been explicitly set.
  var hasKeyPoints: Bool {return _storage._keyPoints != nil}
  /// Clears the value of `keyPoints`. Subsequent reads from it will return its default value.
  mutating func clearKeyPoints() {_uniqueStorage()._keyPoints = nil}

  var followups: PodcastFollowupsProto {
    get {return _storage._followups ?? PodcastFollowupsProto()}
    set {_uniqueStorage()._followups = newValue}
  }
  /// Returns true if `followups` has been explicitly set.
  var hasFollowups: Bool {return _storage._followups != nil}
  /// Clears the value of `followups`. Subsequent reads from it will return its default value.
  mutating func clearFollowups() {_uniqueStorage()._followups = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct FirestorePodcastSuggestionsProto: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _updatedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_updatedAt = newValue}
  }
  /// Returns true if `updatedAt` has been explicitly set.
  var hasUpdatedAt: Bool {return self._updatedAt != nil}
  /// Clears the value of `updatedAt`. Subsequent reads from it will return its default value.
  mutating func clearUpdatedAt() {self._updatedAt = nil}

  var yourPodcastsShelf: YourPodcastsShelfProto {
    get {return _yourPodcastsShelf ?? YourPodcastsShelfProto()}
    set {_yourPodcastsShelf = newValue}
  }
  /// Returns true if `yourPodcastsShelf` has been explicitly set.
  var hasYourPodcastsShelf: Bool {return self._yourPodcastsShelf != nil}
  /// Clears the value of `yourPodcastsShelf`. Subsequent reads from it will return its default value.
  mutating func clearYourPodcastsShelf() {self._yourPodcastsShelf = nil}

  var suggestions: PodcastSuggestionsProto {
    get {return _suggestions ?? PodcastSuggestionsProto()}
    set {_suggestions = newValue}
  }
  /// Returns true if `suggestions` has been explicitly set.
  var hasSuggestions: Bool {return self._suggestions != nil}
  /// Clears the value of `suggestions`. Subsequent reads from it will return its default value.
  mutating func clearSuggestions() {self._suggestions = nil}

  var generationState: PodcastSuggestionsGenerationStateProto {
    get {return _generationState ?? PodcastSuggestionsGenerationStateProto()}
    set {_generationState = newValue}
  }
  /// Returns true if `generationState` has been explicitly set.
  var hasGenerationState: Bool {return self._generationState != nil}
  /// Clears the value of `generationState`. Subsequent reads from it will return its default value.
  mutating func clearGenerationState() {self._generationState = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _yourPodcastsShelf: YourPodcastsShelfProto? = nil
  fileprivate var _suggestions: PodcastSuggestionsProto? = nil
  fileprivate var _generationState: PodcastSuggestionsGenerationStateProto? = nil
}

struct YourPodcastsShelfProto: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var thumbnails: Dictionary<String,PodcastThumbnailProto> = [:]

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct PodcastPointProto: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var pointID: String = String()

  var title: String = String()

  var titleEmoji: String = String()

  var outline: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct PodcastThumbnailProto: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var podcastID: String = String()

  var status: PodcastStatusProto = .undefined

  var displayStatus: String = String()

  var title: String = String()

  /// used for large suggested thumbnails
  var longTitle: String = String()

  /// May be empty or Q&A, Debate, ...
  var badge: String = String()

  var path: String = String()

  var duration: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _duration ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_duration = newValue}
  }
  /// Returns true if `duration` has been explicitly set.
  var hasDuration: Bool {return self._duration != nil}
  /// Clears the value of `duration`. Subsequent reads from it will return its default value.
  mutating func clearDuration() {self._duration = nil}

  var updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _updatedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_updatedAt = newValue}
  }
  /// Returns true if `updatedAt` has been explicitly set.
  var hasUpdatedAt: Bool {return self._updatedAt != nil}
  /// Clears the value of `updatedAt`. Subsequent reads from it will return its default value.
  mutating func clearUpdatedAt() {self._updatedAt = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _duration: SwiftProtobuf.Google_Protobuf_Duration? = nil
  fileprivate var _updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

struct PodcastAudioProto: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var path: String = String()

  var duration: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _duration ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_duration = newValue}
  }
  /// Returns true if `duration` has been explicitly set.
  var hasDuration: Bool {return self._duration != nil}
  /// Clears the value of `duration`. Subsequent reads from it will return its default value.
  mutating func clearDuration() {self._duration = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _duration: SwiftProtobuf.Google_Protobuf_Duration? = nil
}

struct PodcastCardsProto: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var isReady: Bool = false

  var cards: [PodcastCardProto] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct PodcastCardProto: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var cardID: String = String()

  var isReady: Bool = false

  /// IDs start at 10
  var type: PodcastCardProto.OneOf_Type? = nil

  var knowledge: PodcastKnowledgeCardProto {
    get {
      if case .knowledge(let v)? = type {return v}
      return PodcastKnowledgeCardProto()
    }
    set {type = .knowledge(newValue)}
  }

  var multipleChoice: PodcastMultipleChoiceCardProto {
    get {
      if case .multipleChoice(let v)? = type {return v}
      return PodcastMultipleChoiceCardProto()
    }
    set {type = .multipleChoice(newValue)}
  }

  var poll: PodcastPollCardProto {
    get {
      if case .poll(let v)? = type {return v}
      return PodcastPollCardProto()
    }
    set {type = .poll(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  /// IDs start at 10
  enum OneOf_Type: Equatable, Sendable {
    case knowledge(PodcastKnowledgeCardProto)
    case multipleChoice(PodcastMultipleChoiceCardProto)
    case poll(PodcastPollCardProto)

  }

  init() {}
}

struct PodcastErrorProto: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var message: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct PodcastPromptAnswerProto: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var text: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct PodcastVisualsProto: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var visuals: [PodcastVisualProto] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct PodcastVisualProto: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var timestampMillis: Int32 = 0

  var imagePath: String = String()

  var animation: PodcastVisualAnimationProto {
    get {return _animation ?? PodcastVisualAnimationProto()}
    set {_animation = newValue}
  }
  /// Returns true if `animation` has been explicitly set.
  var hasAnimation: Bool {return self._animation != nil}
  /// Clears the value of `animation`. Subsequent reads from it will return its default value.
  mutating func clearAnimation() {self._animation = nil}

  var transition: PodcastVisualTransitionProto = .undefined

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _animation: PodcastVisualAnimationProto? = nil
}

struct PodcastVisualAnimationProto: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var durationMillis: Int32 = 0

  var startScale: Float = 0

  var endScale: Float = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct PodcastTranscriptProto: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var entries: [PodcastTranscriptEntryProto] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct PodcastTranscriptEntryProto: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var host: PodcastHostProto = .unknown

  var words: [PodcastWordProto] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct PodcastWordProto: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var word: String = String()

  var startMillis: Int32 = 0

  var endMillis: Int32 = 0

  var separator: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// No user input assumed
struct PodcastKnowledgeCardProto: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var title: String = String()

  var hero: PodcastCardHeroProto {
    get {return _hero ?? PodcastCardHeroProto()}
    set {_hero = newValue}
  }
  /// Returns true if `hero` has been explicitly set.
  var hasHero: Bool {return self._hero != nil}
  /// Clears the value of `hero`. Subsequent reads from it will return its default value.
  mutating func clearHero() {self._hero = nil}

  var text: String = String()

  var explanation: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _hero: PodcastCardHeroProto? = nil
}

/// 2: True/False, 3: A/B/C or 4: 1/2/3/4 user input
struct PodcastMultipleChoiceCardProto: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var title: String = String()

  var hero: PodcastCardHeroProto {
    get {return _hero ?? PodcastCardHeroProto()}
    set {_hero = newValue}
  }
  /// Returns true if `hero` has been explicitly set.
  var hasHero: Bool {return self._hero != nil}
  /// Clears the value of `hero`. Subsequent reads from it will return its default value.
  mutating func clearHero() {self._hero = nil}

  var question: String = String()

  var options: [PodcastMultipleChoiceOptionProto] = []

  var correctAnswerNumber: Int32 = 0

  /// Number of hints is the number of possible wrong answers.
  var hints: [String] = []

  var explanation: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _hero: PodcastCardHeroProto? = nil
}

/// 2, 3 or 4 options to vote for
struct PodcastPollCardProto: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var title: String = String()

  var hero: PodcastCardHeroProto {
    get {return _hero ?? PodcastCardHeroProto()}
    set {_hero = newValue}
  }
  /// Returns true if `hero` has been explicitly set.
  var hasHero: Bool {return self._hero != nil}
  /// Clears the value of `hero`. Subsequent reads from it will return its default value.
  mutating func clearHero() {self._hero = nil}

  var question: String = String()

  /// commentary
  var options: [PodcastPollOptionProto] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _hero: PodcastCardHeroProto? = nil
}

struct PodcastCardHeroProto: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var emoji: String = String()

  var lottieURL: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct PodcastMultipleChoiceOptionProto: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Could be a label like True/False or a short sentence
  var text: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct PodcastPollOptionProto: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var text: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct PodcastKeyPointsProto: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var label: String = String()

  var keyPoints: [PodcastKeyPointProto] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct PodcastFollowupsProto: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var label: String = String()

  var followups: [PodcastFollowupProto] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct PodcastFollowupProto: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var followupID: String = String()

  var emoji: String = String()

  var outline: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct PodcastKeyPointProto: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var keyPointID: String = String()

  var title: String = String()

  var titleEmoji: String = String()

  var outline: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct PodcastSuggestionsProto: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var suggestionsID: String = String()

  var createdAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _createdAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_createdAt = newValue}
  }
  /// Returns true if `createdAt` has been explicitly set.
  var hasCreatedAt: Bool {return self._createdAt != nil}
  /// Clears the value of `createdAt`. Subsequent reads from it will return its default value.
  mutating func clearCreatedAt() {self._createdAt = nil}

  var sections: [PodcastSuggestionsSectionProto] = []

  var routine: PodcastRoutineProto {
    get {return _routine ?? PodcastRoutineProto()}
    set {_routine = newValue}
  }
  /// Returns true if `routine` has been explicitly set.
  var hasRoutine: Bool {return self._routine != nil}
  /// Clears the value of `routine`. Subsequent reads from it will return its default value.
  mutating func clearRoutine() {self._routine = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _createdAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _routine: PodcastRoutineProto? = nil
}

struct PodcastSuggestionsGenerationStateProto: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var suggestionsID: String = String()

  var updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _updatedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_updatedAt = newValue}
  }
  /// Returns true if `updatedAt` has been explicitly set.
  var hasUpdatedAt: Bool {return self._updatedAt != nil}
  /// Clears the value of `updatedAt`. Subsequent reads from it will return its default value.
  mutating func clearUpdatedAt() {self._updatedAt = nil}

  var state: PodcastSuggestionsStateProto = .undefined

  var displayState: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

struct PodcastSuggestionsSectionProto: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var sectionID: String {
    get {return _storage._sectionID}
    set {_uniqueStorage()._sectionID = newValue}
  }

  var sectionTitle: String {
    get {return _storage._sectionTitle}
    set {_uniqueStorage()._sectionTitle = newValue}
  }

  var bannerSuggestion: PodcastThumbnailProto {
    get {return _storage._bannerSuggestion ?? PodcastThumbnailProto()}
    set {_uniqueStorage()._bannerSuggestion = newValue}
  }
  /// Returns true if `bannerSuggestion` has been explicitly set.
  var hasBannerSuggestion: Bool {return _storage._bannerSuggestion != nil}
  /// Clears the value of `bannerSuggestion`. Subsequent reads from it will return its default value.
  mutating func clearBannerSuggestion() {_uniqueStorage()._bannerSuggestion = nil}

  var footerSuggestion: PodcastThumbnailProto {
    get {return _storage._footerSuggestion ?? PodcastThumbnailProto()}
    set {_uniqueStorage()._footerSuggestion = newValue}
  }
  /// Returns true if `footerSuggestion` has been explicitly set.
  var hasFooterSuggestion: Bool {return _storage._footerSuggestion != nil}
  /// Clears the value of `footerSuggestion`. Subsequent reads from it will return its default value.
  mutating func clearFooterSuggestion() {_uniqueStorage()._footerSuggestion = nil}

  var story1: PodcastStoryThumbnailProto {
    get {return _storage._story1 ?? PodcastStoryThumbnailProto()}
    set {_uniqueStorage()._story1 = newValue}
  }
  /// Returns true if `story1` has been explicitly set.
  var hasStory1: Bool {return _storage._story1 != nil}
  /// Clears the value of `story1`. Subsequent reads from it will return its default value.
  mutating func clearStory1() {_uniqueStorage()._story1 = nil}

  var story2: PodcastStoryThumbnailProto {
    get {return _storage._story2 ?? PodcastStoryThumbnailProto()}
    set {_uniqueStorage()._story2 = newValue}
  }
  /// Returns true if `story2` has been explicitly set.
  var hasStory2: Bool {return _storage._story2 != nil}
  /// Clears the value of `story2`. Subsequent reads from it will return its default value.
  mutating func clearStory2() {_uniqueStorage()._story2 = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct PodcastStoryThumbnailProto: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var storyID: String = String()

  var title: String = String()

  var thumbnailPath: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct PodcastStoryHeaderProto: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var badge: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct PodcastStorySlideProto: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var slideID: String = String()

  var isTextReady: Bool = false

  var title: String = String()

  var imagePath: String = String()

  var text: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct PodcastRoutineProto: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var routineID: String = String()

  var title: String = String()

  var segments: [PodcastRoutineSegmentProto] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct PodcastRoutineSegmentProto: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var segmentID: String = String()

  var title: String = String()

  var steps: [PodcastRoutineStepProto] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct PodcastRoutineStepProto: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var thumbnail: PodcastThumbnailProto {
    get {return _thumbnail ?? PodcastThumbnailProto()}
    set {_thumbnail = newValue}
  }
  /// Returns true if `thumbnail` has been explicitly set.
  var hasThumbnail: Bool {return self._thumbnail != nil}
  /// Clears the value of `thumbnail`. Subsequent reads from it will return its default value.
  mutating func clearThumbnail() {self._thumbnail = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _thumbnail: PodcastThumbnailProto? = nil
}

struct PodcastAppStoreTransactionProto: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var transactionJws: String = String()

  var renewalInfoJws: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct PodcastUserProgressProto: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var routineProgress: Dictionary<String,PodcastRoutineProgressProto> = [:]

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct PodcastRoutineProgressProto: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var stepProgress: Dictionary<String,PodcastRoutineStepProgressProto> = [:]

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct PodcastRoutineStepProgressProto: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var completedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _completedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_completedAt = newValue}
  }
  /// Returns true if `completedAt` has been explicitly set.
  var hasCompletedAt: Bool {return self._completedAt != nil}
  /// Clears the value of `completedAt`. Subsequent reads from it will return its default value.
  mutating func clearCompletedAt() {self._completedAt = nil}

  var completed: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _completedAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension PodcastSubscriptionSourceProto: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "PODCAST_SUBSCRIPTION_SOURCE_PROTO_UNDEFINED"),
    1: .same(proto: "PODCAST_SUBSCRIPTION_SOURCE_PROTO_PLATFORM_SUBSCRIPTION"),
    2: .same(proto: "PODCAST_SUBSCRIPTION_SOURCE_PROTO_EXTERNAL_SUBSCRIPTION"),
  ]
}

extension PodcastStatusProto: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "PODCAST_STATUS_PROTO_UNDEFINED"),
    1: .same(proto: "PODCAST_STATUS_PROTO_GENERATING"),
    2: .same(proto: "PODCAST_STATUS_PROTO_READY"),
    3: .same(proto: "PODCAST_STATUS_PROTO_FAILED"),
  ]
}

extension PodcastVisualTransitionProto: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "PODCAST_VISUAL_TRANSITION_PROTO_UNDEFINED"),
    1: .same(proto: "PODCAST_VISUAL_TRANSITION_PROTO_DISSOLVE"),
    2: .same(proto: "PODCAST_VISUAL_TRANSITION_PROTO_SWIPE"),
    3: .same(proto: "PODCAST_VISUAL_TRANSITION_PROTO_BAR_SWIPE"),
    4: .same(proto: "PODCAST_VISUAL_TRANSITION_PROTO_PAGE_CURL"),
  ]
}

extension PodcastHostProto: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "PODCAST_HOST_PROTO_UNKNOWN"),
    1: .same(proto: "PODCAST_HOST_PROTO_MALE"),
    2: .same(proto: "PODCAST_HOST_PROTO_FEMALE"),
  ]
}

extension PodcastSuggestionsStateProto: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "PODCAST_SUGGESTIONS_STATE_PROTO_UNDEFINED"),
    1: .same(proto: "PODCAST_SUGGESTIONS_STATE_PROTO_GENERATING"),
    2: .same(proto: "PODCAST_SUGGESTIONS_STATE_PROTO_READY"),
    3: .same(proto: "PODCAST_SUGGESTIONS_STATE_PROTO_FAILED"),
  ]
}

extension PodcastRequestAuthProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PodcastRequestAuthProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "firebase_id_token"),
    2: .standard(proto: "appcheck_token"),
    3: .standard(proto: "is_anonomous"),
    4: .standard(proto: "appstore_current_entitlements"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.firebaseIDToken) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.appcheckToken) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.isAnonomous) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.appstoreCurrentEntitlements) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.firebaseIDToken.isEmpty {
      try visitor.visitSingularStringField(value: self.firebaseIDToken, fieldNumber: 1)
    }
    if !self.appcheckToken.isEmpty {
      try visitor.visitSingularStringField(value: self.appcheckToken, fieldNumber: 2)
    }
    if self.isAnonomous != false {
      try visitor.visitSingularBoolField(value: self.isAnonomous, fieldNumber: 3)
    }
    if !self.appstoreCurrentEntitlements.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.appstoreCurrentEntitlements, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PodcastRequestAuthProto, rhs: PodcastRequestAuthProto) -> Bool {
    if lhs.firebaseIDToken != rhs.firebaseIDToken {return false}
    if lhs.appcheckToken != rhs.appcheckToken {return false}
    if lhs.isAnonomous != rhs.isAnonomous {return false}
    if lhs.appstoreCurrentEntitlements != rhs.appstoreCurrentEntitlements {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PodcastSubscriptionStatusProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PodcastSubscriptionStatusProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "is_subscriber"),
    2: .same(proto: "source"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.isSubscriber) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.source) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.isSubscriber != false {
      try visitor.visitSingularBoolField(value: self.isSubscriber, fieldNumber: 1)
    }
    if self.source != .undefined {
      try visitor.visitSingularEnumField(value: self.source, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PodcastSubscriptionStatusProto, rhs: PodcastSubscriptionStatusProto) -> Bool {
    if lhs.isSubscriber != rhs.isSubscriber {return false}
    if lhs.source != rhs.source {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PodcastStreamApiRequestProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PodcastStreamApiRequestProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "request_auth"),
    10: .same(proto: "create"),
    11: .same(proto: "generate"),
    12: .same(proto: "podcast"),
    13: .same(proto: "story"),
    14: .standard(proto: "suggestion_points"),
    15: .same(proto: "home"),
    16: .standard(proto: "delete_account"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._requestAuth) }()
      case 10: try {
        var v: CreatePodcastRequestProto?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .create(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .create(v)
        }
      }()
      case 11: try {
        var v: GeneratePodcastRequestProto?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .generate(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .generate(v)
        }
      }()
      case 12: try {
        var v: GetPodcastRequestProto?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .podcast(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .podcast(v)
        }
      }()
      case 13: try {
        var v: GetPodcastStoryRequestProto?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .story(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .story(v)
        }
      }()
      case 14: try {
        var v: GetPodcastSuggestionPointsProto?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .suggestionPoints(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .suggestionPoints(v)
        }
      }()
      case 15: try {
        var v: GetPodcastHomeRequestProto?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .home(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .home(v)
        }
      }()
      case 16: try {
        var v: DeleteAccountRequestProto?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .deleteAccount(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .deleteAccount(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._requestAuth {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    switch self.request {
    case .create?: try {
      guard case .create(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    }()
    case .generate?: try {
      guard case .generate(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    }()
    case .podcast?: try {
      guard case .podcast(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
    }()
    case .story?: try {
      guard case .story(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
    }()
    case .suggestionPoints?: try {
      guard case .suggestionPoints(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
    }()
    case .home?: try {
      guard case .home(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
    }()
    case .deleteAccount?: try {
      guard case .deleteAccount(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PodcastStreamApiRequestProto, rhs: PodcastStreamApiRequestProto) -> Bool {
    if lhs._requestAuth != rhs._requestAuth {return false}
    if lhs.request != rhs.request {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PodcastStreamApiResponseHeaderProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PodcastStreamApiResponseHeaderProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    10: .standard(proto: "create_header"),
    11: .standard(proto: "generate_header"),
    12: .standard(proto: "podcast_header"),
    13: .standard(proto: "story_header"),
    14: .standard(proto: "suggestion_points_header"),
    15: .standard(proto: "home_header"),
    16: .standard(proto: "delete_account_header"),
    100: .same(proto: "latencies"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 10: try {
        var v: CreatePodcastResponseHeaderProto?
        var hadOneofValue = false
        if let current = self.header {
          hadOneofValue = true
          if case .createHeader(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.header = .createHeader(v)
        }
      }()
      case 11: try {
        var v: GeneratePodcastResponseHeaderProto?
        var hadOneofValue = false
        if let current = self.header {
          hadOneofValue = true
          if case .generateHeader(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.header = .generateHeader(v)
        }
      }()
      case 12: try {
        var v: GetPodcastResponseHeaderProto?
        var hadOneofValue = false
        if let current = self.header {
          hadOneofValue = true
          if case .podcastHeader(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.header = .podcastHeader(v)
        }
      }()
      case 13: try {
        var v: GetPodcastStoryResponseHeaderProto?
        var hadOneofValue = false
        if let current = self.header {
          hadOneofValue = true
          if case .storyHeader(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.header = .storyHeader(v)
        }
      }()
      case 14: try {
        var v: GetPodcastSuggestionPointsResponseHeaderProto?
        var hadOneofValue = false
        if let current = self.header {
          hadOneofValue = true
          if case .suggestionPointsHeader(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.header = .suggestionPointsHeader(v)
        }
      }()
      case 15: try {
        var v: GetPodcastHomeResponseHeaderProto?
        var hadOneofValue = false
        if let current = self.header {
          hadOneofValue = true
          if case .homeHeader(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.header = .homeHeader(v)
        }
      }()
      case 16: try {
        var v: DeleteAccountResponseHeaderProto?
        var hadOneofValue = false
        if let current = self.header {
          hadOneofValue = true
          if case .deleteAccountHeader(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.header = .deleteAccountHeader(v)
        }
      }()
      case 100: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.Google_Protobuf_Duration>.self, value: &self.latencies) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.header {
    case .createHeader?: try {
      guard case .createHeader(let v)? = self.header else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    }()
    case .generateHeader?: try {
      guard case .generateHeader(let v)? = self.header else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    }()
    case .podcastHeader?: try {
      guard case .podcastHeader(let v)? = self.header else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
    }()
    case .storyHeader?: try {
      guard case .storyHeader(let v)? = self.header else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
    }()
    case .suggestionPointsHeader?: try {
      guard case .suggestionPointsHeader(let v)? = self.header else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
    }()
    case .homeHeader?: try {
      guard case .homeHeader(let v)? = self.header else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
    }()
    case .deleteAccountHeader?: try {
      guard case .deleteAccountHeader(let v)? = self.header else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
    }()
    case nil: break
    }
    if !self.latencies.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.Google_Protobuf_Duration>.self, value: self.latencies, fieldNumber: 100)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PodcastStreamApiResponseHeaderProto, rhs: PodcastStreamApiResponseHeaderProto) -> Bool {
    if lhs.header != rhs.header {return false}
    if lhs.latencies != rhs.latencies {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PodcastStreamApiResponseDeltaProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PodcastStreamApiResponseDeltaProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    10: .standard(proto: "create_delta"),
    11: .standard(proto: "generate_delta"),
    12: .standard(proto: "podcast_delta"),
    13: .standard(proto: "story_delta"),
    14: .standard(proto: "suggestion_points_delta"),
    15: .standard(proto: "home_delta"),
    16: .standard(proto: "delete_account_delta"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 10: try {
        var v: CreatePodcastResponseDeltaProto?
        var hadOneofValue = false
        if let current = self.responseDelta {
          hadOneofValue = true
          if case .createDelta(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.responseDelta = .createDelta(v)
        }
      }()
      case 11: try {
        var v: GeneratePodcastResponseDeltaProto?
        var hadOneofValue = false
        if let current = self.responseDelta {
          hadOneofValue = true
          if case .generateDelta(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.responseDelta = .generateDelta(v)
        }
      }()
      case 12: try {
        var v: GetPodcastResponseDeltaProto?
        var hadOneofValue = false
        if let current = self.responseDelta {
          hadOneofValue = true
          if case .podcastDelta(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.responseDelta = .podcastDelta(v)
        }
      }()
      case 13: try {
        var v: GetPodcastStoryResponseDeltaProto?
        var hadOneofValue = false
        if let current = self.responseDelta {
          hadOneofValue = true
          if case .storyDelta(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.responseDelta = .storyDelta(v)
        }
      }()
      case 14: try {
        var v: GetPodcastSuggestionPointsResponseDeltaProto?
        var hadOneofValue = false
        if let current = self.responseDelta {
          hadOneofValue = true
          if case .suggestionPointsDelta(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.responseDelta = .suggestionPointsDelta(v)
        }
      }()
      case 15: try {
        var v: GetPodcastHomeResponseDeltaProto?
        var hadOneofValue = false
        if let current = self.responseDelta {
          hadOneofValue = true
          if case .homeDelta(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.responseDelta = .homeDelta(v)
        }
      }()
      case 16: try {
        var v: DeleteAccountResponseDeltaProto?
        var hadOneofValue = false
        if let current = self.responseDelta {
          hadOneofValue = true
          if case .deleteAccountDelta(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.responseDelta = .deleteAccountDelta(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.responseDelta {
    case .createDelta?: try {
      guard case .createDelta(let v)? = self.responseDelta else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    }()
    case .generateDelta?: try {
      guard case .generateDelta(let v)? = self.responseDelta else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    }()
    case .podcastDelta?: try {
      guard case .podcastDelta(let v)? = self.responseDelta else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
    }()
    case .storyDelta?: try {
      guard case .storyDelta(let v)? = self.responseDelta else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
    }()
    case .suggestionPointsDelta?: try {
      guard case .suggestionPointsDelta(let v)? = self.responseDelta else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
    }()
    case .homeDelta?: try {
      guard case .homeDelta(let v)? = self.responseDelta else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
    }()
    case .deleteAccountDelta?: try {
      guard case .deleteAccountDelta(let v)? = self.responseDelta else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PodcastStreamApiResponseDeltaProto, rhs: PodcastStreamApiResponseDeltaProto) -> Bool {
    if lhs.responseDelta != rhs.responseDelta {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CreatePodcastRequestProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "CreatePodcastRequestProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "prompt"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.prompt) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.prompt.isEmpty {
      try visitor.visitSingularStringField(value: self.prompt, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CreatePodcastRequestProto, rhs: CreatePodcastRequestProto) -> Bool {
    if lhs.prompt != rhs.prompt {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CreatePodcastResponseHeaderProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "CreatePodcastResponseHeaderProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "podcast_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.podcastID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.podcastID.isEmpty {
      try visitor.visitSingularStringField(value: self.podcastID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CreatePodcastResponseHeaderProto, rhs: CreatePodcastResponseHeaderProto) -> Bool {
    if lhs.podcastID != rhs.podcastID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CreatePodcastResponseDeltaProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "CreatePodcastResponseDeltaProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "error"),
    2: .same(proto: "answer"),
    3: .same(proto: "point"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: PodcastErrorProto?
        var hadOneofValue = false
        if let current = self.type {
          hadOneofValue = true
          if case .error(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.type = .error(v)
        }
      }()
      case 2: try {
        var v: PodcastPromptAnswerProto?
        var hadOneofValue = false
        if let current = self.type {
          hadOneofValue = true
          if case .answer(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.type = .answer(v)
        }
      }()
      case 3: try {
        var v: PodcastPointProto?
        var hadOneofValue = false
        if let current = self.type {
          hadOneofValue = true
          if case .point(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.type = .point(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.type {
    case .error?: try {
      guard case .error(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .answer?: try {
      guard case .answer(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .point?: try {
      guard case .point(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CreatePodcastResponseDeltaProto, rhs: CreatePodcastResponseDeltaProto) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GeneratePodcastRequestProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "GeneratePodcastRequestProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "points"),
    2: .same(proto: "suggestion"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: GeneratePodcastFromPointsProto?
        var hadOneofValue = false
        if let current = self.type {
          hadOneofValue = true
          if case .points(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.type = .points(v)
        }
      }()
      case 2: try {
        var v: GeneratePodcastFromSuggestionProto?
        var hadOneofValue = false
        if let current = self.type {
          hadOneofValue = true
          if case .suggestion(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.type = .suggestion(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.type {
    case .points?: try {
      guard case .points(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .suggestion?: try {
      guard case .suggestion(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GeneratePodcastRequestProto, rhs: GeneratePodcastRequestProto) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GeneratePodcastFromPointsProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "GeneratePodcastFromPointsProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "podcast_id"),
    2: .standard(proto: "point_ids"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.podcastID) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.pointIds) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.podcastID.isEmpty {
      try visitor.visitSingularStringField(value: self.podcastID, fieldNumber: 1)
    }
    if !self.pointIds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.pointIds, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GeneratePodcastFromPointsProto, rhs: GeneratePodcastFromPointsProto) -> Bool {
    if lhs.podcastID != rhs.podcastID {return false}
    if lhs.pointIds != rhs.pointIds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GeneratePodcastFromSuggestionProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "GeneratePodcastFromSuggestionProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "podcast_id"),
    2: .standard(proto: "point_ids"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.podcastID) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.pointIds) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.podcastID.isEmpty {
      try visitor.visitSingularStringField(value: self.podcastID, fieldNumber: 1)
    }
    if !self.pointIds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.pointIds, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GeneratePodcastFromSuggestionProto, rhs: GeneratePodcastFromSuggestionProto) -> Bool {
    if lhs.podcastID != rhs.podcastID {return false}
    if lhs.pointIds != rhs.pointIds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GeneratePodcastResponseHeaderProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "GeneratePodcastResponseHeaderProto"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GeneratePodcastResponseHeaderProto, rhs: GeneratePodcastResponseHeaderProto) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GeneratePodcastResponseDeltaProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "GeneratePodcastResponseDeltaProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "card"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: PodcastCardProto?
        var hadOneofValue = false
        if let current = self.type {
          hadOneofValue = true
          if case .card(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.type = .card(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if case .card(let v)? = self.type {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GeneratePodcastResponseDeltaProto, rhs: GeneratePodcastResponseDeltaProto) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GetPodcastRequestProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "GetPodcastRequestProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "podcast_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.podcastID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.podcastID.isEmpty {
      try visitor.visitSingularStringField(value: self.podcastID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GetPodcastRequestProto, rhs: GetPodcastRequestProto) -> Bool {
    if lhs.podcastID != rhs.podcastID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GetPodcastResponseHeaderProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "GetPodcastResponseHeaderProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "podcast"),
    2: .same(proto: "cards"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._podcast) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._cards) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._podcast {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._cards {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GetPodcastResponseHeaderProto, rhs: GetPodcastResponseHeaderProto) -> Bool {
    if lhs._podcast != rhs._podcast {return false}
    if lhs._cards != rhs._cards {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GetPodcastResponseDeltaProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "GetPodcastResponseDeltaProto"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GetPodcastResponseDeltaProto, rhs: GetPodcastResponseDeltaProto) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GetPodcastStoryRequestProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "GetPodcastStoryRequestProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "story_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.storyID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.storyID.isEmpty {
      try visitor.visitSingularStringField(value: self.storyID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GetPodcastStoryRequestProto, rhs: GetPodcastStoryRequestProto) -> Bool {
    if lhs.storyID != rhs.storyID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GetPodcastStoryResponseHeaderProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "GetPodcastStoryResponseHeaderProto"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GetPodcastStoryResponseHeaderProto, rhs: GetPodcastStoryResponseHeaderProto) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GetPodcastStoryResponseDeltaProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "GetPodcastStoryResponseDeltaProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .same(proto: "slide"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: PodcastStoryHeaderProto?
        var hadOneofValue = false
        if let current = self.type {
          hadOneofValue = true
          if case .header(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.type = .header(v)
        }
      }()
      case 2: try {
        var v: PodcastStorySlideProto?
        var hadOneofValue = false
        if let current = self.type {
          hadOneofValue = true
          if case .slide(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.type = .slide(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.type {
    case .header?: try {
      guard case .header(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .slide?: try {
      guard case .slide(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GetPodcastStoryResponseDeltaProto, rhs: GetPodcastStoryResponseDeltaProto) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GetPodcastSuggestionPointsProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "GetPodcastSuggestionPointsProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "podcast_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.podcastID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.podcastID.isEmpty {
      try visitor.visitSingularStringField(value: self.podcastID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GetPodcastSuggestionPointsProto, rhs: GetPodcastSuggestionPointsProto) -> Bool {
    if lhs.podcastID != rhs.podcastID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GetPodcastSuggestionPointsResponseHeaderProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "GetPodcastSuggestionPointsResponseHeaderProto"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GetPodcastSuggestionPointsResponseHeaderProto, rhs: GetPodcastSuggestionPointsResponseHeaderProto) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GetPodcastSuggestionPointsResponseDeltaProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "GetPodcastSuggestionPointsResponseDeltaProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "point"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: PodcastPointProto?
        var hadOneofValue = false
        if let current = self.type {
          hadOneofValue = true
          if case .point(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.type = .point(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if case .point(let v)? = self.type {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GetPodcastSuggestionPointsResponseDeltaProto, rhs: GetPodcastSuggestionPointsResponseDeltaProto) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GetPodcastHomeRequestProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "GetPodcastHomeRequestProto"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GetPodcastHomeRequestProto, rhs: GetPodcastHomeRequestProto) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GetPodcastHomeResponseHeaderProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "GetPodcastHomeResponseHeaderProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "subscription_status"),
    2: .standard(proto: "firestore_suggestions_path"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._subscriptionStatus) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.firestoreSuggestionsPath) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._subscriptionStatus {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.firestoreSuggestionsPath.isEmpty {
      try visitor.visitSingularStringField(value: self.firestoreSuggestionsPath, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GetPodcastHomeResponseHeaderProto, rhs: GetPodcastHomeResponseHeaderProto) -> Bool {
    if lhs._subscriptionStatus != rhs._subscriptionStatus {return false}
    if lhs.firestoreSuggestionsPath != rhs.firestoreSuggestionsPath {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GetPodcastHomeResponseDeltaProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "GetPodcastHomeResponseDeltaProto"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GetPodcastHomeResponseDeltaProto, rhs: GetPodcastHomeResponseDeltaProto) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DeleteAccountRequestProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "DeleteAccountRequestProto"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: DeleteAccountRequestProto, rhs: DeleteAccountRequestProto) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DeleteAccountResponseHeaderProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "DeleteAccountResponseHeaderProto"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: DeleteAccountResponseHeaderProto, rhs: DeleteAccountResponseHeaderProto) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DeleteAccountResponseDeltaProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "DeleteAccountResponseDeltaProto"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: DeleteAccountResponseDeltaProto, rhs: DeleteAccountResponseDeltaProto) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PodcastProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PodcastProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "updated_at"),
    2: .same(proto: "thumbnail"),
    3: .same(proto: "audio"),
    4: .same(proto: "visuals"),
    5: .same(proto: "transcript"),
    6: .same(proto: "cards"),
    7: .standard(proto: "key_points"),
    8: .same(proto: "followups"),
  ]

  fileprivate class _StorageClass {
    var _updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _thumbnail: PodcastThumbnailProto? = nil
    var _audio: PodcastAudioProto? = nil
    var _visuals: PodcastVisualsProto? = nil
    var _transcript: PodcastTranscriptProto? = nil
    var _cards: PodcastCardsProto? = nil
    var _keyPoints: PodcastKeyPointsProto? = nil
    var _followups: PodcastFollowupsProto? = nil

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _updatedAt = source._updatedAt
      _thumbnail = source._thumbnail
      _audio = source._audio
      _visuals = source._visuals
      _transcript = source._transcript
      _cards = source._cards
      _keyPoints = source._keyPoints
      _followups = source._followups
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._updatedAt) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._thumbnail) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._audio) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._visuals) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._transcript) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._cards) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._keyPoints) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._followups) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._updatedAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._thumbnail {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._audio {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._visuals {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._transcript {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._cards {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._keyPoints {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._followups {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PodcastProto, rhs: PodcastProto) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._updatedAt != rhs_storage._updatedAt {return false}
        if _storage._thumbnail != rhs_storage._thumbnail {return false}
        if _storage._audio != rhs_storage._audio {return false}
        if _storage._visuals != rhs_storage._visuals {return false}
        if _storage._transcript != rhs_storage._transcript {return false}
        if _storage._cards != rhs_storage._cards {return false}
        if _storage._keyPoints != rhs_storage._keyPoints {return false}
        if _storage._followups != rhs_storage._followups {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension FirestorePodcastSuggestionsProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "FirestorePodcastSuggestionsProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "updated_at"),
    2: .standard(proto: "your_podcasts_shelf"),
    3: .same(proto: "suggestions"),
    4: .standard(proto: "generation_state"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._updatedAt) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._yourPodcastsShelf) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._suggestions) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._generationState) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._updatedAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._yourPodcastsShelf {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._suggestions {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._generationState {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: FirestorePodcastSuggestionsProto, rhs: FirestorePodcastSuggestionsProto) -> Bool {
    if lhs._updatedAt != rhs._updatedAt {return false}
    if lhs._yourPodcastsShelf != rhs._yourPodcastsShelf {return false}
    if lhs._suggestions != rhs._suggestions {return false}
    if lhs._generationState != rhs._generationState {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension YourPodcastsShelfProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "YourPodcastsShelfProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "thumbnails"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,PodcastThumbnailProto>.self, value: &self.thumbnails) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.thumbnails.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,PodcastThumbnailProto>.self, value: self.thumbnails, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: YourPodcastsShelfProto, rhs: YourPodcastsShelfProto) -> Bool {
    if lhs.thumbnails != rhs.thumbnails {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PodcastPointProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PodcastPointProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "point_id"),
    2: .same(proto: "title"),
    3: .standard(proto: "title_emoji"),
    4: .same(proto: "outline"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.pointID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.titleEmoji) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.outline) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.pointID.isEmpty {
      try visitor.visitSingularStringField(value: self.pointID, fieldNumber: 1)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 2)
    }
    if !self.titleEmoji.isEmpty {
      try visitor.visitSingularStringField(value: self.titleEmoji, fieldNumber: 3)
    }
    if !self.outline.isEmpty {
      try visitor.visitSingularStringField(value: self.outline, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PodcastPointProto, rhs: PodcastPointProto) -> Bool {
    if lhs.pointID != rhs.pointID {return false}
    if lhs.title != rhs.title {return false}
    if lhs.titleEmoji != rhs.titleEmoji {return false}
    if lhs.outline != rhs.outline {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PodcastThumbnailProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PodcastThumbnailProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "podcast_id"),
    2: .same(proto: "status"),
    3: .standard(proto: "display_status"),
    4: .same(proto: "title"),
    9: .standard(proto: "long_title"),
    5: .same(proto: "badge"),
    6: .same(proto: "path"),
    7: .same(proto: "duration"),
    8: .standard(proto: "updated_at"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.podcastID) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.status) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.displayStatus) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.badge) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.path) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._duration) }()
      case 8: try { try decoder.decodeSingularMessageField(value: &self._updatedAt) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.longTitle) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.podcastID.isEmpty {
      try visitor.visitSingularStringField(value: self.podcastID, fieldNumber: 1)
    }
    if self.status != .undefined {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 2)
    }
    if !self.displayStatus.isEmpty {
      try visitor.visitSingularStringField(value: self.displayStatus, fieldNumber: 3)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 4)
    }
    if !self.badge.isEmpty {
      try visitor.visitSingularStringField(value: self.badge, fieldNumber: 5)
    }
    if !self.path.isEmpty {
      try visitor.visitSingularStringField(value: self.path, fieldNumber: 6)
    }
    try { if let v = self._duration {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    } }()
    try { if let v = self._updatedAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    } }()
    if !self.longTitle.isEmpty {
      try visitor.visitSingularStringField(value: self.longTitle, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PodcastThumbnailProto, rhs: PodcastThumbnailProto) -> Bool {
    if lhs.podcastID != rhs.podcastID {return false}
    if lhs.status != rhs.status {return false}
    if lhs.displayStatus != rhs.displayStatus {return false}
    if lhs.title != rhs.title {return false}
    if lhs.longTitle != rhs.longTitle {return false}
    if lhs.badge != rhs.badge {return false}
    if lhs.path != rhs.path {return false}
    if lhs._duration != rhs._duration {return false}
    if lhs._updatedAt != rhs._updatedAt {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PodcastAudioProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PodcastAudioProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "path"),
    2: .same(proto: "duration"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.path) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._duration) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.path.isEmpty {
      try visitor.visitSingularStringField(value: self.path, fieldNumber: 1)
    }
    try { if let v = self._duration {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PodcastAudioProto, rhs: PodcastAudioProto) -> Bool {
    if lhs.path != rhs.path {return false}
    if lhs._duration != rhs._duration {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PodcastCardsProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PodcastCardsProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "is_ready"),
    2: .same(proto: "cards"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.isReady) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.cards) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.isReady != false {
      try visitor.visitSingularBoolField(value: self.isReady, fieldNumber: 1)
    }
    if !self.cards.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.cards, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PodcastCardsProto, rhs: PodcastCardsProto) -> Bool {
    if lhs.isReady != rhs.isReady {return false}
    if lhs.cards != rhs.cards {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PodcastCardProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PodcastCardProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "card_id"),
    2: .standard(proto: "is_ready"),
    10: .same(proto: "knowledge"),
    11: .standard(proto: "multiple_choice"),
    12: .same(proto: "poll"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.cardID) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.isReady) }()
      case 10: try {
        var v: PodcastKnowledgeCardProto?
        var hadOneofValue = false
        if let current = self.type {
          hadOneofValue = true
          if case .knowledge(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.type = .knowledge(v)
        }
      }()
      case 11: try {
        var v: PodcastMultipleChoiceCardProto?
        var hadOneofValue = false
        if let current = self.type {
          hadOneofValue = true
          if case .multipleChoice(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.type = .multipleChoice(v)
        }
      }()
      case 12: try {
        var v: PodcastPollCardProto?
        var hadOneofValue = false
        if let current = self.type {
          hadOneofValue = true
          if case .poll(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.type = .poll(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.cardID.isEmpty {
      try visitor.visitSingularStringField(value: self.cardID, fieldNumber: 1)
    }
    if self.isReady != false {
      try visitor.visitSingularBoolField(value: self.isReady, fieldNumber: 2)
    }
    switch self.type {
    case .knowledge?: try {
      guard case .knowledge(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    }()
    case .multipleChoice?: try {
      guard case .multipleChoice(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    }()
    case .poll?: try {
      guard case .poll(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PodcastCardProto, rhs: PodcastCardProto) -> Bool {
    if lhs.cardID != rhs.cardID {return false}
    if lhs.isReady != rhs.isReady {return false}
    if lhs.type != rhs.type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PodcastErrorProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PodcastErrorProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "message"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.message) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PodcastErrorProto, rhs: PodcastErrorProto) -> Bool {
    if lhs.message != rhs.message {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PodcastPromptAnswerProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PodcastPromptAnswerProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "text"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.text) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.text.isEmpty {
      try visitor.visitSingularStringField(value: self.text, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PodcastPromptAnswerProto, rhs: PodcastPromptAnswerProto) -> Bool {
    if lhs.text != rhs.text {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PodcastVisualsProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PodcastVisualsProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "visuals"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.visuals) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.visuals.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.visuals, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PodcastVisualsProto, rhs: PodcastVisualsProto) -> Bool {
    if lhs.visuals != rhs.visuals {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PodcastVisualProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PodcastVisualProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "timestamp_millis"),
    2: .standard(proto: "image_path"),
    4: .same(proto: "animation"),
    3: .same(proto: "transition"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.timestampMillis) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.imagePath) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.transition) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._animation) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.timestampMillis != 0 {
      try visitor.visitSingularInt32Field(value: self.timestampMillis, fieldNumber: 1)
    }
    if !self.imagePath.isEmpty {
      try visitor.visitSingularStringField(value: self.imagePath, fieldNumber: 2)
    }
    if self.transition != .undefined {
      try visitor.visitSingularEnumField(value: self.transition, fieldNumber: 3)
    }
    try { if let v = self._animation {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PodcastVisualProto, rhs: PodcastVisualProto) -> Bool {
    if lhs.timestampMillis != rhs.timestampMillis {return false}
    if lhs.imagePath != rhs.imagePath {return false}
    if lhs._animation != rhs._animation {return false}
    if lhs.transition != rhs.transition {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PodcastVisualAnimationProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PodcastVisualAnimationProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "duration_millis"),
    2: .standard(proto: "start_scale"),
    3: .standard(proto: "end_scale"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.durationMillis) }()
      case 2: try { try decoder.decodeSingularFloatField(value: &self.startScale) }()
      case 3: try { try decoder.decodeSingularFloatField(value: &self.endScale) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.durationMillis != 0 {
      try visitor.visitSingularInt32Field(value: self.durationMillis, fieldNumber: 1)
    }
    if self.startScale.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.startScale, fieldNumber: 2)
    }
    if self.endScale.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.endScale, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PodcastVisualAnimationProto, rhs: PodcastVisualAnimationProto) -> Bool {
    if lhs.durationMillis != rhs.durationMillis {return false}
    if lhs.startScale != rhs.startScale {return false}
    if lhs.endScale != rhs.endScale {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PodcastTranscriptProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PodcastTranscriptProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "entries"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.entries) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.entries.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.entries, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PodcastTranscriptProto, rhs: PodcastTranscriptProto) -> Bool {
    if lhs.entries != rhs.entries {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PodcastTranscriptEntryProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PodcastTranscriptEntryProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "host"),
    2: .same(proto: "words"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.host) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.words) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.host != .unknown {
      try visitor.visitSingularEnumField(value: self.host, fieldNumber: 1)
    }
    if !self.words.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.words, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PodcastTranscriptEntryProto, rhs: PodcastTranscriptEntryProto) -> Bool {
    if lhs.host != rhs.host {return false}
    if lhs.words != rhs.words {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PodcastWordProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PodcastWordProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "word"),
    2: .standard(proto: "start_millis"),
    3: .standard(proto: "end_millis"),
    4: .same(proto: "separator"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.word) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.startMillis) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.endMillis) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.separator) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.word.isEmpty {
      try visitor.visitSingularStringField(value: self.word, fieldNumber: 1)
    }
    if self.startMillis != 0 {
      try visitor.visitSingularInt32Field(value: self.startMillis, fieldNumber: 2)
    }
    if self.endMillis != 0 {
      try visitor.visitSingularInt32Field(value: self.endMillis, fieldNumber: 3)
    }
    if !self.separator.isEmpty {
      try visitor.visitSingularStringField(value: self.separator, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PodcastWordProto, rhs: PodcastWordProto) -> Bool {
    if lhs.word != rhs.word {return false}
    if lhs.startMillis != rhs.startMillis {return false}
    if lhs.endMillis != rhs.endMillis {return false}
    if lhs.separator != rhs.separator {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PodcastKnowledgeCardProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PodcastKnowledgeCardProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "hero"),
    3: .same(proto: "text"),
    4: .same(proto: "explanation"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._hero) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.text) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.explanation) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    try { if let v = self._hero {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.text.isEmpty {
      try visitor.visitSingularStringField(value: self.text, fieldNumber: 3)
    }
    if !self.explanation.isEmpty {
      try visitor.visitSingularStringField(value: self.explanation, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PodcastKnowledgeCardProto, rhs: PodcastKnowledgeCardProto) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs._hero != rhs._hero {return false}
    if lhs.text != rhs.text {return false}
    if lhs.explanation != rhs.explanation {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PodcastMultipleChoiceCardProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PodcastMultipleChoiceCardProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "hero"),
    3: .same(proto: "question"),
    4: .same(proto: "options"),
    5: .standard(proto: "correct_answer_number"),
    6: .same(proto: "hints"),
    7: .same(proto: "explanation"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._hero) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.question) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.options) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self.correctAnswerNumber) }()
      case 6: try { try decoder.decodeRepeatedStringField(value: &self.hints) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.explanation) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    try { if let v = self._hero {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.question.isEmpty {
      try visitor.visitSingularStringField(value: self.question, fieldNumber: 3)
    }
    if !self.options.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.options, fieldNumber: 4)
    }
    if self.correctAnswerNumber != 0 {
      try visitor.visitSingularInt32Field(value: self.correctAnswerNumber, fieldNumber: 5)
    }
    if !self.hints.isEmpty {
      try visitor.visitRepeatedStringField(value: self.hints, fieldNumber: 6)
    }
    if !self.explanation.isEmpty {
      try visitor.visitSingularStringField(value: self.explanation, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PodcastMultipleChoiceCardProto, rhs: PodcastMultipleChoiceCardProto) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs._hero != rhs._hero {return false}
    if lhs.question != rhs.question {return false}
    if lhs.options != rhs.options {return false}
    if lhs.correctAnswerNumber != rhs.correctAnswerNumber {return false}
    if lhs.hints != rhs.hints {return false}
    if lhs.explanation != rhs.explanation {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PodcastPollCardProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PodcastPollCardProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "hero"),
    3: .same(proto: "question"),
    4: .same(proto: "options"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._hero) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.question) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.options) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    try { if let v = self._hero {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.question.isEmpty {
      try visitor.visitSingularStringField(value: self.question, fieldNumber: 3)
    }
    if !self.options.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.options, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PodcastPollCardProto, rhs: PodcastPollCardProto) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs._hero != rhs._hero {return false}
    if lhs.question != rhs.question {return false}
    if lhs.options != rhs.options {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PodcastCardHeroProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PodcastCardHeroProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "emoji"),
    2: .standard(proto: "lottie_url"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.emoji) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.lottieURL) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.emoji.isEmpty {
      try visitor.visitSingularStringField(value: self.emoji, fieldNumber: 1)
    }
    if !self.lottieURL.isEmpty {
      try visitor.visitSingularStringField(value: self.lottieURL, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PodcastCardHeroProto, rhs: PodcastCardHeroProto) -> Bool {
    if lhs.emoji != rhs.emoji {return false}
    if lhs.lottieURL != rhs.lottieURL {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PodcastMultipleChoiceOptionProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PodcastMultipleChoiceOptionProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "text"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.text) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.text.isEmpty {
      try visitor.visitSingularStringField(value: self.text, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PodcastMultipleChoiceOptionProto, rhs: PodcastMultipleChoiceOptionProto) -> Bool {
    if lhs.text != rhs.text {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PodcastPollOptionProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PodcastPollOptionProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "text"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.text) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.text.isEmpty {
      try visitor.visitSingularStringField(value: self.text, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PodcastPollOptionProto, rhs: PodcastPollOptionProto) -> Bool {
    if lhs.text != rhs.text {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PodcastKeyPointsProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PodcastKeyPointsProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "label"),
    2: .standard(proto: "key_points"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.label) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.keyPoints) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.label.isEmpty {
      try visitor.visitSingularStringField(value: self.label, fieldNumber: 1)
    }
    if !self.keyPoints.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.keyPoints, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PodcastKeyPointsProto, rhs: PodcastKeyPointsProto) -> Bool {
    if lhs.label != rhs.label {return false}
    if lhs.keyPoints != rhs.keyPoints {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PodcastFollowupsProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PodcastFollowupsProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "label"),
    2: .same(proto: "followups"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.label) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.followups) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.label.isEmpty {
      try visitor.visitSingularStringField(value: self.label, fieldNumber: 1)
    }
    if !self.followups.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.followups, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PodcastFollowupsProto, rhs: PodcastFollowupsProto) -> Bool {
    if lhs.label != rhs.label {return false}
    if lhs.followups != rhs.followups {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PodcastFollowupProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PodcastFollowupProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "followup_id"),
    2: .same(proto: "emoji"),
    3: .same(proto: "outline"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.followupID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.emoji) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.outline) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.followupID.isEmpty {
      try visitor.visitSingularStringField(value: self.followupID, fieldNumber: 1)
    }
    if !self.emoji.isEmpty {
      try visitor.visitSingularStringField(value: self.emoji, fieldNumber: 2)
    }
    if !self.outline.isEmpty {
      try visitor.visitSingularStringField(value: self.outline, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PodcastFollowupProto, rhs: PodcastFollowupProto) -> Bool {
    if lhs.followupID != rhs.followupID {return false}
    if lhs.emoji != rhs.emoji {return false}
    if lhs.outline != rhs.outline {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PodcastKeyPointProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PodcastKeyPointProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "key_point_id"),
    2: .same(proto: "title"),
    3: .standard(proto: "title_emoji"),
    4: .same(proto: "outline"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.keyPointID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.titleEmoji) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.outline) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.keyPointID.isEmpty {
      try visitor.visitSingularStringField(value: self.keyPointID, fieldNumber: 1)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 2)
    }
    if !self.titleEmoji.isEmpty {
      try visitor.visitSingularStringField(value: self.titleEmoji, fieldNumber: 3)
    }
    if !self.outline.isEmpty {
      try visitor.visitSingularStringField(value: self.outline, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PodcastKeyPointProto, rhs: PodcastKeyPointProto) -> Bool {
    if lhs.keyPointID != rhs.keyPointID {return false}
    if lhs.title != rhs.title {return false}
    if lhs.titleEmoji != rhs.titleEmoji {return false}
    if lhs.outline != rhs.outline {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PodcastSuggestionsProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PodcastSuggestionsProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "suggestions_id"),
    2: .standard(proto: "created_at"),
    3: .same(proto: "sections"),
    4: .same(proto: "routine"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.suggestionsID) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._createdAt) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.sections) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._routine) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.suggestionsID.isEmpty {
      try visitor.visitSingularStringField(value: self.suggestionsID, fieldNumber: 1)
    }
    try { if let v = self._createdAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.sections.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.sections, fieldNumber: 3)
    }
    try { if let v = self._routine {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PodcastSuggestionsProto, rhs: PodcastSuggestionsProto) -> Bool {
    if lhs.suggestionsID != rhs.suggestionsID {return false}
    if lhs._createdAt != rhs._createdAt {return false}
    if lhs.sections != rhs.sections {return false}
    if lhs._routine != rhs._routine {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PodcastSuggestionsGenerationStateProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PodcastSuggestionsGenerationStateProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "suggestions_id"),
    2: .standard(proto: "updated_at"),
    3: .same(proto: "state"),
    4: .standard(proto: "display_state"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.suggestionsID) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._updatedAt) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.state) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.displayState) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.suggestionsID.isEmpty {
      try visitor.visitSingularStringField(value: self.suggestionsID, fieldNumber: 1)
    }
    try { if let v = self._updatedAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if self.state != .undefined {
      try visitor.visitSingularEnumField(value: self.state, fieldNumber: 3)
    }
    if !self.displayState.isEmpty {
      try visitor.visitSingularStringField(value: self.displayState, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PodcastSuggestionsGenerationStateProto, rhs: PodcastSuggestionsGenerationStateProto) -> Bool {
    if lhs.suggestionsID != rhs.suggestionsID {return false}
    if lhs._updatedAt != rhs._updatedAt {return false}
    if lhs.state != rhs.state {return false}
    if lhs.displayState != rhs.displayState {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PodcastSuggestionsSectionProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PodcastSuggestionsSectionProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "section_id"),
    2: .standard(proto: "section_title"),
    3: .standard(proto: "banner_suggestion"),
    4: .standard(proto: "footer_suggestion"),
    5: .same(proto: "story1"),
    6: .same(proto: "story2"),
  ]

  fileprivate class _StorageClass {
    var _sectionID: String = String()
    var _sectionTitle: String = String()
    var _bannerSuggestion: PodcastThumbnailProto? = nil
    var _footerSuggestion: PodcastThumbnailProto? = nil
    var _story1: PodcastStoryThumbnailProto? = nil
    var _story2: PodcastStoryThumbnailProto? = nil

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _sectionID = source._sectionID
      _sectionTitle = source._sectionTitle
      _bannerSuggestion = source._bannerSuggestion
      _footerSuggestion = source._footerSuggestion
      _story1 = source._story1
      _story2 = source._story2
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._sectionID) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._sectionTitle) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._bannerSuggestion) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._footerSuggestion) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._story1) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._story2) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._sectionID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._sectionID, fieldNumber: 1)
      }
      if !_storage._sectionTitle.isEmpty {
        try visitor.visitSingularStringField(value: _storage._sectionTitle, fieldNumber: 2)
      }
      try { if let v = _storage._bannerSuggestion {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._footerSuggestion {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._story1 {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._story2 {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PodcastSuggestionsSectionProto, rhs: PodcastSuggestionsSectionProto) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._sectionID != rhs_storage._sectionID {return false}
        if _storage._sectionTitle != rhs_storage._sectionTitle {return false}
        if _storage._bannerSuggestion != rhs_storage._bannerSuggestion {return false}
        if _storage._footerSuggestion != rhs_storage._footerSuggestion {return false}
        if _storage._story1 != rhs_storage._story1 {return false}
        if _storage._story2 != rhs_storage._story2 {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PodcastStoryThumbnailProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PodcastStoryThumbnailProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "story_id"),
    2: .same(proto: "title"),
    3: .standard(proto: "thumbnail_path"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.storyID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.thumbnailPath) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.storyID.isEmpty {
      try visitor.visitSingularStringField(value: self.storyID, fieldNumber: 1)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 2)
    }
    if !self.thumbnailPath.isEmpty {
      try visitor.visitSingularStringField(value: self.thumbnailPath, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PodcastStoryThumbnailProto, rhs: PodcastStoryThumbnailProto) -> Bool {
    if lhs.storyID != rhs.storyID {return false}
    if lhs.title != rhs.title {return false}
    if lhs.thumbnailPath != rhs.thumbnailPath {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PodcastStoryHeaderProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PodcastStoryHeaderProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "badge"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.badge) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.badge.isEmpty {
      try visitor.visitSingularStringField(value: self.badge, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PodcastStoryHeaderProto, rhs: PodcastStoryHeaderProto) -> Bool {
    if lhs.badge != rhs.badge {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PodcastStorySlideProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PodcastStorySlideProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "slide_id"),
    2: .standard(proto: "is_text_ready"),
    3: .same(proto: "title"),
    4: .standard(proto: "image_path"),
    5: .same(proto: "text"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.slideID) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.isTextReady) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.imagePath) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.text) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.slideID.isEmpty {
      try visitor.visitSingularStringField(value: self.slideID, fieldNumber: 1)
    }
    if self.isTextReady != false {
      try visitor.visitSingularBoolField(value: self.isTextReady, fieldNumber: 2)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 3)
    }
    if !self.imagePath.isEmpty {
      try visitor.visitSingularStringField(value: self.imagePath, fieldNumber: 4)
    }
    if !self.text.isEmpty {
      try visitor.visitSingularStringField(value: self.text, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PodcastStorySlideProto, rhs: PodcastStorySlideProto) -> Bool {
    if lhs.slideID != rhs.slideID {return false}
    if lhs.isTextReady != rhs.isTextReady {return false}
    if lhs.title != rhs.title {return false}
    if lhs.imagePath != rhs.imagePath {return false}
    if lhs.text != rhs.text {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PodcastRoutineProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PodcastRoutineProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .standard(proto: "routine_id"),
    3: .same(proto: "title"),
    1: .same(proto: "segments"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.segments) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.routineID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.title) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.segments.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.segments, fieldNumber: 1)
    }
    if !self.routineID.isEmpty {
      try visitor.visitSingularStringField(value: self.routineID, fieldNumber: 2)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PodcastRoutineProto, rhs: PodcastRoutineProto) -> Bool {
    if lhs.routineID != rhs.routineID {return false}
    if lhs.title != rhs.title {return false}
    if lhs.segments != rhs.segments {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PodcastRoutineSegmentProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PodcastRoutineSegmentProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "segment_id"),
    2: .same(proto: "title"),
    3: .same(proto: "steps"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.segmentID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.steps) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.segmentID.isEmpty {
      try visitor.visitSingularStringField(value: self.segmentID, fieldNumber: 1)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 2)
    }
    if !self.steps.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.steps, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PodcastRoutineSegmentProto, rhs: PodcastRoutineSegmentProto) -> Bool {
    if lhs.segmentID != rhs.segmentID {return false}
    if lhs.title != rhs.title {return false}
    if lhs.steps != rhs.steps {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PodcastRoutineStepProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PodcastRoutineStepProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    5: .same(proto: "thumbnail"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 5: try { try decoder.decodeSingularMessageField(value: &self._thumbnail) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._thumbnail {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PodcastRoutineStepProto, rhs: PodcastRoutineStepProto) -> Bool {
    if lhs._thumbnail != rhs._thumbnail {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PodcastAppStoreTransactionProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PodcastAppStoreTransactionProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "transaction_jws"),
    2: .standard(proto: "renewal_info_jws"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.transactionJws) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.renewalInfoJws) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.transactionJws.isEmpty {
      try visitor.visitSingularStringField(value: self.transactionJws, fieldNumber: 1)
    }
    if !self.renewalInfoJws.isEmpty {
      try visitor.visitSingularStringField(value: self.renewalInfoJws, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PodcastAppStoreTransactionProto, rhs: PodcastAppStoreTransactionProto) -> Bool {
    if lhs.transactionJws != rhs.transactionJws {return false}
    if lhs.renewalInfoJws != rhs.renewalInfoJws {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PodcastUserProgressProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PodcastUserProgressProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "routine_progress"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,PodcastRoutineProgressProto>.self, value: &self.routineProgress) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.routineProgress.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,PodcastRoutineProgressProto>.self, value: self.routineProgress, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PodcastUserProgressProto, rhs: PodcastUserProgressProto) -> Bool {
    if lhs.routineProgress != rhs.routineProgress {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PodcastRoutineProgressProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PodcastRoutineProgressProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "step_progress"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,PodcastRoutineStepProgressProto>.self, value: &self.stepProgress) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.stepProgress.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,PodcastRoutineStepProgressProto>.self, value: self.stepProgress, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PodcastRoutineProgressProto, rhs: PodcastRoutineProgressProto) -> Bool {
    if lhs.stepProgress != rhs.stepProgress {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PodcastRoutineStepProgressProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PodcastRoutineStepProgressProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "completed_at"),
    2: .same(proto: "completed"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._completedAt) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.completed) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._completedAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.completed != false {
      try visitor.visitSingularBoolField(value: self.completed, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PodcastRoutineStepProgressProto, rhs: PodcastRoutineStepProgressProto) -> Bool {
    if lhs._completedAt != rhs._completedAt {return false}
    if lhs.completed != rhs.completed {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
