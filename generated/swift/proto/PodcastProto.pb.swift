// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: PodcastProto.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum PodcastStatusProto: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case undefined // = 0
  case generating // = 1
  case ready // = 2
  case failed // = 3
  case UNRECOGNIZED(Int)

  init() {
    self = .undefined
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .undefined
    case 1: self = .generating
    case 2: self = .ready
    case 3: self = .failed
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .undefined: return 0
    case .generating: return 1
    case .ready: return 2
    case .failed: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension PodcastStatusProto: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [PodcastStatusProto] = [
    .undefined,
    .generating,
    .ready,
    .failed,
  ]
}

#endif  // swift(>=4.2)

enum PodcastVisualTransitionProto: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case undefined // = 0
  case dissolve // = 1
  case swipe // = 2
  case barSwipe // = 3
  case pageCurl // = 4
  case UNRECOGNIZED(Int)

  init() {
    self = .undefined
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .undefined
    case 1: self = .dissolve
    case 2: self = .swipe
    case 3: self = .barSwipe
    case 4: self = .pageCurl
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .undefined: return 0
    case .dissolve: return 1
    case .swipe: return 2
    case .barSwipe: return 3
    case .pageCurl: return 4
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension PodcastVisualTransitionProto: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [PodcastVisualTransitionProto] = [
    .undefined,
    .dissolve,
    .swipe,
    .barSwipe,
    .pageCurl,
  ]
}

#endif  // swift(>=4.2)

enum PodcastHostProto: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case unknown // = 0
  case male // = 1
  case female // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .unknown
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .male
    case 2: self = .female
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .male: return 1
    case .female: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension PodcastHostProto: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [PodcastHostProto] = [
    .unknown,
    .male,
    .female,
  ]
}

#endif  // swift(>=4.2)

struct PodcastStreamApiRequestProto {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var encodedUserAuth: String = String()

  var request: PodcastStreamApiRequestProto.OneOf_Request? = nil

  var create: CreatePodcastRequestProto {
    get {
      if case .create(let v)? = request {return v}
      return CreatePodcastRequestProto()
    }
    set {request = .create(newValue)}
  }

  var generate: GeneratePodcastRequestProto {
    get {
      if case .generate(let v)? = request {return v}
      return GeneratePodcastRequestProto()
    }
    set {request = .generate(newValue)}
  }

  var get: GetPodcastRequestProto {
    get {
      if case .get(let v)? = request {return v}
      return GetPodcastRequestProto()
    }
    set {request = .get(newValue)}
  }

  var suggestions: GetPodcastSuggestionsRequestProto {
    get {
      if case .suggestions(let v)? = request {return v}
      return GetPodcastSuggestionsRequestProto()
    }
    set {request = .suggestions(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Request: Equatable {
    case create(CreatePodcastRequestProto)
    case generate(GeneratePodcastRequestProto)
    case get(GetPodcastRequestProto)
    case suggestions(GetPodcastSuggestionsRequestProto)

  #if !swift(>=4.1)
    static func ==(lhs: PodcastStreamApiRequestProto.OneOf_Request, rhs: PodcastStreamApiRequestProto.OneOf_Request) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.create, .create): return {
        guard case .create(let l) = lhs, case .create(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.generate, .generate): return {
        guard case .generate(let l) = lhs, case .generate(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.get, .get): return {
        guard case .get(let l) = lhs, case .get(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.suggestions, .suggestions): return {
        guard case .suggestions(let l) = lhs, case .suggestions(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  init() {}
}

struct PodcastStreamApiResponseHeaderProto {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// If present the token was refreshed and the client should use this new one
  /// from now onwards.
  var refreshedEncodedUserAuth: String = String()

  var header: PodcastStreamApiResponseHeaderProto.OneOf_Header? = nil

  var createHeader: CreatePodcastResponseHeaderProto {
    get {
      if case .createHeader(let v)? = header {return v}
      return CreatePodcastResponseHeaderProto()
    }
    set {header = .createHeader(newValue)}
  }

  var generate: GeneratePodcastResponseHeaderProto {
    get {
      if case .generate(let v)? = header {return v}
      return GeneratePodcastResponseHeaderProto()
    }
    set {header = .generate(newValue)}
  }

  var get: GetPodcastResponseHeaderProto {
    get {
      if case .get(let v)? = header {return v}
      return GetPodcastResponseHeaderProto()
    }
    set {header = .get(newValue)}
  }

  var suggestions: GetPodcastSuggestionsResponseHeaderProto {
    get {
      if case .suggestions(let v)? = header {return v}
      return GetPodcastSuggestionsResponseHeaderProto()
    }
    set {header = .suggestions(newValue)}
  }

  var latencies: Dictionary<String,SwiftProtobuf.Google_Protobuf_Duration> = [:]

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Header: Equatable {
    case createHeader(CreatePodcastResponseHeaderProto)
    case generate(GeneratePodcastResponseHeaderProto)
    case get(GetPodcastResponseHeaderProto)
    case suggestions(GetPodcastSuggestionsResponseHeaderProto)

  #if !swift(>=4.1)
    static func ==(lhs: PodcastStreamApiResponseHeaderProto.OneOf_Header, rhs: PodcastStreamApiResponseHeaderProto.OneOf_Header) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.createHeader, .createHeader): return {
        guard case .createHeader(let l) = lhs, case .createHeader(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.generate, .generate): return {
        guard case .generate(let l) = lhs, case .generate(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.get, .get): return {
        guard case .get(let l) = lhs, case .get(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.suggestions, .suggestions): return {
        guard case .suggestions(let l) = lhs, case .suggestions(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  init() {}
}

struct PodcastStreamApiResponseDeltaProto {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var responseDelta: PodcastStreamApiResponseDeltaProto.OneOf_ResponseDelta? = nil

  var createDelta: CreatePodcastResponseDeltaProto {
    get {
      if case .createDelta(let v)? = responseDelta {return v}
      return CreatePodcastResponseDeltaProto()
    }
    set {responseDelta = .createDelta(newValue)}
  }

  var generateDelta: GeneratePodcastResponseDeltaProto {
    get {
      if case .generateDelta(let v)? = responseDelta {return v}
      return GeneratePodcastResponseDeltaProto()
    }
    set {responseDelta = .generateDelta(newValue)}
  }

  var getDelta: GetPodcastResponseDeltaProto {
    get {
      if case .getDelta(let v)? = responseDelta {return v}
      return GetPodcastResponseDeltaProto()
    }
    set {responseDelta = .getDelta(newValue)}
  }

  var suggestionsDelta: GetPodcastSuggestionsResponseDeltaProto {
    get {
      if case .suggestionsDelta(let v)? = responseDelta {return v}
      return GetPodcastSuggestionsResponseDeltaProto()
    }
    set {responseDelta = .suggestionsDelta(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_ResponseDelta: Equatable {
    case createDelta(CreatePodcastResponseDeltaProto)
    case generateDelta(GeneratePodcastResponseDeltaProto)
    case getDelta(GetPodcastResponseDeltaProto)
    case suggestionsDelta(GetPodcastSuggestionsResponseDeltaProto)

  #if !swift(>=4.1)
    static func ==(lhs: PodcastStreamApiResponseDeltaProto.OneOf_ResponseDelta, rhs: PodcastStreamApiResponseDeltaProto.OneOf_ResponseDelta) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.createDelta, .createDelta): return {
        guard case .createDelta(let l) = lhs, case .createDelta(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.generateDelta, .generateDelta): return {
        guard case .generateDelta(let l) = lhs, case .generateDelta(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.getDelta, .getDelta): return {
        guard case .getDelta(let l) = lhs, case .getDelta(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.suggestionsDelta, .suggestionsDelta): return {
        guard case .suggestionsDelta(let l) = lhs, case .suggestionsDelta(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  init() {}
}

struct CreatePodcastRequestProto {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var prompt: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct CreatePodcastResponseHeaderProto {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var podcastID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct CreatePodcastResponseDeltaProto {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var type: CreatePodcastResponseDeltaProto.OneOf_Type? = nil

  /// This is the last delta message
  var error: PodcastErrorProto {
    get {
      if case .error(let v)? = type {return v}
      return PodcastErrorProto()
    }
    set {type = .error(newValue)}
  }

  var answer: PodcastPromptAnswerProto {
    get {
      if case .answer(let v)? = type {return v}
      return PodcastPromptAnswerProto()
    }
    set {type = .answer(newValue)}
  }

  var point: PodcastPointProto {
    get {
      if case .point(let v)? = type {return v}
      return PodcastPointProto()
    }
    set {type = .point(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Type: Equatable {
    /// This is the last delta message
    case error(PodcastErrorProto)
    case answer(PodcastPromptAnswerProto)
    case point(PodcastPointProto)

  #if !swift(>=4.1)
    static func ==(lhs: CreatePodcastResponseDeltaProto.OneOf_Type, rhs: CreatePodcastResponseDeltaProto.OneOf_Type) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.error, .error): return {
        guard case .error(let l) = lhs, case .error(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.answer, .answer): return {
        guard case .answer(let l) = lhs, case .answer(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.point, .point): return {
        guard case .point(let l) = lhs, case .point(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  init() {}
}

struct GeneratePodcastRequestProto {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var type: GeneratePodcastRequestProto.OneOf_Type? = nil

  var points: GeneratePodcastFromPointsProto {
    get {
      if case .points(let v)? = type {return v}
      return GeneratePodcastFromPointsProto()
    }
    set {type = .points(newValue)}
  }

  var suggestion: GeneratePodcastFromSuggestionProto {
    get {
      if case .suggestion(let v)? = type {return v}
      return GeneratePodcastFromSuggestionProto()
    }
    set {type = .suggestion(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Type: Equatable {
    case points(GeneratePodcastFromPointsProto)
    case suggestion(GeneratePodcastFromSuggestionProto)

  #if !swift(>=4.1)
    static func ==(lhs: GeneratePodcastRequestProto.OneOf_Type, rhs: GeneratePodcastRequestProto.OneOf_Type) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.points, .points): return {
        guard case .points(let l) = lhs, case .points(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.suggestion, .suggestion): return {
        guard case .suggestion(let l) = lhs, case .suggestion(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  init() {}
}

struct GeneratePodcastFromPointsProto {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var podcastID: String = String()

  var pointIds: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GeneratePodcastFromSuggestionProto {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var suggestionsID: String = String()

  var suggestedPodcastID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GeneratePodcastResponseHeaderProto {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GeneratePodcastResponseDeltaProto {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var type: GeneratePodcastResponseDeltaProto.OneOf_Type? = nil

  var card: PodcastCardProto {
    get {
      if case .card(let v)? = type {return v}
      return PodcastCardProto()
    }
    set {type = .card(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Type: Equatable {
    case card(PodcastCardProto)

  #if !swift(>=4.1)
    static func ==(lhs: GeneratePodcastResponseDeltaProto.OneOf_Type, rhs: GeneratePodcastResponseDeltaProto.OneOf_Type) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.card, .card): return {
        guard case .card(let l) = lhs, case .card(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      }
    }
  #endif
  }

  init() {}
}

struct GetPodcastRequestProto {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var podcastID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GetPodcastResponseHeaderProto {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var podcast: PodcastProto {
    get {return _podcast ?? PodcastProto()}
    set {_podcast = newValue}
  }
  /// Returns true if `podcast` has been explicitly set.
  var hasPodcast: Bool {return self._podcast != nil}
  /// Clears the value of `podcast`. Subsequent reads from it will return its default value.
  mutating func clearPodcast() {self._podcast = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _podcast: PodcastProto? = nil
}

struct GetPodcastResponseDeltaProto {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GetPodcastSuggestionsRequestProto {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GetPodcastSuggestionsResponseHeaderProto {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var suggestions: PodcastSuggestionsProto {
    get {return _suggestions ?? PodcastSuggestionsProto()}
    set {_suggestions = newValue}
  }
  /// Returns true if `suggestions` has been explicitly set.
  var hasSuggestions: Bool {return self._suggestions != nil}
  /// Clears the value of `suggestions`. Subsequent reads from it will return its default value.
  mutating func clearSuggestions() {self._suggestions = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _suggestions: PodcastSuggestionsProto? = nil
}

struct GetPodcastSuggestionsResponseDeltaProto {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct PodcastProto {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._updatedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._updatedAt = newValue}
  }
  /// Returns true if `updatedAt` has been explicitly set.
  var hasUpdatedAt: Bool {return _storage._updatedAt != nil}
  /// Clears the value of `updatedAt`. Subsequent reads from it will return its default value.
  mutating func clearUpdatedAt() {_uniqueStorage()._updatedAt = nil}

  var thumbnail: PodcastThumbnailProto {
    get {return _storage._thumbnail ?? PodcastThumbnailProto()}
    set {_uniqueStorage()._thumbnail = newValue}
  }
  /// Returns true if `thumbnail` has been explicitly set.
  var hasThumbnail: Bool {return _storage._thumbnail != nil}
  /// Clears the value of `thumbnail`. Subsequent reads from it will return its default value.
  mutating func clearThumbnail() {_uniqueStorage()._thumbnail = nil}

  var audio: PodcastAudioProto {
    get {return _storage._audio ?? PodcastAudioProto()}
    set {_uniqueStorage()._audio = newValue}
  }
  /// Returns true if `audio` has been explicitly set.
  var hasAudio: Bool {return _storage._audio != nil}
  /// Clears the value of `audio`. Subsequent reads from it will return its default value.
  mutating func clearAudio() {_uniqueStorage()._audio = nil}

  var visuals: PodcastVisualsProto {
    get {return _storage._visuals ?? PodcastVisualsProto()}
    set {_uniqueStorage()._visuals = newValue}
  }
  /// Returns true if `visuals` has been explicitly set.
  var hasVisuals: Bool {return _storage._visuals != nil}
  /// Clears the value of `visuals`. Subsequent reads from it will return its default value.
  mutating func clearVisuals() {_uniqueStorage()._visuals = nil}

  var transcript: PodcastTranscriptProto {
    get {return _storage._transcript ?? PodcastTranscriptProto()}
    set {_uniqueStorage()._transcript = newValue}
  }
  /// Returns true if `transcript` has been explicitly set.
  var hasTranscript: Bool {return _storage._transcript != nil}
  /// Clears the value of `transcript`. Subsequent reads from it will return its default value.
  mutating func clearTranscript() {_uniqueStorage()._transcript = nil}

  var cards: PodcastCardsProto {
    get {return _storage._cards ?? PodcastCardsProto()}
    set {_uniqueStorage()._cards = newValue}
  }
  /// Returns true if `cards` has been explicitly set.
  var hasCards: Bool {return _storage._cards != nil}
  /// Clears the value of `cards`. Subsequent reads from it will return its default value.
  mutating func clearCards() {_uniqueStorage()._cards = nil}

  var keyPoints: PodcastKeyPointsProto {
    get {return _storage._keyPoints ?? PodcastKeyPointsProto()}
    set {_uniqueStorage()._keyPoints = newValue}
  }
  /// Returns true if `keyPoints` has been explicitly set.
  var hasKeyPoints: Bool {return _storage._keyPoints != nil}
  /// Clears the value of `keyPoints`. Subsequent reads from it will return its default value.
  mutating func clearKeyPoints() {_uniqueStorage()._keyPoints = nil}

  var followups: PodcastFollowupsProto {
    get {return _storage._followups ?? PodcastFollowupsProto()}
    set {_uniqueStorage()._followups = newValue}
  }
  /// Returns true if `followups` has been explicitly set.
  var hasFollowups: Bool {return _storage._followups != nil}
  /// Clears the value of `followups`. Subsequent reads from it will return its default value.
  mutating func clearFollowups() {_uniqueStorage()._followups = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct FirestorePodcastProto {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _updatedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_updatedAt = newValue}
  }
  /// Returns true if `updatedAt` has been explicitly set.
  var hasUpdatedAt: Bool {return self._updatedAt != nil}
  /// Clears the value of `updatedAt`. Subsequent reads from it will return its default value.
  mutating func clearUpdatedAt() {self._updatedAt = nil}

  var thumbnail: PodcastThumbnailProto {
    get {return _thumbnail ?? PodcastThumbnailProto()}
    set {_thumbnail = newValue}
  }
  /// Returns true if `thumbnail` has been explicitly set.
  var hasThumbnail: Bool {return self._thumbnail != nil}
  /// Clears the value of `thumbnail`. Subsequent reads from it will return its default value.
  mutating func clearThumbnail() {self._thumbnail = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _thumbnail: PodcastThumbnailProto? = nil
}

struct FirestorePodcastsHomeProto {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _updatedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_updatedAt = newValue}
  }
  /// Returns true if `updatedAt` has been explicitly set.
  var hasUpdatedAt: Bool {return self._updatedAt != nil}
  /// Clears the value of `updatedAt`. Subsequent reads from it will return its default value.
  mutating func clearUpdatedAt() {self._updatedAt = nil}

  var yourPodcastsShelf: YourPodcastsShelfProto {
    get {return _yourPodcastsShelf ?? YourPodcastsShelfProto()}
    set {_yourPodcastsShelf = newValue}
  }
  /// Returns true if `yourPodcastsShelf` has been explicitly set.
  var hasYourPodcastsShelf: Bool {return self._yourPodcastsShelf != nil}
  /// Clears the value of `yourPodcastsShelf`. Subsequent reads from it will return its default value.
  mutating func clearYourPodcastsShelf() {self._yourPodcastsShelf = nil}

  var suggestions: PodcastSuggestionsProto {
    get {return _suggestions ?? PodcastSuggestionsProto()}
    set {_suggestions = newValue}
  }
  /// Returns true if `suggestions` has been explicitly set.
  var hasSuggestions: Bool {return self._suggestions != nil}
  /// Clears the value of `suggestions`. Subsequent reads from it will return its default value.
  mutating func clearSuggestions() {self._suggestions = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _yourPodcastsShelf: YourPodcastsShelfProto? = nil
  fileprivate var _suggestions: PodcastSuggestionsProto? = nil
}

struct YourPodcastsShelfProto {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var thumbnails: [PodcastThumbnailProto] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct PodcastPointProto {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var pointID: String = String()

  var title: String = String()

  var titleEmoji: String = String()

  var outline: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct PodcastThumbnailProto {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var podcastID: String = String()

  var status: PodcastStatusProto = .undefined

  var displayStatus: String = String()

  var title: String = String()

  /// May be empty or Q&A, Debate, ...
  var badge: String = String()

  var path: String = String()

  var duration: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _duration ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_duration = newValue}
  }
  /// Returns true if `duration` has been explicitly set.
  var hasDuration: Bool {return self._duration != nil}
  /// Clears the value of `duration`. Subsequent reads from it will return its default value.
  mutating func clearDuration() {self._duration = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _duration: SwiftProtobuf.Google_Protobuf_Duration? = nil
}

struct PodcastAudioProto {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var path: String = String()

  var duration: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _duration ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_duration = newValue}
  }
  /// Returns true if `duration` has been explicitly set.
  var hasDuration: Bool {return self._duration != nil}
  /// Clears the value of `duration`. Subsequent reads from it will return its default value.
  mutating func clearDuration() {self._duration = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _duration: SwiftProtobuf.Google_Protobuf_Duration? = nil
}

struct PodcastCardsProto {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var isReady: Bool = false

  var cards: [PodcastCardProto] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct PodcastCardProto {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var cardID: String = String()

  var isReady: Bool = false

  /// IDs start at 10
  var type: PodcastCardProto.OneOf_Type? = nil

  var knowledge: PodcastKnowledgeCardProto {
    get {
      if case .knowledge(let v)? = type {return v}
      return PodcastKnowledgeCardProto()
    }
    set {type = .knowledge(newValue)}
  }

  var multipleChoice: PodcastMultipleChoiceCardProto {
    get {
      if case .multipleChoice(let v)? = type {return v}
      return PodcastMultipleChoiceCardProto()
    }
    set {type = .multipleChoice(newValue)}
  }

  var poll: PodcastPollCardProto {
    get {
      if case .poll(let v)? = type {return v}
      return PodcastPollCardProto()
    }
    set {type = .poll(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  /// IDs start at 10
  enum OneOf_Type: Equatable {
    case knowledge(PodcastKnowledgeCardProto)
    case multipleChoice(PodcastMultipleChoiceCardProto)
    case poll(PodcastPollCardProto)

  #if !swift(>=4.1)
    static func ==(lhs: PodcastCardProto.OneOf_Type, rhs: PodcastCardProto.OneOf_Type) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.knowledge, .knowledge): return {
        guard case .knowledge(let l) = lhs, case .knowledge(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.multipleChoice, .multipleChoice): return {
        guard case .multipleChoice(let l) = lhs, case .multipleChoice(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.poll, .poll): return {
        guard case .poll(let l) = lhs, case .poll(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  init() {}
}

struct PodcastErrorProto {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var message: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct PodcastPromptAnswerProto {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var text: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct PodcastVisualsProto {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var visuals: [PodcastVisualProto] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct PodcastVisualProto {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var timestampMillis: Int32 = 0

  var imagePath: String = String()

  var animation: PodcastVisualAnimationProto {
    get {return _animation ?? PodcastVisualAnimationProto()}
    set {_animation = newValue}
  }
  /// Returns true if `animation` has been explicitly set.
  var hasAnimation: Bool {return self._animation != nil}
  /// Clears the value of `animation`. Subsequent reads from it will return its default value.
  mutating func clearAnimation() {self._animation = nil}

  var transition: PodcastVisualTransitionProto = .undefined

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _animation: PodcastVisualAnimationProto? = nil
}

struct PodcastVisualAnimationProto {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var durationMillis: Int32 = 0

  var startScale: Float = 0

  var endScale: Float = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct PodcastTranscriptProto {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var entries: [PodcastTranscriptEntryProto] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct PodcastTranscriptEntryProto {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var host: PodcastHostProto = .unknown

  var words: [PodcastWordProto] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct PodcastWordProto {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var word: String = String()

  var startMillis: Int32 = 0

  var endMillis: Int32 = 0

  var separator: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// No user input assumed
struct PodcastKnowledgeCardProto {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var title: String = String()

  var hero: PodcastCardHeroProto {
    get {return _hero ?? PodcastCardHeroProto()}
    set {_hero = newValue}
  }
  /// Returns true if `hero` has been explicitly set.
  var hasHero: Bool {return self._hero != nil}
  /// Clears the value of `hero`. Subsequent reads from it will return its default value.
  mutating func clearHero() {self._hero = nil}

  var text: String = String()

  var explanation: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _hero: PodcastCardHeroProto? = nil
}

/// 2: True/False, 3: A/B/C or 4: 1/2/3/4 user input
struct PodcastMultipleChoiceCardProto {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var title: String = String()

  var hero: PodcastCardHeroProto {
    get {return _hero ?? PodcastCardHeroProto()}
    set {_hero = newValue}
  }
  /// Returns true if `hero` has been explicitly set.
  var hasHero: Bool {return self._hero != nil}
  /// Clears the value of `hero`. Subsequent reads from it will return its default value.
  mutating func clearHero() {self._hero = nil}

  var question: String = String()

  var options: [PodcastMultipleChoiceOptionProto] = []

  var correctAnswerNumber: Int32 = 0

  /// Number of hints is the number of possible wrong answers.
  var hints: [String] = []

  var explanation: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _hero: PodcastCardHeroProto? = nil
}

/// 2, 3 or 4 options to vote for
struct PodcastPollCardProto {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var title: String = String()

  var hero: PodcastCardHeroProto {
    get {return _hero ?? PodcastCardHeroProto()}
    set {_hero = newValue}
  }
  /// Returns true if `hero` has been explicitly set.
  var hasHero: Bool {return self._hero != nil}
  /// Clears the value of `hero`. Subsequent reads from it will return its default value.
  mutating func clearHero() {self._hero = nil}

  var question: String = String()

  /// commentary
  var options: [PodcastPollOptionProto] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _hero: PodcastCardHeroProto? = nil
}

struct PodcastCardHeroProto {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var emoji: String = String()

  var lottieURL: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct PodcastMultipleChoiceOptionProto {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Could be a label like True/False or a short sentence
  var text: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct PodcastPollOptionProto {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var text: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct PodcastKeyPointsProto {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var label: String = String()

  var keyPoints: [PodcastKeyPointProto] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct PodcastFollowupsProto {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var label: String = String()

  var followups: [PodcastFollowupProto] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct PodcastFollowupProto {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var followupID: String = String()

  var emoji: String = String()

  var outline: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct PodcastKeyPointProto {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var keyPointID: String = String()

  var title: String = String()

  var titleEmoji: String = String()

  var outline: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct PodcastSuggestionsProto {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var suggestionsID: String = String()

  var createdAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _createdAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_createdAt = newValue}
  }
  /// Returns true if `createdAt` has been explicitly set.
  var hasCreatedAt: Bool {return self._createdAt != nil}
  /// Clears the value of `createdAt`. Subsequent reads from it will return its default value.
  mutating func clearCreatedAt() {self._createdAt = nil}

  var sections: [PodcastSuggestionsSectionProto] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _createdAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

struct PodcastSuggestionsSectionProto {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var sectionID: String {
    get {return _storage._sectionID}
    set {_uniqueStorage()._sectionID = newValue}
  }

  var sectionTitle: String {
    get {return _storage._sectionTitle}
    set {_uniqueStorage()._sectionTitle = newValue}
  }

  var bannerSuggestion: PodcastThumbnailProto {
    get {return _storage._bannerSuggestion ?? PodcastThumbnailProto()}
    set {_uniqueStorage()._bannerSuggestion = newValue}
  }
  /// Returns true if `bannerSuggestion` has been explicitly set.
  var hasBannerSuggestion: Bool {return _storage._bannerSuggestion != nil}
  /// Clears the value of `bannerSuggestion`. Subsequent reads from it will return its default value.
  mutating func clearBannerSuggestion() {_uniqueStorage()._bannerSuggestion = nil}

  var footerSuggestion: PodcastThumbnailProto {
    get {return _storage._footerSuggestion ?? PodcastThumbnailProto()}
    set {_uniqueStorage()._footerSuggestion = newValue}
  }
  /// Returns true if `footerSuggestion` has been explicitly set.
  var hasFooterSuggestion: Bool {return _storage._footerSuggestion != nil}
  /// Clears the value of `footerSuggestion`. Subsequent reads from it will return its default value.
  mutating func clearFooterSuggestion() {_uniqueStorage()._footerSuggestion = nil}

  var story1: PodcastStoryProto {
    get {return _storage._story1 ?? PodcastStoryProto()}
    set {_uniqueStorage()._story1 = newValue}
  }
  /// Returns true if `story1` has been explicitly set.
  var hasStory1: Bool {return _storage._story1 != nil}
  /// Clears the value of `story1`. Subsequent reads from it will return its default value.
  mutating func clearStory1() {_uniqueStorage()._story1 = nil}

  var story2: PodcastStoryProto {
    get {return _storage._story2 ?? PodcastStoryProto()}
    set {_uniqueStorage()._story2 = newValue}
  }
  /// Returns true if `story2` has been explicitly set.
  var hasStory2: Bool {return _storage._story2 != nil}
  /// Clears the value of `story2`. Subsequent reads from it will return its default value.
  mutating func clearStory2() {_uniqueStorage()._story2 = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct PodcastStoryProto {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var podcastStoryID: String = String()

  var title: String = String()

  var thumbnailPath: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension PodcastStatusProto: @unchecked Sendable {}
extension PodcastVisualTransitionProto: @unchecked Sendable {}
extension PodcastHostProto: @unchecked Sendable {}
extension PodcastStreamApiRequestProto: @unchecked Sendable {}
extension PodcastStreamApiRequestProto.OneOf_Request: @unchecked Sendable {}
extension PodcastStreamApiResponseHeaderProto: @unchecked Sendable {}
extension PodcastStreamApiResponseHeaderProto.OneOf_Header: @unchecked Sendable {}
extension PodcastStreamApiResponseDeltaProto: @unchecked Sendable {}
extension PodcastStreamApiResponseDeltaProto.OneOf_ResponseDelta: @unchecked Sendable {}
extension CreatePodcastRequestProto: @unchecked Sendable {}
extension CreatePodcastResponseHeaderProto: @unchecked Sendable {}
extension CreatePodcastResponseDeltaProto: @unchecked Sendable {}
extension CreatePodcastResponseDeltaProto.OneOf_Type: @unchecked Sendable {}
extension GeneratePodcastRequestProto: @unchecked Sendable {}
extension GeneratePodcastRequestProto.OneOf_Type: @unchecked Sendable {}
extension GeneratePodcastFromPointsProto: @unchecked Sendable {}
extension GeneratePodcastFromSuggestionProto: @unchecked Sendable {}
extension GeneratePodcastResponseHeaderProto: @unchecked Sendable {}
extension GeneratePodcastResponseDeltaProto: @unchecked Sendable {}
extension GeneratePodcastResponseDeltaProto.OneOf_Type: @unchecked Sendable {}
extension GetPodcastRequestProto: @unchecked Sendable {}
extension GetPodcastResponseHeaderProto: @unchecked Sendable {}
extension GetPodcastResponseDeltaProto: @unchecked Sendable {}
extension GetPodcastSuggestionsRequestProto: @unchecked Sendable {}
extension GetPodcastSuggestionsResponseHeaderProto: @unchecked Sendable {}
extension GetPodcastSuggestionsResponseDeltaProto: @unchecked Sendable {}
extension PodcastProto: @unchecked Sendable {}
extension FirestorePodcastProto: @unchecked Sendable {}
extension FirestorePodcastsHomeProto: @unchecked Sendable {}
extension YourPodcastsShelfProto: @unchecked Sendable {}
extension PodcastPointProto: @unchecked Sendable {}
extension PodcastThumbnailProto: @unchecked Sendable {}
extension PodcastAudioProto: @unchecked Sendable {}
extension PodcastCardsProto: @unchecked Sendable {}
extension PodcastCardProto: @unchecked Sendable {}
extension PodcastCardProto.OneOf_Type: @unchecked Sendable {}
extension PodcastErrorProto: @unchecked Sendable {}
extension PodcastPromptAnswerProto: @unchecked Sendable {}
extension PodcastVisualsProto: @unchecked Sendable {}
extension PodcastVisualProto: @unchecked Sendable {}
extension PodcastVisualAnimationProto: @unchecked Sendable {}
extension PodcastTranscriptProto: @unchecked Sendable {}
extension PodcastTranscriptEntryProto: @unchecked Sendable {}
extension PodcastWordProto: @unchecked Sendable {}
extension PodcastKnowledgeCardProto: @unchecked Sendable {}
extension PodcastMultipleChoiceCardProto: @unchecked Sendable {}
extension PodcastPollCardProto: @unchecked Sendable {}
extension PodcastCardHeroProto: @unchecked Sendable {}
extension PodcastMultipleChoiceOptionProto: @unchecked Sendable {}
extension PodcastPollOptionProto: @unchecked Sendable {}
extension PodcastKeyPointsProto: @unchecked Sendable {}
extension PodcastFollowupsProto: @unchecked Sendable {}
extension PodcastFollowupProto: @unchecked Sendable {}
extension PodcastKeyPointProto: @unchecked Sendable {}
extension PodcastSuggestionsProto: @unchecked Sendable {}
extension PodcastSuggestionsSectionProto: @unchecked Sendable {}
extension PodcastStoryProto: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension PodcastStatusProto: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "PODCAST_STATUS_PROTO_UNDEFINED"),
    1: .same(proto: "PODCAST_STATUS_PROTO_GENERATING"),
    2: .same(proto: "PODCAST_STATUS_PROTO_READY"),
    3: .same(proto: "PODCAST_STATUS_PROTO_FAILED"),
  ]
}

extension PodcastVisualTransitionProto: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "PODCAST_VISUAL_TRANSITION_PROTO_UNDEFINED"),
    1: .same(proto: "PODCAST_VISUAL_TRANSITION_PROTO_DISSOLVE"),
    2: .same(proto: "PODCAST_VISUAL_TRANSITION_PROTO_SWIPE"),
    3: .same(proto: "PODCAST_VISUAL_TRANSITION_PROTO_BAR_SWIPE"),
    4: .same(proto: "PODCAST_VISUAL_TRANSITION_PROTO_PAGE_CURL"),
  ]
}

extension PodcastHostProto: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "PODCAST_HOST_PROTO_UNKNOWN"),
    1: .same(proto: "PODCAST_HOST_PROTO_MALE"),
    2: .same(proto: "PODCAST_HOST_PROTO_FEMALE"),
  ]
}

extension PodcastStreamApiRequestProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PodcastStreamApiRequestProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "encoded_user_auth"),
    2: .same(proto: "create"),
    3: .same(proto: "generate"),
    4: .same(proto: "get"),
    5: .same(proto: "suggestions"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.encodedUserAuth) }()
      case 2: try {
        var v: CreatePodcastRequestProto?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .create(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .create(v)
        }
      }()
      case 3: try {
        var v: GeneratePodcastRequestProto?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .generate(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .generate(v)
        }
      }()
      case 4: try {
        var v: GetPodcastRequestProto?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .get(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .get(v)
        }
      }()
      case 5: try {
        var v: GetPodcastSuggestionsRequestProto?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .suggestions(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .suggestions(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.encodedUserAuth.isEmpty {
      try visitor.visitSingularStringField(value: self.encodedUserAuth, fieldNumber: 1)
    }
    switch self.request {
    case .create?: try {
      guard case .create(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .generate?: try {
      guard case .generate(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .get?: try {
      guard case .get(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case .suggestions?: try {
      guard case .suggestions(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PodcastStreamApiRequestProto, rhs: PodcastStreamApiRequestProto) -> Bool {
    if lhs.encodedUserAuth != rhs.encodedUserAuth {return false}
    if lhs.request != rhs.request {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PodcastStreamApiResponseHeaderProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PodcastStreamApiResponseHeaderProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "refreshed_encoded_user_auth"),
    2: .standard(proto: "create_header"),
    3: .same(proto: "generate"),
    4: .same(proto: "get"),
    5: .same(proto: "suggestions"),
    100: .same(proto: "latencies"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.refreshedEncodedUserAuth) }()
      case 2: try {
        var v: CreatePodcastResponseHeaderProto?
        var hadOneofValue = false
        if let current = self.header {
          hadOneofValue = true
          if case .createHeader(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.header = .createHeader(v)
        }
      }()
      case 3: try {
        var v: GeneratePodcastResponseHeaderProto?
        var hadOneofValue = false
        if let current = self.header {
          hadOneofValue = true
          if case .generate(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.header = .generate(v)
        }
      }()
      case 4: try {
        var v: GetPodcastResponseHeaderProto?
        var hadOneofValue = false
        if let current = self.header {
          hadOneofValue = true
          if case .get(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.header = .get(v)
        }
      }()
      case 5: try {
        var v: GetPodcastSuggestionsResponseHeaderProto?
        var hadOneofValue = false
        if let current = self.header {
          hadOneofValue = true
          if case .suggestions(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.header = .suggestions(v)
        }
      }()
      case 100: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.Google_Protobuf_Duration>.self, value: &self.latencies) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.refreshedEncodedUserAuth.isEmpty {
      try visitor.visitSingularStringField(value: self.refreshedEncodedUserAuth, fieldNumber: 1)
    }
    switch self.header {
    case .createHeader?: try {
      guard case .createHeader(let v)? = self.header else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .generate?: try {
      guard case .generate(let v)? = self.header else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .get?: try {
      guard case .get(let v)? = self.header else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case .suggestions?: try {
      guard case .suggestions(let v)? = self.header else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }()
    case nil: break
    }
    if !self.latencies.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.Google_Protobuf_Duration>.self, value: self.latencies, fieldNumber: 100)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PodcastStreamApiResponseHeaderProto, rhs: PodcastStreamApiResponseHeaderProto) -> Bool {
    if lhs.refreshedEncodedUserAuth != rhs.refreshedEncodedUserAuth {return false}
    if lhs.header != rhs.header {return false}
    if lhs.latencies != rhs.latencies {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PodcastStreamApiResponseDeltaProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PodcastStreamApiResponseDeltaProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "create_delta"),
    2: .standard(proto: "generate_delta"),
    3: .standard(proto: "get_delta"),
    5: .standard(proto: "suggestions_delta"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: CreatePodcastResponseDeltaProto?
        var hadOneofValue = false
        if let current = self.responseDelta {
          hadOneofValue = true
          if case .createDelta(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.responseDelta = .createDelta(v)
        }
      }()
      case 2: try {
        var v: GeneratePodcastResponseDeltaProto?
        var hadOneofValue = false
        if let current = self.responseDelta {
          hadOneofValue = true
          if case .generateDelta(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.responseDelta = .generateDelta(v)
        }
      }()
      case 3: try {
        var v: GetPodcastResponseDeltaProto?
        var hadOneofValue = false
        if let current = self.responseDelta {
          hadOneofValue = true
          if case .getDelta(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.responseDelta = .getDelta(v)
        }
      }()
      case 5: try {
        var v: GetPodcastSuggestionsResponseDeltaProto?
        var hadOneofValue = false
        if let current = self.responseDelta {
          hadOneofValue = true
          if case .suggestionsDelta(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.responseDelta = .suggestionsDelta(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.responseDelta {
    case .createDelta?: try {
      guard case .createDelta(let v)? = self.responseDelta else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .generateDelta?: try {
      guard case .generateDelta(let v)? = self.responseDelta else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .getDelta?: try {
      guard case .getDelta(let v)? = self.responseDelta else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .suggestionsDelta?: try {
      guard case .suggestionsDelta(let v)? = self.responseDelta else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PodcastStreamApiResponseDeltaProto, rhs: PodcastStreamApiResponseDeltaProto) -> Bool {
    if lhs.responseDelta != rhs.responseDelta {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CreatePodcastRequestProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "CreatePodcastRequestProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "prompt"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.prompt) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.prompt.isEmpty {
      try visitor.visitSingularStringField(value: self.prompt, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CreatePodcastRequestProto, rhs: CreatePodcastRequestProto) -> Bool {
    if lhs.prompt != rhs.prompt {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CreatePodcastResponseHeaderProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "CreatePodcastResponseHeaderProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "podcast_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.podcastID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.podcastID.isEmpty {
      try visitor.visitSingularStringField(value: self.podcastID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CreatePodcastResponseHeaderProto, rhs: CreatePodcastResponseHeaderProto) -> Bool {
    if lhs.podcastID != rhs.podcastID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CreatePodcastResponseDeltaProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "CreatePodcastResponseDeltaProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "error"),
    2: .same(proto: "answer"),
    3: .same(proto: "point"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: PodcastErrorProto?
        var hadOneofValue = false
        if let current = self.type {
          hadOneofValue = true
          if case .error(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.type = .error(v)
        }
      }()
      case 2: try {
        var v: PodcastPromptAnswerProto?
        var hadOneofValue = false
        if let current = self.type {
          hadOneofValue = true
          if case .answer(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.type = .answer(v)
        }
      }()
      case 3: try {
        var v: PodcastPointProto?
        var hadOneofValue = false
        if let current = self.type {
          hadOneofValue = true
          if case .point(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.type = .point(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.type {
    case .error?: try {
      guard case .error(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .answer?: try {
      guard case .answer(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .point?: try {
      guard case .point(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CreatePodcastResponseDeltaProto, rhs: CreatePodcastResponseDeltaProto) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GeneratePodcastRequestProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "GeneratePodcastRequestProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "points"),
    2: .same(proto: "suggestion"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: GeneratePodcastFromPointsProto?
        var hadOneofValue = false
        if let current = self.type {
          hadOneofValue = true
          if case .points(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.type = .points(v)
        }
      }()
      case 2: try {
        var v: GeneratePodcastFromSuggestionProto?
        var hadOneofValue = false
        if let current = self.type {
          hadOneofValue = true
          if case .suggestion(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.type = .suggestion(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.type {
    case .points?: try {
      guard case .points(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .suggestion?: try {
      guard case .suggestion(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GeneratePodcastRequestProto, rhs: GeneratePodcastRequestProto) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GeneratePodcastFromPointsProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "GeneratePodcastFromPointsProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "podcast_id"),
    2: .standard(proto: "point_ids"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.podcastID) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.pointIds) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.podcastID.isEmpty {
      try visitor.visitSingularStringField(value: self.podcastID, fieldNumber: 1)
    }
    if !self.pointIds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.pointIds, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GeneratePodcastFromPointsProto, rhs: GeneratePodcastFromPointsProto) -> Bool {
    if lhs.podcastID != rhs.podcastID {return false}
    if lhs.pointIds != rhs.pointIds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GeneratePodcastFromSuggestionProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "GeneratePodcastFromSuggestionProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "suggestions_id"),
    2: .standard(proto: "suggested_podcast_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.suggestionsID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.suggestedPodcastID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.suggestionsID.isEmpty {
      try visitor.visitSingularStringField(value: self.suggestionsID, fieldNumber: 1)
    }
    if !self.suggestedPodcastID.isEmpty {
      try visitor.visitSingularStringField(value: self.suggestedPodcastID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GeneratePodcastFromSuggestionProto, rhs: GeneratePodcastFromSuggestionProto) -> Bool {
    if lhs.suggestionsID != rhs.suggestionsID {return false}
    if lhs.suggestedPodcastID != rhs.suggestedPodcastID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GeneratePodcastResponseHeaderProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "GeneratePodcastResponseHeaderProto"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GeneratePodcastResponseHeaderProto, rhs: GeneratePodcastResponseHeaderProto) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GeneratePodcastResponseDeltaProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "GeneratePodcastResponseDeltaProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "card"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: PodcastCardProto?
        var hadOneofValue = false
        if let current = self.type {
          hadOneofValue = true
          if case .card(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.type = .card(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if case .card(let v)? = self.type {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GeneratePodcastResponseDeltaProto, rhs: GeneratePodcastResponseDeltaProto) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GetPodcastRequestProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "GetPodcastRequestProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "podcast_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.podcastID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.podcastID.isEmpty {
      try visitor.visitSingularStringField(value: self.podcastID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GetPodcastRequestProto, rhs: GetPodcastRequestProto) -> Bool {
    if lhs.podcastID != rhs.podcastID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GetPodcastResponseHeaderProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "GetPodcastResponseHeaderProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "podcast"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._podcast) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._podcast {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GetPodcastResponseHeaderProto, rhs: GetPodcastResponseHeaderProto) -> Bool {
    if lhs._podcast != rhs._podcast {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GetPodcastResponseDeltaProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "GetPodcastResponseDeltaProto"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GetPodcastResponseDeltaProto, rhs: GetPodcastResponseDeltaProto) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GetPodcastSuggestionsRequestProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "GetPodcastSuggestionsRequestProto"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GetPodcastSuggestionsRequestProto, rhs: GetPodcastSuggestionsRequestProto) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GetPodcastSuggestionsResponseHeaderProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "GetPodcastSuggestionsResponseHeaderProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "suggestions"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._suggestions) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._suggestions {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GetPodcastSuggestionsResponseHeaderProto, rhs: GetPodcastSuggestionsResponseHeaderProto) -> Bool {
    if lhs._suggestions != rhs._suggestions {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GetPodcastSuggestionsResponseDeltaProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "GetPodcastSuggestionsResponseDeltaProto"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GetPodcastSuggestionsResponseDeltaProto, rhs: GetPodcastSuggestionsResponseDeltaProto) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PodcastProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PodcastProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "updated_at"),
    2: .same(proto: "thumbnail"),
    3: .same(proto: "audio"),
    4: .same(proto: "visuals"),
    5: .same(proto: "transcript"),
    6: .same(proto: "cards"),
    7: .standard(proto: "key_points"),
    8: .same(proto: "followups"),
  ]

  fileprivate class _StorageClass {
    var _updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _thumbnail: PodcastThumbnailProto? = nil
    var _audio: PodcastAudioProto? = nil
    var _visuals: PodcastVisualsProto? = nil
    var _transcript: PodcastTranscriptProto? = nil
    var _cards: PodcastCardsProto? = nil
    var _keyPoints: PodcastKeyPointsProto? = nil
    var _followups: PodcastFollowupsProto? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _updatedAt = source._updatedAt
      _thumbnail = source._thumbnail
      _audio = source._audio
      _visuals = source._visuals
      _transcript = source._transcript
      _cards = source._cards
      _keyPoints = source._keyPoints
      _followups = source._followups
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._updatedAt) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._thumbnail) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._audio) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._visuals) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._transcript) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._cards) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._keyPoints) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._followups) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._updatedAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._thumbnail {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._audio {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._visuals {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._transcript {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._cards {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._keyPoints {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._followups {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PodcastProto, rhs: PodcastProto) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._updatedAt != rhs_storage._updatedAt {return false}
        if _storage._thumbnail != rhs_storage._thumbnail {return false}
        if _storage._audio != rhs_storage._audio {return false}
        if _storage._visuals != rhs_storage._visuals {return false}
        if _storage._transcript != rhs_storage._transcript {return false}
        if _storage._cards != rhs_storage._cards {return false}
        if _storage._keyPoints != rhs_storage._keyPoints {return false}
        if _storage._followups != rhs_storage._followups {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension FirestorePodcastProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "FirestorePodcastProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "updated_at"),
    2: .same(proto: "thumbnail"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._updatedAt) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._thumbnail) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._updatedAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._thumbnail {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: FirestorePodcastProto, rhs: FirestorePodcastProto) -> Bool {
    if lhs._updatedAt != rhs._updatedAt {return false}
    if lhs._thumbnail != rhs._thumbnail {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension FirestorePodcastsHomeProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "FirestorePodcastsHomeProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "updated_at"),
    2: .standard(proto: "your_podcasts_shelf"),
    3: .same(proto: "suggestions"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._updatedAt) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._yourPodcastsShelf) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._suggestions) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._updatedAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._yourPodcastsShelf {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._suggestions {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: FirestorePodcastsHomeProto, rhs: FirestorePodcastsHomeProto) -> Bool {
    if lhs._updatedAt != rhs._updatedAt {return false}
    if lhs._yourPodcastsShelf != rhs._yourPodcastsShelf {return false}
    if lhs._suggestions != rhs._suggestions {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension YourPodcastsShelfProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "YourPodcastsShelfProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "thumbnails"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.thumbnails) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.thumbnails.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.thumbnails, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: YourPodcastsShelfProto, rhs: YourPodcastsShelfProto) -> Bool {
    if lhs.thumbnails != rhs.thumbnails {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PodcastPointProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PodcastPointProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "point_id"),
    2: .same(proto: "title"),
    3: .standard(proto: "title_emoji"),
    4: .same(proto: "outline"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.pointID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.titleEmoji) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.outline) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.pointID.isEmpty {
      try visitor.visitSingularStringField(value: self.pointID, fieldNumber: 1)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 2)
    }
    if !self.titleEmoji.isEmpty {
      try visitor.visitSingularStringField(value: self.titleEmoji, fieldNumber: 3)
    }
    if !self.outline.isEmpty {
      try visitor.visitSingularStringField(value: self.outline, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PodcastPointProto, rhs: PodcastPointProto) -> Bool {
    if lhs.pointID != rhs.pointID {return false}
    if lhs.title != rhs.title {return false}
    if lhs.titleEmoji != rhs.titleEmoji {return false}
    if lhs.outline != rhs.outline {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PodcastThumbnailProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PodcastThumbnailProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "podcast_id"),
    2: .same(proto: "status"),
    3: .standard(proto: "display_status"),
    4: .same(proto: "title"),
    5: .same(proto: "badge"),
    6: .same(proto: "path"),
    7: .same(proto: "duration"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.podcastID) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.status) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.displayStatus) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.badge) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.path) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._duration) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.podcastID.isEmpty {
      try visitor.visitSingularStringField(value: self.podcastID, fieldNumber: 1)
    }
    if self.status != .undefined {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 2)
    }
    if !self.displayStatus.isEmpty {
      try visitor.visitSingularStringField(value: self.displayStatus, fieldNumber: 3)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 4)
    }
    if !self.badge.isEmpty {
      try visitor.visitSingularStringField(value: self.badge, fieldNumber: 5)
    }
    if !self.path.isEmpty {
      try visitor.visitSingularStringField(value: self.path, fieldNumber: 6)
    }
    try { if let v = self._duration {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PodcastThumbnailProto, rhs: PodcastThumbnailProto) -> Bool {
    if lhs.podcastID != rhs.podcastID {return false}
    if lhs.status != rhs.status {return false}
    if lhs.displayStatus != rhs.displayStatus {return false}
    if lhs.title != rhs.title {return false}
    if lhs.badge != rhs.badge {return false}
    if lhs.path != rhs.path {return false}
    if lhs._duration != rhs._duration {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PodcastAudioProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PodcastAudioProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "path"),
    2: .same(proto: "duration"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.path) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._duration) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.path.isEmpty {
      try visitor.visitSingularStringField(value: self.path, fieldNumber: 1)
    }
    try { if let v = self._duration {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PodcastAudioProto, rhs: PodcastAudioProto) -> Bool {
    if lhs.path != rhs.path {return false}
    if lhs._duration != rhs._duration {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PodcastCardsProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PodcastCardsProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "is_ready"),
    2: .same(proto: "cards"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.isReady) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.cards) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.isReady != false {
      try visitor.visitSingularBoolField(value: self.isReady, fieldNumber: 1)
    }
    if !self.cards.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.cards, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PodcastCardsProto, rhs: PodcastCardsProto) -> Bool {
    if lhs.isReady != rhs.isReady {return false}
    if lhs.cards != rhs.cards {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PodcastCardProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PodcastCardProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "card_id"),
    2: .standard(proto: "is_ready"),
    10: .same(proto: "knowledge"),
    11: .standard(proto: "multiple_choice"),
    12: .same(proto: "poll"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.cardID) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.isReady) }()
      case 10: try {
        var v: PodcastKnowledgeCardProto?
        var hadOneofValue = false
        if let current = self.type {
          hadOneofValue = true
          if case .knowledge(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.type = .knowledge(v)
        }
      }()
      case 11: try {
        var v: PodcastMultipleChoiceCardProto?
        var hadOneofValue = false
        if let current = self.type {
          hadOneofValue = true
          if case .multipleChoice(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.type = .multipleChoice(v)
        }
      }()
      case 12: try {
        var v: PodcastPollCardProto?
        var hadOneofValue = false
        if let current = self.type {
          hadOneofValue = true
          if case .poll(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.type = .poll(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.cardID.isEmpty {
      try visitor.visitSingularStringField(value: self.cardID, fieldNumber: 1)
    }
    if self.isReady != false {
      try visitor.visitSingularBoolField(value: self.isReady, fieldNumber: 2)
    }
    switch self.type {
    case .knowledge?: try {
      guard case .knowledge(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    }()
    case .multipleChoice?: try {
      guard case .multipleChoice(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    }()
    case .poll?: try {
      guard case .poll(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PodcastCardProto, rhs: PodcastCardProto) -> Bool {
    if lhs.cardID != rhs.cardID {return false}
    if lhs.isReady != rhs.isReady {return false}
    if lhs.type != rhs.type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PodcastErrorProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PodcastErrorProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "message"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.message) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PodcastErrorProto, rhs: PodcastErrorProto) -> Bool {
    if lhs.message != rhs.message {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PodcastPromptAnswerProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PodcastPromptAnswerProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "text"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.text) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.text.isEmpty {
      try visitor.visitSingularStringField(value: self.text, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PodcastPromptAnswerProto, rhs: PodcastPromptAnswerProto) -> Bool {
    if lhs.text != rhs.text {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PodcastVisualsProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PodcastVisualsProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "visuals"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.visuals) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.visuals.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.visuals, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PodcastVisualsProto, rhs: PodcastVisualsProto) -> Bool {
    if lhs.visuals != rhs.visuals {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PodcastVisualProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PodcastVisualProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "timestamp_millis"),
    2: .standard(proto: "image_path"),
    4: .same(proto: "animation"),
    3: .same(proto: "transition"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.timestampMillis) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.imagePath) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.transition) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._animation) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.timestampMillis != 0 {
      try visitor.visitSingularInt32Field(value: self.timestampMillis, fieldNumber: 1)
    }
    if !self.imagePath.isEmpty {
      try visitor.visitSingularStringField(value: self.imagePath, fieldNumber: 2)
    }
    if self.transition != .undefined {
      try visitor.visitSingularEnumField(value: self.transition, fieldNumber: 3)
    }
    try { if let v = self._animation {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PodcastVisualProto, rhs: PodcastVisualProto) -> Bool {
    if lhs.timestampMillis != rhs.timestampMillis {return false}
    if lhs.imagePath != rhs.imagePath {return false}
    if lhs._animation != rhs._animation {return false}
    if lhs.transition != rhs.transition {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PodcastVisualAnimationProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PodcastVisualAnimationProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "duration_millis"),
    2: .standard(proto: "start_scale"),
    3: .standard(proto: "end_scale"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.durationMillis) }()
      case 2: try { try decoder.decodeSingularFloatField(value: &self.startScale) }()
      case 3: try { try decoder.decodeSingularFloatField(value: &self.endScale) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.durationMillis != 0 {
      try visitor.visitSingularInt32Field(value: self.durationMillis, fieldNumber: 1)
    }
    if self.startScale != 0 {
      try visitor.visitSingularFloatField(value: self.startScale, fieldNumber: 2)
    }
    if self.endScale != 0 {
      try visitor.visitSingularFloatField(value: self.endScale, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PodcastVisualAnimationProto, rhs: PodcastVisualAnimationProto) -> Bool {
    if lhs.durationMillis != rhs.durationMillis {return false}
    if lhs.startScale != rhs.startScale {return false}
    if lhs.endScale != rhs.endScale {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PodcastTranscriptProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PodcastTranscriptProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "entries"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.entries) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.entries.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.entries, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PodcastTranscriptProto, rhs: PodcastTranscriptProto) -> Bool {
    if lhs.entries != rhs.entries {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PodcastTranscriptEntryProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PodcastTranscriptEntryProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "host"),
    2: .same(proto: "words"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.host) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.words) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.host != .unknown {
      try visitor.visitSingularEnumField(value: self.host, fieldNumber: 1)
    }
    if !self.words.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.words, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PodcastTranscriptEntryProto, rhs: PodcastTranscriptEntryProto) -> Bool {
    if lhs.host != rhs.host {return false}
    if lhs.words != rhs.words {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PodcastWordProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PodcastWordProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "word"),
    2: .standard(proto: "start_millis"),
    3: .standard(proto: "end_millis"),
    4: .same(proto: "separator"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.word) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.startMillis) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.endMillis) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.separator) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.word.isEmpty {
      try visitor.visitSingularStringField(value: self.word, fieldNumber: 1)
    }
    if self.startMillis != 0 {
      try visitor.visitSingularInt32Field(value: self.startMillis, fieldNumber: 2)
    }
    if self.endMillis != 0 {
      try visitor.visitSingularInt32Field(value: self.endMillis, fieldNumber: 3)
    }
    if !self.separator.isEmpty {
      try visitor.visitSingularStringField(value: self.separator, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PodcastWordProto, rhs: PodcastWordProto) -> Bool {
    if lhs.word != rhs.word {return false}
    if lhs.startMillis != rhs.startMillis {return false}
    if lhs.endMillis != rhs.endMillis {return false}
    if lhs.separator != rhs.separator {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PodcastKnowledgeCardProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PodcastKnowledgeCardProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "hero"),
    3: .same(proto: "text"),
    4: .same(proto: "explanation"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._hero) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.text) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.explanation) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    try { if let v = self._hero {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.text.isEmpty {
      try visitor.visitSingularStringField(value: self.text, fieldNumber: 3)
    }
    if !self.explanation.isEmpty {
      try visitor.visitSingularStringField(value: self.explanation, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PodcastKnowledgeCardProto, rhs: PodcastKnowledgeCardProto) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs._hero != rhs._hero {return false}
    if lhs.text != rhs.text {return false}
    if lhs.explanation != rhs.explanation {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PodcastMultipleChoiceCardProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PodcastMultipleChoiceCardProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "hero"),
    3: .same(proto: "question"),
    4: .same(proto: "options"),
    5: .standard(proto: "correct_answer_number"),
    6: .same(proto: "hints"),
    7: .same(proto: "explanation"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._hero) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.question) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.options) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self.correctAnswerNumber) }()
      case 6: try { try decoder.decodeRepeatedStringField(value: &self.hints) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.explanation) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    try { if let v = self._hero {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.question.isEmpty {
      try visitor.visitSingularStringField(value: self.question, fieldNumber: 3)
    }
    if !self.options.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.options, fieldNumber: 4)
    }
    if self.correctAnswerNumber != 0 {
      try visitor.visitSingularInt32Field(value: self.correctAnswerNumber, fieldNumber: 5)
    }
    if !self.hints.isEmpty {
      try visitor.visitRepeatedStringField(value: self.hints, fieldNumber: 6)
    }
    if !self.explanation.isEmpty {
      try visitor.visitSingularStringField(value: self.explanation, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PodcastMultipleChoiceCardProto, rhs: PodcastMultipleChoiceCardProto) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs._hero != rhs._hero {return false}
    if lhs.question != rhs.question {return false}
    if lhs.options != rhs.options {return false}
    if lhs.correctAnswerNumber != rhs.correctAnswerNumber {return false}
    if lhs.hints != rhs.hints {return false}
    if lhs.explanation != rhs.explanation {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PodcastPollCardProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PodcastPollCardProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "hero"),
    3: .same(proto: "question"),
    4: .same(proto: "options"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._hero) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.question) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.options) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    try { if let v = self._hero {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.question.isEmpty {
      try visitor.visitSingularStringField(value: self.question, fieldNumber: 3)
    }
    if !self.options.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.options, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PodcastPollCardProto, rhs: PodcastPollCardProto) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs._hero != rhs._hero {return false}
    if lhs.question != rhs.question {return false}
    if lhs.options != rhs.options {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PodcastCardHeroProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PodcastCardHeroProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "emoji"),
    2: .standard(proto: "lottie_url"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.emoji) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.lottieURL) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.emoji.isEmpty {
      try visitor.visitSingularStringField(value: self.emoji, fieldNumber: 1)
    }
    if !self.lottieURL.isEmpty {
      try visitor.visitSingularStringField(value: self.lottieURL, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PodcastCardHeroProto, rhs: PodcastCardHeroProto) -> Bool {
    if lhs.emoji != rhs.emoji {return false}
    if lhs.lottieURL != rhs.lottieURL {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PodcastMultipleChoiceOptionProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PodcastMultipleChoiceOptionProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "text"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.text) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.text.isEmpty {
      try visitor.visitSingularStringField(value: self.text, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PodcastMultipleChoiceOptionProto, rhs: PodcastMultipleChoiceOptionProto) -> Bool {
    if lhs.text != rhs.text {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PodcastPollOptionProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PodcastPollOptionProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "text"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.text) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.text.isEmpty {
      try visitor.visitSingularStringField(value: self.text, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PodcastPollOptionProto, rhs: PodcastPollOptionProto) -> Bool {
    if lhs.text != rhs.text {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PodcastKeyPointsProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PodcastKeyPointsProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "label"),
    2: .standard(proto: "key_points"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.label) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.keyPoints) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.label.isEmpty {
      try visitor.visitSingularStringField(value: self.label, fieldNumber: 1)
    }
    if !self.keyPoints.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.keyPoints, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PodcastKeyPointsProto, rhs: PodcastKeyPointsProto) -> Bool {
    if lhs.label != rhs.label {return false}
    if lhs.keyPoints != rhs.keyPoints {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PodcastFollowupsProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PodcastFollowupsProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "label"),
    2: .same(proto: "followups"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.label) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.followups) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.label.isEmpty {
      try visitor.visitSingularStringField(value: self.label, fieldNumber: 1)
    }
    if !self.followups.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.followups, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PodcastFollowupsProto, rhs: PodcastFollowupsProto) -> Bool {
    if lhs.label != rhs.label {return false}
    if lhs.followups != rhs.followups {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PodcastFollowupProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PodcastFollowupProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "followup_id"),
    2: .same(proto: "emoji"),
    3: .same(proto: "outline"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.followupID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.emoji) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.outline) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.followupID.isEmpty {
      try visitor.visitSingularStringField(value: self.followupID, fieldNumber: 1)
    }
    if !self.emoji.isEmpty {
      try visitor.visitSingularStringField(value: self.emoji, fieldNumber: 2)
    }
    if !self.outline.isEmpty {
      try visitor.visitSingularStringField(value: self.outline, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PodcastFollowupProto, rhs: PodcastFollowupProto) -> Bool {
    if lhs.followupID != rhs.followupID {return false}
    if lhs.emoji != rhs.emoji {return false}
    if lhs.outline != rhs.outline {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PodcastKeyPointProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PodcastKeyPointProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "key_point_id"),
    2: .same(proto: "title"),
    3: .standard(proto: "title_emoji"),
    4: .same(proto: "outline"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.keyPointID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.titleEmoji) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.outline) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.keyPointID.isEmpty {
      try visitor.visitSingularStringField(value: self.keyPointID, fieldNumber: 1)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 2)
    }
    if !self.titleEmoji.isEmpty {
      try visitor.visitSingularStringField(value: self.titleEmoji, fieldNumber: 3)
    }
    if !self.outline.isEmpty {
      try visitor.visitSingularStringField(value: self.outline, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PodcastKeyPointProto, rhs: PodcastKeyPointProto) -> Bool {
    if lhs.keyPointID != rhs.keyPointID {return false}
    if lhs.title != rhs.title {return false}
    if lhs.titleEmoji != rhs.titleEmoji {return false}
    if lhs.outline != rhs.outline {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PodcastSuggestionsProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PodcastSuggestionsProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "suggestions_id"),
    2: .standard(proto: "created_at"),
    3: .same(proto: "sections"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.suggestionsID) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._createdAt) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.sections) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.suggestionsID.isEmpty {
      try visitor.visitSingularStringField(value: self.suggestionsID, fieldNumber: 1)
    }
    try { if let v = self._createdAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.sections.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.sections, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PodcastSuggestionsProto, rhs: PodcastSuggestionsProto) -> Bool {
    if lhs.suggestionsID != rhs.suggestionsID {return false}
    if lhs._createdAt != rhs._createdAt {return false}
    if lhs.sections != rhs.sections {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PodcastSuggestionsSectionProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PodcastSuggestionsSectionProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "section_id"),
    2: .standard(proto: "section_title"),
    3: .standard(proto: "banner_suggestion"),
    4: .standard(proto: "footer_suggestion"),
    5: .same(proto: "story1"),
    6: .same(proto: "story2"),
  ]

  fileprivate class _StorageClass {
    var _sectionID: String = String()
    var _sectionTitle: String = String()
    var _bannerSuggestion: PodcastThumbnailProto? = nil
    var _footerSuggestion: PodcastThumbnailProto? = nil
    var _story1: PodcastStoryProto? = nil
    var _story2: PodcastStoryProto? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _sectionID = source._sectionID
      _sectionTitle = source._sectionTitle
      _bannerSuggestion = source._bannerSuggestion
      _footerSuggestion = source._footerSuggestion
      _story1 = source._story1
      _story2 = source._story2
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._sectionID) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._sectionTitle) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._bannerSuggestion) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._footerSuggestion) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._story1) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._story2) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._sectionID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._sectionID, fieldNumber: 1)
      }
      if !_storage._sectionTitle.isEmpty {
        try visitor.visitSingularStringField(value: _storage._sectionTitle, fieldNumber: 2)
      }
      try { if let v = _storage._bannerSuggestion {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._footerSuggestion {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._story1 {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._story2 {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PodcastSuggestionsSectionProto, rhs: PodcastSuggestionsSectionProto) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._sectionID != rhs_storage._sectionID {return false}
        if _storage._sectionTitle != rhs_storage._sectionTitle {return false}
        if _storage._bannerSuggestion != rhs_storage._bannerSuggestion {return false}
        if _storage._footerSuggestion != rhs_storage._footerSuggestion {return false}
        if _storage._story1 != rhs_storage._story1 {return false}
        if _storage._story2 != rhs_storage._story2 {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PodcastStoryProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PodcastStoryProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "podcast_story_id"),
    2: .same(proto: "title"),
    3: .standard(proto: "thumbnail_path"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.podcastStoryID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.thumbnailPath) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.podcastStoryID.isEmpty {
      try visitor.visitSingularStringField(value: self.podcastStoryID, fieldNumber: 1)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 2)
    }
    if !self.thumbnailPath.isEmpty {
      try visitor.visitSingularStringField(value: self.thumbnailPath, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PodcastStoryProto, rhs: PodcastStoryProto) -> Bool {
    if lhs.podcastStoryID != rhs.podcastStoryID {return false}
    if lhs.title != rhs.title {return false}
    if lhs.thumbnailPath != rhs.thumbnailPath {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
