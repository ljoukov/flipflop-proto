/* eslint-disable */
// @generated by protobuf-ts 2.9.1 with parameter eslint_disable,long_type_string,ts_nocheck
// @generated from protobuf file "RecsProto.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "./google/protobuf/timestamp";
/**
 * @generated from protobuf message EmbedProto
 */
export interface EmbedProto {
    /**
     * @generated from protobuf field: google.protobuf.Timestamp created_at = 1;
     */
    createdAt?: Timestamp;
    /**
     * @generated from protobuf field: EmbedTypeProto embed_type = 2;
     */
    embedType: EmbedTypeProto;
    /**
     * @generated from protobuf field: bytes input_hash = 3;
     */
    inputHash: Uint8Array;
    /**
     * @generated from protobuf field: repeated float embedding = 4 [packed = true];
     */
    embedding: number[];
}
/**
 * @generated from protobuf message RecsScoredTopic
 */
export interface RecsScoredTopic {
    /**
     * @generated from protobuf field: RecsTopicProto topic = 1;
     */
    topic: RecsTopicProto;
    /**
     * @generated from protobuf field: float score = 2;
     */
    score: number;
}
/**
 * @generated from protobuf message StoryRecsProto
 */
export interface StoryRecsProto {
    /**
     * @generated from protobuf field: string story_id = 1;
     */
    storyId: string;
    /**
     * @generated from protobuf field: EmbedProto embed = 2;
     */
    embed?: EmbedProto;
    /**
     * @generated from protobuf field: RecsImpactProto impact = 3;
     */
    impact: RecsImpactProto;
    /**
     * @generated from protobuf field: repeated RecsScoredTopic topics = 4;
     */
    topics: RecsScoredTopic[];
    /**
     * @generated from protobuf field: RecsContentTypeProto content_type = 5;
     */
    contentType: RecsContentTypeProto;
    /**
     * @generated from protobuf field: float quality = 6;
     */
    quality: number; // 0-1
}
/**
 * @generated from protobuf message StoriesRecsCacheProto
 */
export interface StoriesRecsCacheProto {
    /**
     * @generated from protobuf field: google.protobuf.Timestamp created_at = 1;
     */
    createdAt?: Timestamp;
    /**
     * @generated from protobuf field: repeated StoryRecsProto recs = 2;
     */
    recs: StoryRecsProto[];
}
/**
 * @generated from protobuf enum EmbedTypeProto
 */
export enum EmbedTypeProto {
    /**
     * @generated from protobuf enum value: EMBED_TYPE_UNKNOWN = 0;
     */
    EMBED_TYPE_UNKNOWN = 0,
    /**
     * @generated from protobuf enum value: EMBED_TYPE_ADA_002 = 1;
     */
    EMBED_TYPE_ADA_002 = 1
}
/**
 * @generated from protobuf enum RecsTopicProto
 */
export enum RecsTopicProto {
    /**
     * @generated from protobuf enum value: RECS_TOPIC_UNDEFINED = 0;
     */
    RECS_TOPIC_UNDEFINED = 0,
    /**
     * @generated from protobuf enum value: RECS_TOPIC_ARTS = 1;
     */
    RECS_TOPIC_ARTS = 1,
    /**
     * @generated from protobuf enum value: RECS_TOPIC_BUSINESS = 2;
     */
    RECS_TOPIC_BUSINESS = 2,
    /**
     * @generated from protobuf enum value: RECS_TOPIC_CULTURE = 3;
     */
    RECS_TOPIC_CULTURE = 3,
    /**
     * @generated from protobuf enum value: RECS_TOPIC_EDUCATION = 4;
     */
    RECS_TOPIC_EDUCATION = 4,
    /**
     * @generated from protobuf enum value: RECS_TOPIC_HEALTH = 5;
     */
    RECS_TOPIC_HEALTH = 5,
    /**
     * @generated from protobuf enum value: RECS_TOPIC_HISTORY = 6;
     */
    RECS_TOPIC_HISTORY = 6,
    /**
     * @generated from protobuf enum value: RECS_TOPIC_HOBBIES = 7;
     */
    RECS_TOPIC_HOBBIES = 7,
    /**
     * @generated from protobuf enum value: RECS_TOPIC_HUMANITIES = 8;
     */
    RECS_TOPIC_HUMANITIES = 8,
    /**
     * @generated from protobuf enum value: RECS_TOPIC_MATHEMATICS = 9;
     */
    RECS_TOPIC_MATHEMATICS = 9,
    /**
     * @generated from protobuf enum value: RECS_TOPIC_LANGUAGE = 10;
     */
    RECS_TOPIC_LANGUAGE = 10,
    /**
     * @generated from protobuf enum value: RECS_TOPIC_PSYCHOLOGY = 11;
     */
    RECS_TOPIC_PSYCHOLOGY = 11,
    /**
     * @generated from protobuf enum value: RECS_TOPIC_RECREATION = 12;
     */
    RECS_TOPIC_RECREATION = 12,
    /**
     * @generated from protobuf enum value: RECS_TOPIC_SCIENCE = 13;
     */
    RECS_TOPIC_SCIENCE = 13,
    /**
     * @generated from protobuf enum value: RECS_TOPIC_SOCIAL_STUDIES = 14;
     */
    RECS_TOPIC_SOCIAL_STUDIES = 14,
    /**
     * @generated from protobuf enum value: RECS_TOPIC_TECHNOLOGY = 15;
     */
    RECS_TOPIC_TECHNOLOGY = 15,
    /**
     * @generated from protobuf enum value: RECS_TOPIC_GEOGRAPHY = 16;
     */
    RECS_TOPIC_GEOGRAPHY = 16,
    /**
     * @generated from protobuf enum value: RECS_TOPIC_PHYSICS = 17;
     */
    RECS_TOPIC_PHYSICS = 17,
    /**
     * @generated from protobuf enum value: RECS_TOPIC_LITERATURE = 18;
     */
    RECS_TOPIC_LITERATURE = 18,
    /**
     * @generated from protobuf enum value: RECS_TOPIC_PHILOSOPHY = 19;
     */
    RECS_TOPIC_PHILOSOPHY = 19,
    /**
     * @generated from protobuf enum value: RECS_TOPIC_ENVIRONMENT = 20;
     */
    RECS_TOPIC_ENVIRONMENT = 20,
    /**
     * @generated from protobuf enum value: RECS_TOPIC_NATURE = 21;
     */
    RECS_TOPIC_NATURE = 21,
    /**
     * @generated from protobuf enum value: RECS_TOPIC_POLITICS = 22;
     */
    RECS_TOPIC_POLITICS = 22,
    /**
     * @generated from protobuf enum value: RECS_TOPIC_BIOLOGY = 23;
     */
    RECS_TOPIC_BIOLOGY = 23,
    /**
     * @generated from protobuf enum value: RECS_TOPIC_CHEMISTRY = 24;
     */
    RECS_TOPIC_CHEMISTRY = 24,
    /**
     * @generated from protobuf enum value: RECS_TOPIC_AGRICULTURE = 25;
     */
    RECS_TOPIC_AGRICULTURE = 25
}
/**
 * Emotional impact on the user.
 *
 * @generated from protobuf enum RecsImpactProto
 */
export enum RecsImpactProto {
    /**
     * @generated from protobuf enum value: RECS_IMPACT_UNKNOWN = 0;
     */
    RECS_IMPACT_UNKNOWN = 0,
    /**
     * @generated from protobuf enum value: RECS_IMPACT_LOW = 1;
     */
    RECS_IMPACT_LOW = 1,
    /**
     * @generated from protobuf enum value: RECS_IMPACT_MEDIUM = 2;
     */
    RECS_IMPACT_MEDIUM = 2,
    /**
     * @generated from protobuf enum value: RECS_IMPACT_HIGH = 3;
     */
    RECS_IMPACT_HIGH = 3
}
/**
 * @generated from protobuf enum RecsContentTypeProto
 */
export enum RecsContentTypeProto {
    /**
     * @generated from protobuf enum value: RECS_CONTENT_TYPE_UNKNOWN = 0;
     */
    RECS_CONTENT_TYPE_UNKNOWN = 0,
    /**
     * @generated from protobuf enum value: RECS_CONTENT_TYPE_INFO = 1;
     */
    RECS_CONTENT_TYPE_INFO = 1,
    /**
     * @generated from protobuf enum value: RECS_CONTENT_TYPE_ABC = 2;
     */
    RECS_CONTENT_TYPE_ABC = 2,
    /**
     * @generated from protobuf enum value: RECS_CONTENT_TYPE_TRUE_FALSE = 3;
     */
    RECS_CONTENT_TYPE_TRUE_FALSE = 3,
    /**
     * @generated from protobuf enum value: RECS_CONTENT_TYPE_VOTING = 4;
     */
    RECS_CONTENT_TYPE_VOTING = 4,
    /**
     * @generated from protobuf enum value: RECS_CONTENT_TYPE_CHALLENGE = 5;
     */
    RECS_CONTENT_TYPE_CHALLENGE = 5
}
// @generated message type with reflection information, may provide speed optimized methods
class EmbedProto$Type extends MessageType<EmbedProto> {
    constructor() {
        super("EmbedProto", [
            { no: 1, name: "created_at", kind: "message", T: () => Timestamp },
            { no: 2, name: "embed_type", kind: "enum", T: () => ["EmbedTypeProto", EmbedTypeProto] },
            { no: 3, name: "input_hash", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 4, name: "embedding", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<EmbedProto>): EmbedProto {
        const message = { embedType: 0, inputHash: new Uint8Array(0), embedding: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EmbedProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EmbedProto): EmbedProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Timestamp created_at */ 1:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* EmbedTypeProto embed_type */ 2:
                    message.embedType = reader.int32();
                    break;
                case /* bytes input_hash */ 3:
                    message.inputHash = reader.bytes();
                    break;
                case /* repeated float embedding = 4 [packed = true];*/ 4:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.embedding.push(reader.float());
                    else
                        message.embedding.push(reader.float());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EmbedProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.Timestamp created_at = 1; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* EmbedTypeProto embed_type = 2; */
        if (message.embedType !== 0)
            writer.tag(2, WireType.Varint).int32(message.embedType);
        /* bytes input_hash = 3; */
        if (message.inputHash.length)
            writer.tag(3, WireType.LengthDelimited).bytes(message.inputHash);
        /* repeated float embedding = 4 [packed = true]; */
        if (message.embedding.length) {
            writer.tag(4, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.embedding.length; i++)
                writer.float(message.embedding[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message EmbedProto
 */
export const EmbedProto = new EmbedProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RecsScoredTopic$Type extends MessageType<RecsScoredTopic> {
    constructor() {
        super("RecsScoredTopic", [
            { no: 1, name: "topic", kind: "enum", T: () => ["RecsTopicProto", RecsTopicProto] },
            { no: 2, name: "score", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<RecsScoredTopic>): RecsScoredTopic {
        const message = { topic: 0, score: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RecsScoredTopic>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RecsScoredTopic): RecsScoredTopic {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* RecsTopicProto topic */ 1:
                    message.topic = reader.int32();
                    break;
                case /* float score */ 2:
                    message.score = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RecsScoredTopic, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* RecsTopicProto topic = 1; */
        if (message.topic !== 0)
            writer.tag(1, WireType.Varint).int32(message.topic);
        /* float score = 2; */
        if (message.score !== 0)
            writer.tag(2, WireType.Bit32).float(message.score);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RecsScoredTopic
 */
export const RecsScoredTopic = new RecsScoredTopic$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StoryRecsProto$Type extends MessageType<StoryRecsProto> {
    constructor() {
        super("StoryRecsProto", [
            { no: 1, name: "story_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "embed", kind: "message", T: () => EmbedProto },
            { no: 3, name: "impact", kind: "enum", T: () => ["RecsImpactProto", RecsImpactProto] },
            { no: 4, name: "topics", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => RecsScoredTopic },
            { no: 5, name: "content_type", kind: "enum", T: () => ["RecsContentTypeProto", RecsContentTypeProto] },
            { no: 6, name: "quality", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<StoryRecsProto>): StoryRecsProto {
        const message = { storyId: "", impact: 0, topics: [], contentType: 0, quality: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StoryRecsProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StoryRecsProto): StoryRecsProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string story_id */ 1:
                    message.storyId = reader.string();
                    break;
                case /* EmbedProto embed */ 2:
                    message.embed = EmbedProto.internalBinaryRead(reader, reader.uint32(), options, message.embed);
                    break;
                case /* RecsImpactProto impact */ 3:
                    message.impact = reader.int32();
                    break;
                case /* repeated RecsScoredTopic topics */ 4:
                    message.topics.push(RecsScoredTopic.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* RecsContentTypeProto content_type */ 5:
                    message.contentType = reader.int32();
                    break;
                case /* float quality */ 6:
                    message.quality = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StoryRecsProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string story_id = 1; */
        if (message.storyId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.storyId);
        /* EmbedProto embed = 2; */
        if (message.embed)
            EmbedProto.internalBinaryWrite(message.embed, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* RecsImpactProto impact = 3; */
        if (message.impact !== 0)
            writer.tag(3, WireType.Varint).int32(message.impact);
        /* repeated RecsScoredTopic topics = 4; */
        for (let i = 0; i < message.topics.length; i++)
            RecsScoredTopic.internalBinaryWrite(message.topics[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* RecsContentTypeProto content_type = 5; */
        if (message.contentType !== 0)
            writer.tag(5, WireType.Varint).int32(message.contentType);
        /* float quality = 6; */
        if (message.quality !== 0)
            writer.tag(6, WireType.Bit32).float(message.quality);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message StoryRecsProto
 */
export const StoryRecsProto = new StoryRecsProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StoriesRecsCacheProto$Type extends MessageType<StoriesRecsCacheProto> {
    constructor() {
        super("StoriesRecsCacheProto", [
            { no: 1, name: "created_at", kind: "message", T: () => Timestamp },
            { no: 2, name: "recs", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => StoryRecsProto }
        ]);
    }
    create(value?: PartialMessage<StoriesRecsCacheProto>): StoriesRecsCacheProto {
        const message = { recs: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StoriesRecsCacheProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StoriesRecsCacheProto): StoriesRecsCacheProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Timestamp created_at */ 1:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* repeated StoryRecsProto recs */ 2:
                    message.recs.push(StoryRecsProto.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StoriesRecsCacheProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.Timestamp created_at = 1; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated StoryRecsProto recs = 2; */
        for (let i = 0; i < message.recs.length; i++)
            StoryRecsProto.internalBinaryWrite(message.recs[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message StoriesRecsCacheProto
 */
export const StoriesRecsCacheProto = new StoriesRecsCacheProto$Type();
