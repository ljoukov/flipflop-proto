/* eslint-disable */
// @generated by protobuf-ts 2.9.1 with parameter eslint_disable,long_type_string,ts_nocheck
// @generated from protobuf file "LLMProto.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "./google/protobuf/timestamp";
/**
 * @generated from protobuf message LLMMessage
 */
export interface LLMMessage {
    /**
     * @generated from protobuf field: LLMMessageRole role = 1;
     */
    role: LLMMessageRole;
    /**
     * @generated from protobuf field: string constent = 2;
     */
    constent: string;
}
/**
 * @generated from protobuf message LLMUsage
 */
export interface LLMUsage {
    /**
     * @generated from protobuf field: int32 prompt_tokes = 5;
     */
    promptTokes: number;
    /**
     * @generated from protobuf field: int32 completion_tokens = 6;
     */
    completionTokens: number;
    /**
     * @generated from protobuf field: int32 total_tokens = 7;
     */
    totalTokens: number;
}
/**
 * @generated from protobuf message LLMOutputProto
 */
export interface LLMOutputProto {
    /**
     * @generated from protobuf field: string model = 1;
     */
    model: string;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp created_at = 2;
     */
    createdAt?: Timestamp;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp completed_at = 3;
     */
    completedAt?: Timestamp;
    /**
     * @generated from protobuf field: repeated LLMMessage messages = 4;
     */
    messages: LLMMessage[];
    /**
     * @generated from protobuf field: LLMUsage usage = 5;
     */
    usage?: LLMUsage;
}
/**
 * @generated from protobuf enum LLMMessageRole
 */
export enum LLMMessageRole {
    /**
     * @generated from protobuf enum value: LLM_MESSAGE_ROLE_UNKNOWN = 0;
     */
    LLM_MESSAGE_ROLE_UNKNOWN = 0,
    /**
     * @generated from protobuf enum value: LLM_MESSAGE_ROLE_SYSTEM = 1;
     */
    LLM_MESSAGE_ROLE_SYSTEM = 1,
    /**
     * @generated from protobuf enum value: LLM_MESSAGE_ROLE_USER = 2;
     */
    LLM_MESSAGE_ROLE_USER = 2,
    /**
     * @generated from protobuf enum value: LLM_MESSAGE_ROLE_ASSISTANT = 3;
     */
    LLM_MESSAGE_ROLE_ASSISTANT = 3
}
// @generated message type with reflection information, may provide speed optimized methods
class LLMMessage$Type extends MessageType<LLMMessage> {
    constructor() {
        super("LLMMessage", [
            { no: 1, name: "role", kind: "enum", T: () => ["LLMMessageRole", LLMMessageRole] },
            { no: 2, name: "constent", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LLMMessage>): LLMMessage {
        const message = { role: 0, constent: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LLMMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LLMMessage): LLMMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* LLMMessageRole role */ 1:
                    message.role = reader.int32();
                    break;
                case /* string constent */ 2:
                    message.constent = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LLMMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* LLMMessageRole role = 1; */
        if (message.role !== 0)
            writer.tag(1, WireType.Varint).int32(message.role);
        /* string constent = 2; */
        if (message.constent !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.constent);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LLMMessage
 */
export const LLMMessage = new LLMMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LLMUsage$Type extends MessageType<LLMUsage> {
    constructor() {
        super("LLMUsage", [
            { no: 5, name: "prompt_tokes", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "completion_tokens", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "total_tokens", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<LLMUsage>): LLMUsage {
        const message = { promptTokes: 0, completionTokens: 0, totalTokens: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LLMUsage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LLMUsage): LLMUsage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 prompt_tokes */ 5:
                    message.promptTokes = reader.int32();
                    break;
                case /* int32 completion_tokens */ 6:
                    message.completionTokens = reader.int32();
                    break;
                case /* int32 total_tokens */ 7:
                    message.totalTokens = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LLMUsage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 prompt_tokes = 5; */
        if (message.promptTokes !== 0)
            writer.tag(5, WireType.Varint).int32(message.promptTokes);
        /* int32 completion_tokens = 6; */
        if (message.completionTokens !== 0)
            writer.tag(6, WireType.Varint).int32(message.completionTokens);
        /* int32 total_tokens = 7; */
        if (message.totalTokens !== 0)
            writer.tag(7, WireType.Varint).int32(message.totalTokens);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LLMUsage
 */
export const LLMUsage = new LLMUsage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LLMOutputProto$Type extends MessageType<LLMOutputProto> {
    constructor() {
        super("LLMOutputProto", [
            { no: 1, name: "model", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "created_at", kind: "message", T: () => Timestamp },
            { no: 3, name: "completed_at", kind: "message", T: () => Timestamp },
            { no: 4, name: "messages", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => LLMMessage },
            { no: 5, name: "usage", kind: "message", T: () => LLMUsage }
        ]);
    }
    create(value?: PartialMessage<LLMOutputProto>): LLMOutputProto {
        const message = { model: "", messages: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LLMOutputProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LLMOutputProto): LLMOutputProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string model */ 1:
                    message.model = reader.string();
                    break;
                case /* google.protobuf.Timestamp created_at */ 2:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* google.protobuf.Timestamp completed_at */ 3:
                    message.completedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.completedAt);
                    break;
                case /* repeated LLMMessage messages */ 4:
                    message.messages.push(LLMMessage.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* LLMUsage usage */ 5:
                    message.usage = LLMUsage.internalBinaryRead(reader, reader.uint32(), options, message.usage);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LLMOutputProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string model = 1; */
        if (message.model !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.model);
        /* google.protobuf.Timestamp created_at = 2; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp completed_at = 3; */
        if (message.completedAt)
            Timestamp.internalBinaryWrite(message.completedAt, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated LLMMessage messages = 4; */
        for (let i = 0; i < message.messages.length; i++)
            LLMMessage.internalBinaryWrite(message.messages[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* LLMUsage usage = 5; */
        if (message.usage)
            LLMUsage.internalBinaryWrite(message.usage, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LLMOutputProto
 */
export const LLMOutputProto = new LLMOutputProto$Type();
