/* eslint-disable */
// @generated by protobuf-ts 2.8.1 with parameter eslint_disable,long_type_string,ts_nocheck
// @generated from protobuf file "StoryProto.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Duration } from "./google/protobuf/duration";
import { Timestamp } from "./google/protobuf/timestamp";
/**
 * @generated from protobuf message GetStoriesRequestProto
 */
export interface GetStoriesRequestProto {
    /**
     * @generated from protobuf field: google.protobuf.Timestamp last_modified_after = 1;
     */
    lastModifiedAfter?: Timestamp;
}
/**
 * @generated from protobuf message GetStoriesResponseProto
 */
export interface GetStoriesResponseProto {
    /**
     * @generated from protobuf field: repeated StoryProto stories = 1;
     */
    stories: StoryProto[];
    /**
     * @generated from protobuf field: repeated string deleted_story_id = 2;
     */
    deletedStoryId: string[];
    /**
     * @generated from protobuf field: google.protobuf.Timestamp last_modified_at = 3;
     */
    lastModifiedAt?: Timestamp;
}
/**
 * @generated from protobuf message CreateStoryRequestProto
 */
export interface CreateStoryRequestProto {
    /**
     * @generated from protobuf field: repeated CardProto cards = 1;
     */
    cards: CardProto[];
}
/**
 * @generated from protobuf message CreateStoryResponseProto
 */
export interface CreateStoryResponseProto {
    /**
     * @generated from protobuf field: string story_id = 1;
     */
    storyId: string;
}
/**
 * @generated from protobuf message UpdateStoryRequestProto
 */
export interface UpdateStoryRequestProto {
    /**
     * @generated from protobuf field: string story_id = 1;
     */
    storyId: string;
    /**
     * @generated from protobuf field: repeated CardProto cards = 2;
     */
    cards: CardProto[];
}
/**
 * @generated from protobuf message UpdateStoryResponseProto
 */
export interface UpdateStoryResponseProto {
}
/**
 * @generated from protobuf message DeleteStoryRequestProto
 */
export interface DeleteStoryRequestProto {
    /**
     * @generated from protobuf field: string story_id = 1;
     */
    storyId: string;
}
/**
 * @generated from protobuf message DeleteStoryResponseProto
 */
export interface DeleteStoryResponseProto {
}
/**
 * @generated from protobuf message StoryApiRequestProto
 */
export interface StoryApiRequestProto {
    /**
     * @generated from protobuf oneof: request
     */
    request: {
        oneofKind: "getStories";
        /**
         * @generated from protobuf field: GetStoriesRequestProto get_stories = 1;
         */
        getStories: GetStoriesRequestProto;
    } | {
        oneofKind: "createStory";
        /**
         * @generated from protobuf field: CreateStoryRequestProto create_story = 2;
         */
        createStory: CreateStoryRequestProto;
    } | {
        oneofKind: "updateStory";
        /**
         * @generated from protobuf field: UpdateStoryRequestProto update_story = 3;
         */
        updateStory: UpdateStoryRequestProto;
    } | {
        oneofKind: "deleteStory";
        /**
         * @generated from protobuf field: DeleteStoryRequestProto delete_story = 4;
         */
        deleteStory: DeleteStoryRequestProto;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message StoryApiResponseProto
 */
export interface StoryApiResponseProto {
    /**
     * @generated from protobuf oneof: response
     */
    response: {
        oneofKind: "getStories";
        /**
         * @generated from protobuf field: GetStoriesResponseProto get_stories = 1;
         */
        getStories: GetStoriesResponseProto;
    } | {
        oneofKind: "createStory";
        /**
         * @generated from protobuf field: CreateStoryResponseProto create_story = 2;
         */
        createStory: CreateStoryResponseProto;
    } | {
        oneofKind: "updateStory";
        /**
         * @generated from protobuf field: UpdateStoryResponseProto update_story = 3;
         */
        updateStory: UpdateStoryResponseProto;
    } | {
        oneofKind: "deleteStory";
        /**
         * @generated from protobuf field: DeleteStoryResponseProto delete_story = 4;
         */
        deleteStory: DeleteStoryResponseProto;
    } | {
        oneofKind: undefined;
    };
    /**
     * @generated from protobuf field: map<string, google.protobuf.Duration> latencies = 5;
     */
    latencies: {
        [key: string]: Duration;
    };
}
/**
 * @generated from protobuf message StoryDataProto
 */
export interface StoryDataProto {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string author_id = 2;
     */
    authorId: string;
    /**
     * @generated from protobuf field: int64 timestamp_millis = 3;
     */
    timestampMillis: string;
    /**
     * @generated from protobuf field: repeated CardDataProto cards_data = 4;
     */
    cardsData: CardDataProto[];
}
/**
 * @generated from protobuf message CardDataProto
 */
export interface CardDataProto {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: CardTypeProto card_type = 2;
     */
    cardType: CardTypeProto;
    /**
     * @generated from protobuf field: string title = 3;
     */
    title: string;
    /**
     * @generated from protobuf field: string body = 4;
     */
    body: string;
    /**
     * @generated from protobuf field: bool is_true = 5;
     */
    isTrue: boolean;
    /**
     * @generated from protobuf field: repeated string options = 6;
     */
    options: string[];
    /**
     * @generated from protobuf field: int32 correct_option_index = 7;
     */
    correctOptionIndex: number;
    /**
     * @generated from protobuf field: string explanation = 8;
     */
    explanation: string;
    /**
     * @generated from protobuf field: ImageRefProto image_ref = 9;
     */
    imageRef?: ImageRefProto;
    /**
     * @generated from protobuf field: repeated string hash_tags = 10;
     */
    hashTags: string[];
}
/**
 * @generated from protobuf message StoryRecsProto
 */
export interface StoryRecsProto {
    /**
     * @generated from protobuf field: string story_id = 1;
     */
    storyId: string;
    /**
     * @generated from protobuf field: repeated string general_topics = 2;
     */
    generalTopics: string[];
    /**
     * @generated from protobuf field: repeated string topics = 3;
     */
    topics: string[];
}
/**
 * @generated from protobuf message StoriesProto
 */
export interface StoriesProto {
    /**
     * @generated from protobuf field: google.protobuf.Timestamp timestamp = 1;
     */
    timestamp?: Timestamp;
    /**
     * @generated from protobuf field: repeated StoryProto stories = 2;
     */
    stories: StoryProto[];
}
/**
 * @generated from protobuf message StoryProto
 */
export interface StoryProto {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string created_by = 2;
     */
    createdBy: string;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp created_at = 3;
     */
    createdAt?: Timestamp;
    /**
     * @generated from protobuf field: string last_modified_by = 4;
     */
    lastModifiedBy: string;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp last_modified_at = 5;
     */
    lastModifiedAt?: Timestamp;
    /**
     * @generated from protobuf field: string title = 6;
     */
    title: string;
    /**
     * @generated from protobuf field: repeated CardProto cards = 7;
     */
    cards: CardProto[];
    /**
     * @generated from protobuf field: StoryDataProto story_data = 8;
     */
    storyData?: StoryDataProto;
    /**
     * @generated from protobuf field: StoryRecsProto story_recs = 9;
     */
    storyRecs?: StoryRecsProto;
}
/**
 * @generated from protobuf message CardProto
 */
export interface CardProto {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: CardFaceProto front_face = 2;
     */
    frontFace?: CardFaceProto;
}
/**
 * @generated from protobuf message CardFaceProto
 */
export interface CardFaceProto {
    /**
     * @generated from protobuf field: repeated CardBlockProto blocks = 1;
     */
    blocks: CardBlockProto[];
    /**
     * @generated from protobuf field: repeated string hash_tags = 2;
     */
    hashTags: string[];
}
/**
 * @generated from protobuf message CardBlockProto
 */
export interface CardBlockProto {
    /**
     * @generated from protobuf oneof: type
     */
    type: {
        oneofKind: "space";
        /**
         * @generated from protobuf field: SpaceBlockProto space = 1;
         */
        space: SpaceBlockProto;
    } | {
        oneofKind: "image";
        /**
         * @generated from protobuf field: ImageBlockProto image = 2;
         */
        image: ImageBlockProto;
    } | {
        oneofKind: "text";
        /**
         * @generated from protobuf field: TextBlockProto text = 3;
         */
        text: TextBlockProto;
    } | {
        oneofKind: "flip";
        /**
         * @generated from protobuf field: FlipBlockProto flip = 4;
         */
        flip: FlipBlockProto;
    } | {
        oneofKind: "coffee";
        /**
         * @generated from protobuf field: CoffeeBlockProto coffee = 5;
         */
        coffee: CoffeeBlockProto;
    } | {
        oneofKind: "reveal";
        /**
         * @generated from protobuf field: RevealBlockProto reveal = 6;
         */
        reveal: RevealBlockProto;
    } | {
        oneofKind: "choice";
        /**
         * @generated from protobuf field: ChoiceBlockProto choice = 7;
         */
        choice: ChoiceBlockProto;
    } | {
        oneofKind: "question";
        /**
         * @generated from protobuf field: QuestionBlockProto question = 8;
         */
        question: QuestionBlockProto;
    } | {
        oneofKind: "prompt";
        /**
         * @generated from protobuf field: PromptBlockProto prompt = 9;
         */
        prompt: PromptBlockProto;
    } | {
        oneofKind: "revealBack";
        /**
         * @generated from protobuf field: RevealBackBlockProto reveal_back = 10;
         */
        revealBack: RevealBackBlockProto;
    } | {
        oneofKind: "chatBot";
        /**
         * @generated from protobuf field: ChatbotBlockProto chat_bot = 11;
         */
        chatBot: ChatbotBlockProto;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message SpaceBlockProto
 */
export interface SpaceBlockProto {
    /**
     * @generated from protobuf field: float scale = 1;
     */
    scale: number;
}
/**
 * @generated from protobuf message ImageRefProto
 */
export interface ImageRefProto {
    /**
     * @generated from protobuf oneof: type
     */
    type: {
        oneofKind: "storagePath";
        /**
         * @generated from protobuf field: string storage_path = 1;
         */
        storagePath: string;
    } | {
        oneofKind: "imageData";
        /**
         * @generated from protobuf field: bytes image_data = 2;
         */
        imageData: Uint8Array;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message ImageBlockProto
 */
export interface ImageBlockProto {
    /**
     * @generated from protobuf field: ImageRefProto image_ref = 1;
     */
    imageRef?: ImageRefProto;
    /**
     * @generated from protobuf field: float scale = 2;
     */
    scale: number;
    /**
     * @generated from protobuf field: float border_radius = 3;
     */
    borderRadius: number;
}
/**
 * @generated from protobuf message TextSpanProto
 */
export interface TextSpanProto {
    /**
     * @generated from protobuf field: string text = 1;
     */
    text: string;
    /**
     * @generated from protobuf field: FontWeightProto font_weight = 2;
     */
    fontWeight: FontWeightProto;
    /**
     * @generated from protobuf field: FontStyleProto font_style = 3;
     */
    fontStyle: FontStyleProto;
    /**
     * @generated from protobuf field: TextDecorationProto decoration = 4;
     */
    decoration: TextDecorationProto;
}
/**
 * Box of text with styles
 *
 * @generated from protobuf message StyledTextProto
 */
export interface StyledTextProto {
    /**
     * @generated from protobuf field: repeated TextSpanProto spans = 1;
     */
    spans: TextSpanProto[];
    /**
     * @generated from protobuf field: FontNameProto font_name = 2;
     */
    fontName: FontNameProto;
    /**
     * @generated from protobuf field: float font_size = 3;
     */
    fontSize: number;
    /**
     * @generated from protobuf field: float padding_start = 4;
     */
    paddingStart: number;
    /**
     * @generated from protobuf field: float padding_end = 5;
     */
    paddingEnd: number;
    /**
     * @generated from protobuf field: TextAlignmentProto align = 6;
     */
    align: TextAlignmentProto;
    /**
     * @generated from protobuf field: TextWhitespaceProto whitespace = 7;
     */
    whitespace: TextWhitespaceProto;
    /**
     * @generated from protobuf field: TextHyphensProto hyphens = 8;
     */
    hyphens: TextHyphensProto;
}
/**
 * @generated from protobuf message TextBlockProto
 */
export interface TextBlockProto {
    /**
     * @generated from protobuf field: StyledTextProto styled_text = 1;
     */
    styledText?: StyledTextProto;
}
/**
 * @generated from protobuf message FlipBlockProto
 */
export interface FlipBlockProto {
    /**
     * @generated from protobuf field: string label = 1;
     */
    label: string;
}
/**
 * @generated from protobuf message CoffeeBlockProto
 */
export interface CoffeeBlockProto {
    /**
     * @generated from protobuf field: string label = 1;
     */
    label: string;
    /**
     * @generated from protobuf field: float start_offset = 2;
     */
    startOffset: number; // moves the label along the circle
    /**
     * @generated from protobuf field: ImageRefProto image_ref = 3;
     */
    imageRef?: ImageRefProto;
}
/**
 * @generated from protobuf message RevealBlockProto
 */
export interface RevealBlockProto {
    /**
     * @generated from protobuf field: float scale = 1;
     */
    scale: number;
    /**
     * @generated from protobuf field: string label = 2;
     */
    label: string;
    /**
     * @generated from protobuf field: StyledTextProto text = 3;
     */
    text?: StyledTextProto;
}
/**
 * @generated from protobuf message ChoiceBlockOptionProto
 */
export interface ChoiceBlockOptionProto {
    /**
     * @generated from protobuf field: StyledTextProto text = 1;
     */
    text?: StyledTextProto;
    /**
     * @generated from protobuf field: float fraction = 2;
     */
    fraction: number;
}
/**
 * @generated from protobuf message ChoiceBlockProto
 */
export interface ChoiceBlockProto {
    /**
     * @generated from protobuf field: float scale = 1;
     */
    scale: number;
    /**
     * @generated from protobuf field: repeated ChoiceBlockOptionProto options = 2;
     */
    options: ChoiceBlockOptionProto[];
    /**
     * @generated from protobuf field: int32 correct_index = 3;
     */
    correctIndex: number;
    /**
     * @generated from protobuf field: CardFaceProto correct_answer_face = 4;
     */
    correctAnswerFace?: CardFaceProto;
    /**
     * @generated from protobuf field: CardFaceProto wrong_answer_face = 5;
     */
    wrongAnswerFace?: CardFaceProto;
}
/**
 * @generated from protobuf message QuestionBlockOptionProto
 */
export interface QuestionBlockOptionProto {
    /**
     * @generated from protobuf field: string label = 1;
     */
    label: string;
    /**
     * @generated from protobuf field: float fraction = 2;
     */
    fraction: number;
}
/**
 * @generated from protobuf message QuestionBlockProto
 */
export interface QuestionBlockProto {
    /**
     * @generated from protobuf field: float scale = 1;
     */
    scale: number;
    /**
     * @generated from protobuf field: repeated QuestionBlockOptionProto options = 2;
     */
    options: QuestionBlockOptionProto[];
    /**
     * @generated from protobuf field: int32 correct_index = 3;
     */
    correctIndex: number;
    /**
     * @generated from protobuf field: CardFaceProto correct_answer_face = 4;
     */
    correctAnswerFace?: CardFaceProto;
    /**
     * @generated from protobuf field: CardFaceProto wrong_answer_face = 5;
     */
    wrongAnswerFace?: CardFaceProto;
}
/**
 * @generated from protobuf message PromptBlockProto
 */
export interface PromptBlockProto {
    /**
     * @generated from protobuf field: string label = 1;
     */
    label: string;
    /**
     * @generated from protobuf field: CardFaceProto back_face = 2;
     */
    backFace?: CardFaceProto;
}
/**
 * @generated from protobuf message RevealBackBlockProto
 */
export interface RevealBackBlockProto {
    /**
     * @generated from protobuf field: string label = 1;
     */
    label: string;
    /**
     * @generated from protobuf field: CardFaceProto back_face = 2;
     */
    backFace?: CardFaceProto;
}
/**
 * @generated from protobuf message ChatbotBlockProto
 */
export interface ChatbotBlockProto {
    /**
     * @generated from protobuf field: string bot_id = 1;
     */
    botId: string;
}
/**
 * @generated from protobuf enum CardTypeProto
 */
export enum CardTypeProto {
    /**
     * @generated from protobuf enum value: UNKNOWN = 0;
     */
    UNKNOWN = 0,
    /**
     * @generated from protobuf enum value: STATIC = 2;
     */
    STATIC = 2,
    /**
     * @generated from protobuf enum value: TRUE_FALSE = 3;
     */
    TRUE_FALSE = 3,
    /**
     * @generated from protobuf enum value: ABC = 4;
     */
    ABC = 4
}
/**
 * @generated from protobuf enum FontNameProto
 */
export enum FontNameProto {
    /**
     * @generated from protobuf enum value: FONT_NAME_PROTO_TEXT = 0;
     */
    TEXT = 0,
    /**
     * @generated from protobuf enum value: FONT_NAME_PROTO_DISPLAY = 1;
     */
    DISPLAY = 1
}
/**
 * @generated from protobuf enum FontWeightProto
 */
export enum FontWeightProto {
    /**
     * @generated from protobuf enum value: FONT_WEIGHT_PROTO_NORMAL = 0;
     */
    NORMAL = 0,
    /**
     * @generated from protobuf enum value: FONT_WEIGHT_PROTO_BOLD = 1;
     */
    BOLD = 1
}
/**
 * @generated from protobuf enum FontStyleProto
 */
export enum FontStyleProto {
    /**
     * @generated from protobuf enum value: FONT_STYLE_PROTO_NORMAL = 0;
     */
    NORMAL = 0,
    /**
     * @generated from protobuf enum value: FONT_STYLE_PROTO_ITALIC = 1;
     */
    ITALIC = 1
}
/**
 * @generated from protobuf enum TextDecorationProto
 */
export enum TextDecorationProto {
    /**
     * @generated from protobuf enum value: TEXT_DECORATION_PROTO_NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: TEXT_DECORATION_PROTO_UNDERLINE = 1;
     */
    UNDERLINE = 1,
    /**
     * @generated from protobuf enum value: TEXT_DECORATION_PROTO_LINE_THROUGH = 2;
     */
    LINE_THROUGH = 2
}
/**
 * @generated from protobuf enum TextAlignmentProto
 */
export enum TextAlignmentProto {
    /**
     * @generated from protobuf enum value: TEXT_ALIGNMENT_PROTO_LEFT = 0;
     */
    LEFT = 0,
    /**
     * @generated from protobuf enum value: TEXT_ALIGNMENT_PROTO_CENTER = 1;
     */
    CENTER = 1,
    /**
     * @generated from protobuf enum value: TEXT_ALIGNMENT_PROTO_RIGHT = 2;
     */
    RIGHT = 2,
    /**
     * @generated from protobuf enum value: TEXT_ALIGNMENT_PROTO_JUSTIFY = 3;
     */
    JUSTIFY = 3
}
/**
 * @generated from protobuf enum TextWhitespaceProto
 */
export enum TextWhitespaceProto {
    /**
     * @generated from protobuf enum value: TEXT_WHITESPACE_PROTO_NORMAL = 0;
     */
    NORMAL = 0,
    /**
     * @generated from protobuf enum value: TEXT_WHITESPACE_PROTO_PRE_WRAP = 1;
     */
    PRE_WRAP = 1
}
/**
 * @generated from protobuf enum TextHyphensProto
 */
export enum TextHyphensProto {
    /**
     * @generated from protobuf enum value: TEXT_HYPHENS_PROTO_NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: TEXT_HYPHENS_PROTO_MANUAL = 1;
     */
    MANUAL = 1,
    /**
     * @generated from protobuf enum value: TEXT_HYPHENS_PROTO_AUTO = 2;
     */
    AUTO = 2
}
// @generated message type with reflection information, may provide speed optimized methods
class GetStoriesRequestProto$Type extends MessageType<GetStoriesRequestProto> {
    constructor() {
        super("GetStoriesRequestProto", [
            { no: 1, name: "last_modified_after", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<GetStoriesRequestProto>): GetStoriesRequestProto {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetStoriesRequestProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetStoriesRequestProto): GetStoriesRequestProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Timestamp last_modified_after */ 1:
                    message.lastModifiedAfter = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.lastModifiedAfter);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetStoriesRequestProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.Timestamp last_modified_after = 1; */
        if (message.lastModifiedAfter)
            Timestamp.internalBinaryWrite(message.lastModifiedAfter, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetStoriesRequestProto
 */
export const GetStoriesRequestProto = new GetStoriesRequestProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetStoriesResponseProto$Type extends MessageType<GetStoriesResponseProto> {
    constructor() {
        super("GetStoriesResponseProto", [
            { no: 1, name: "stories", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => StoryProto },
            { no: 2, name: "deleted_story_id", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "last_modified_at", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<GetStoriesResponseProto>): GetStoriesResponseProto {
        const message = { stories: [], deletedStoryId: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetStoriesResponseProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetStoriesResponseProto): GetStoriesResponseProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated StoryProto stories */ 1:
                    message.stories.push(StoryProto.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated string deleted_story_id */ 2:
                    message.deletedStoryId.push(reader.string());
                    break;
                case /* google.protobuf.Timestamp last_modified_at */ 3:
                    message.lastModifiedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.lastModifiedAt);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetStoriesResponseProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated StoryProto stories = 1; */
        for (let i = 0; i < message.stories.length; i++)
            StoryProto.internalBinaryWrite(message.stories[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated string deleted_story_id = 2; */
        for (let i = 0; i < message.deletedStoryId.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.deletedStoryId[i]);
        /* google.protobuf.Timestamp last_modified_at = 3; */
        if (message.lastModifiedAt)
            Timestamp.internalBinaryWrite(message.lastModifiedAt, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetStoriesResponseProto
 */
export const GetStoriesResponseProto = new GetStoriesResponseProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateStoryRequestProto$Type extends MessageType<CreateStoryRequestProto> {
    constructor() {
        super("CreateStoryRequestProto", [
            { no: 1, name: "cards", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => CardProto }
        ]);
    }
    create(value?: PartialMessage<CreateStoryRequestProto>): CreateStoryRequestProto {
        const message = { cards: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateStoryRequestProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateStoryRequestProto): CreateStoryRequestProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated CardProto cards */ 1:
                    message.cards.push(CardProto.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateStoryRequestProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated CardProto cards = 1; */
        for (let i = 0; i < message.cards.length; i++)
            CardProto.internalBinaryWrite(message.cards[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CreateStoryRequestProto
 */
export const CreateStoryRequestProto = new CreateStoryRequestProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateStoryResponseProto$Type extends MessageType<CreateStoryResponseProto> {
    constructor() {
        super("CreateStoryResponseProto", [
            { no: 1, name: "story_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateStoryResponseProto>): CreateStoryResponseProto {
        const message = { storyId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateStoryResponseProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateStoryResponseProto): CreateStoryResponseProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string story_id */ 1:
                    message.storyId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateStoryResponseProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string story_id = 1; */
        if (message.storyId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.storyId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CreateStoryResponseProto
 */
export const CreateStoryResponseProto = new CreateStoryResponseProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateStoryRequestProto$Type extends MessageType<UpdateStoryRequestProto> {
    constructor() {
        super("UpdateStoryRequestProto", [
            { no: 1, name: "story_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "cards", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => CardProto }
        ]);
    }
    create(value?: PartialMessage<UpdateStoryRequestProto>): UpdateStoryRequestProto {
        const message = { storyId: "", cards: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdateStoryRequestProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateStoryRequestProto): UpdateStoryRequestProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string story_id */ 1:
                    message.storyId = reader.string();
                    break;
                case /* repeated CardProto cards */ 2:
                    message.cards.push(CardProto.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateStoryRequestProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string story_id = 1; */
        if (message.storyId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.storyId);
        /* repeated CardProto cards = 2; */
        for (let i = 0; i < message.cards.length; i++)
            CardProto.internalBinaryWrite(message.cards[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message UpdateStoryRequestProto
 */
export const UpdateStoryRequestProto = new UpdateStoryRequestProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateStoryResponseProto$Type extends MessageType<UpdateStoryResponseProto> {
    constructor() {
        super("UpdateStoryResponseProto", []);
    }
    create(value?: PartialMessage<UpdateStoryResponseProto>): UpdateStoryResponseProto {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdateStoryResponseProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateStoryResponseProto): UpdateStoryResponseProto {
        return target ?? this.create();
    }
    internalBinaryWrite(message: UpdateStoryResponseProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message UpdateStoryResponseProto
 */
export const UpdateStoryResponseProto = new UpdateStoryResponseProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteStoryRequestProto$Type extends MessageType<DeleteStoryRequestProto> {
    constructor() {
        super("DeleteStoryRequestProto", [
            { no: 1, name: "story_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteStoryRequestProto>): DeleteStoryRequestProto {
        const message = { storyId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DeleteStoryRequestProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteStoryRequestProto): DeleteStoryRequestProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string story_id */ 1:
                    message.storyId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteStoryRequestProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string story_id = 1; */
        if (message.storyId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.storyId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DeleteStoryRequestProto
 */
export const DeleteStoryRequestProto = new DeleteStoryRequestProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteStoryResponseProto$Type extends MessageType<DeleteStoryResponseProto> {
    constructor() {
        super("DeleteStoryResponseProto", []);
    }
    create(value?: PartialMessage<DeleteStoryResponseProto>): DeleteStoryResponseProto {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DeleteStoryResponseProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteStoryResponseProto): DeleteStoryResponseProto {
        return target ?? this.create();
    }
    internalBinaryWrite(message: DeleteStoryResponseProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DeleteStoryResponseProto
 */
export const DeleteStoryResponseProto = new DeleteStoryResponseProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StoryApiRequestProto$Type extends MessageType<StoryApiRequestProto> {
    constructor() {
        super("StoryApiRequestProto", [
            { no: 1, name: "get_stories", kind: "message", oneof: "request", T: () => GetStoriesRequestProto },
            { no: 2, name: "create_story", kind: "message", oneof: "request", T: () => CreateStoryRequestProto },
            { no: 3, name: "update_story", kind: "message", oneof: "request", T: () => UpdateStoryRequestProto },
            { no: 4, name: "delete_story", kind: "message", oneof: "request", T: () => DeleteStoryRequestProto }
        ]);
    }
    create(value?: PartialMessage<StoryApiRequestProto>): StoryApiRequestProto {
        const message = { request: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StoryApiRequestProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StoryApiRequestProto): StoryApiRequestProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* GetStoriesRequestProto get_stories */ 1:
                    message.request = {
                        oneofKind: "getStories",
                        getStories: GetStoriesRequestProto.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).getStories)
                    };
                    break;
                case /* CreateStoryRequestProto create_story */ 2:
                    message.request = {
                        oneofKind: "createStory",
                        createStory: CreateStoryRequestProto.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).createStory)
                    };
                    break;
                case /* UpdateStoryRequestProto update_story */ 3:
                    message.request = {
                        oneofKind: "updateStory",
                        updateStory: UpdateStoryRequestProto.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).updateStory)
                    };
                    break;
                case /* DeleteStoryRequestProto delete_story */ 4:
                    message.request = {
                        oneofKind: "deleteStory",
                        deleteStory: DeleteStoryRequestProto.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).deleteStory)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StoryApiRequestProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* GetStoriesRequestProto get_stories = 1; */
        if (message.request.oneofKind === "getStories")
            GetStoriesRequestProto.internalBinaryWrite(message.request.getStories, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* CreateStoryRequestProto create_story = 2; */
        if (message.request.oneofKind === "createStory")
            CreateStoryRequestProto.internalBinaryWrite(message.request.createStory, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* UpdateStoryRequestProto update_story = 3; */
        if (message.request.oneofKind === "updateStory")
            UpdateStoryRequestProto.internalBinaryWrite(message.request.updateStory, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* DeleteStoryRequestProto delete_story = 4; */
        if (message.request.oneofKind === "deleteStory")
            DeleteStoryRequestProto.internalBinaryWrite(message.request.deleteStory, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message StoryApiRequestProto
 */
export const StoryApiRequestProto = new StoryApiRequestProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StoryApiResponseProto$Type extends MessageType<StoryApiResponseProto> {
    constructor() {
        super("StoryApiResponseProto", [
            { no: 1, name: "get_stories", kind: "message", oneof: "response", T: () => GetStoriesResponseProto },
            { no: 2, name: "create_story", kind: "message", oneof: "response", T: () => CreateStoryResponseProto },
            { no: 3, name: "update_story", kind: "message", oneof: "response", T: () => UpdateStoryResponseProto },
            { no: 4, name: "delete_story", kind: "message", oneof: "response", T: () => DeleteStoryResponseProto },
            { no: 5, name: "latencies", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => Duration } }
        ]);
    }
    create(value?: PartialMessage<StoryApiResponseProto>): StoryApiResponseProto {
        const message = { response: { oneofKind: undefined }, latencies: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StoryApiResponseProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StoryApiResponseProto): StoryApiResponseProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* GetStoriesResponseProto get_stories */ 1:
                    message.response = {
                        oneofKind: "getStories",
                        getStories: GetStoriesResponseProto.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).getStories)
                    };
                    break;
                case /* CreateStoryResponseProto create_story */ 2:
                    message.response = {
                        oneofKind: "createStory",
                        createStory: CreateStoryResponseProto.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).createStory)
                    };
                    break;
                case /* UpdateStoryResponseProto update_story */ 3:
                    message.response = {
                        oneofKind: "updateStory",
                        updateStory: UpdateStoryResponseProto.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).updateStory)
                    };
                    break;
                case /* DeleteStoryResponseProto delete_story */ 4:
                    message.response = {
                        oneofKind: "deleteStory",
                        deleteStory: DeleteStoryResponseProto.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).deleteStory)
                    };
                    break;
                case /* map<string, google.protobuf.Duration> latencies */ 5:
                    this.binaryReadMap5(message.latencies, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap5(map: StoryApiResponseProto["latencies"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof StoryApiResponseProto["latencies"] | undefined, val: StoryApiResponseProto["latencies"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = Duration.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field StoryApiResponseProto.latencies");
            }
        }
        map[key ?? ""] = val ?? Duration.create();
    }
    internalBinaryWrite(message: StoryApiResponseProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* GetStoriesResponseProto get_stories = 1; */
        if (message.response.oneofKind === "getStories")
            GetStoriesResponseProto.internalBinaryWrite(message.response.getStories, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* CreateStoryResponseProto create_story = 2; */
        if (message.response.oneofKind === "createStory")
            CreateStoryResponseProto.internalBinaryWrite(message.response.createStory, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* UpdateStoryResponseProto update_story = 3; */
        if (message.response.oneofKind === "updateStory")
            UpdateStoryResponseProto.internalBinaryWrite(message.response.updateStory, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* DeleteStoryResponseProto delete_story = 4; */
        if (message.response.oneofKind === "deleteStory")
            DeleteStoryResponseProto.internalBinaryWrite(message.response.deleteStory, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* map<string, google.protobuf.Duration> latencies = 5; */
        for (let k of Object.keys(message.latencies)) {
            writer.tag(5, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            Duration.internalBinaryWrite(message.latencies[k], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message StoryApiResponseProto
 */
export const StoryApiResponseProto = new StoryApiResponseProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StoryDataProto$Type extends MessageType<StoryDataProto> {
    constructor() {
        super("StoryDataProto", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "author_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "timestamp_millis", kind: "scalar", T: 3 /*ScalarType.INT64*/ },
            { no: 4, name: "cards_data", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => CardDataProto }
        ]);
    }
    create(value?: PartialMessage<StoryDataProto>): StoryDataProto {
        const message = { id: "", authorId: "", timestampMillis: "0", cardsData: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StoryDataProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StoryDataProto): StoryDataProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string author_id */ 2:
                    message.authorId = reader.string();
                    break;
                case /* int64 timestamp_millis */ 3:
                    message.timestampMillis = reader.int64().toString();
                    break;
                case /* repeated CardDataProto cards_data */ 4:
                    message.cardsData.push(CardDataProto.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StoryDataProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string author_id = 2; */
        if (message.authorId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.authorId);
        /* int64 timestamp_millis = 3; */
        if (message.timestampMillis !== "0")
            writer.tag(3, WireType.Varint).int64(message.timestampMillis);
        /* repeated CardDataProto cards_data = 4; */
        for (let i = 0; i < message.cardsData.length; i++)
            CardDataProto.internalBinaryWrite(message.cardsData[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message StoryDataProto
 */
export const StoryDataProto = new StoryDataProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CardDataProto$Type extends MessageType<CardDataProto> {
    constructor() {
        super("CardDataProto", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "card_type", kind: "enum", T: () => ["CardTypeProto", CardTypeProto] },
            { no: 3, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "body", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "is_true", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "options", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "correct_option_index", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "explanation", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "image_ref", kind: "message", T: () => ImageRefProto },
            { no: 10, name: "hash_tags", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CardDataProto>): CardDataProto {
        const message = { id: "", cardType: 0, title: "", body: "", isTrue: false, options: [], correctOptionIndex: 0, explanation: "", hashTags: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CardDataProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CardDataProto): CardDataProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* CardTypeProto card_type */ 2:
                    message.cardType = reader.int32();
                    break;
                case /* string title */ 3:
                    message.title = reader.string();
                    break;
                case /* string body */ 4:
                    message.body = reader.string();
                    break;
                case /* bool is_true */ 5:
                    message.isTrue = reader.bool();
                    break;
                case /* repeated string options */ 6:
                    message.options.push(reader.string());
                    break;
                case /* int32 correct_option_index */ 7:
                    message.correctOptionIndex = reader.int32();
                    break;
                case /* string explanation */ 8:
                    message.explanation = reader.string();
                    break;
                case /* ImageRefProto image_ref */ 9:
                    message.imageRef = ImageRefProto.internalBinaryRead(reader, reader.uint32(), options, message.imageRef);
                    break;
                case /* repeated string hash_tags */ 10:
                    message.hashTags.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CardDataProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* CardTypeProto card_type = 2; */
        if (message.cardType !== 0)
            writer.tag(2, WireType.Varint).int32(message.cardType);
        /* string title = 3; */
        if (message.title !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.title);
        /* string body = 4; */
        if (message.body !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.body);
        /* bool is_true = 5; */
        if (message.isTrue !== false)
            writer.tag(5, WireType.Varint).bool(message.isTrue);
        /* repeated string options = 6; */
        for (let i = 0; i < message.options.length; i++)
            writer.tag(6, WireType.LengthDelimited).string(message.options[i]);
        /* int32 correct_option_index = 7; */
        if (message.correctOptionIndex !== 0)
            writer.tag(7, WireType.Varint).int32(message.correctOptionIndex);
        /* string explanation = 8; */
        if (message.explanation !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.explanation);
        /* ImageRefProto image_ref = 9; */
        if (message.imageRef)
            ImageRefProto.internalBinaryWrite(message.imageRef, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* repeated string hash_tags = 10; */
        for (let i = 0; i < message.hashTags.length; i++)
            writer.tag(10, WireType.LengthDelimited).string(message.hashTags[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CardDataProto
 */
export const CardDataProto = new CardDataProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StoryRecsProto$Type extends MessageType<StoryRecsProto> {
    constructor() {
        super("StoryRecsProto", [
            { no: 1, name: "story_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "general_topics", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "topics", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<StoryRecsProto>): StoryRecsProto {
        const message = { storyId: "", generalTopics: [], topics: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StoryRecsProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StoryRecsProto): StoryRecsProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string story_id */ 1:
                    message.storyId = reader.string();
                    break;
                case /* repeated string general_topics */ 2:
                    message.generalTopics.push(reader.string());
                    break;
                case /* repeated string topics */ 3:
                    message.topics.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StoryRecsProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string story_id = 1; */
        if (message.storyId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.storyId);
        /* repeated string general_topics = 2; */
        for (let i = 0; i < message.generalTopics.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.generalTopics[i]);
        /* repeated string topics = 3; */
        for (let i = 0; i < message.topics.length; i++)
            writer.tag(3, WireType.LengthDelimited).string(message.topics[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message StoryRecsProto
 */
export const StoryRecsProto = new StoryRecsProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StoriesProto$Type extends MessageType<StoriesProto> {
    constructor() {
        super("StoriesProto", [
            { no: 1, name: "timestamp", kind: "message", T: () => Timestamp },
            { no: 2, name: "stories", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => StoryProto }
        ]);
    }
    create(value?: PartialMessage<StoriesProto>): StoriesProto {
        const message = { stories: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StoriesProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StoriesProto): StoriesProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Timestamp timestamp */ 1:
                    message.timestamp = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.timestamp);
                    break;
                case /* repeated StoryProto stories */ 2:
                    message.stories.push(StoryProto.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StoriesProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.Timestamp timestamp = 1; */
        if (message.timestamp)
            Timestamp.internalBinaryWrite(message.timestamp, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated StoryProto stories = 2; */
        for (let i = 0; i < message.stories.length; i++)
            StoryProto.internalBinaryWrite(message.stories[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message StoriesProto
 */
export const StoriesProto = new StoriesProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StoryProto$Type extends MessageType<StoryProto> {
    constructor() {
        super("StoryProto", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "created_by", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "created_at", kind: "message", T: () => Timestamp },
            { no: 4, name: "last_modified_by", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "last_modified_at", kind: "message", T: () => Timestamp },
            { no: 6, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "cards", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => CardProto },
            { no: 8, name: "story_data", kind: "message", T: () => StoryDataProto },
            { no: 9, name: "story_recs", kind: "message", T: () => StoryRecsProto }
        ]);
    }
    create(value?: PartialMessage<StoryProto>): StoryProto {
        const message = { id: "", createdBy: "", lastModifiedBy: "", title: "", cards: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StoryProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StoryProto): StoryProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string created_by */ 2:
                    message.createdBy = reader.string();
                    break;
                case /* google.protobuf.Timestamp created_at */ 3:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* string last_modified_by */ 4:
                    message.lastModifiedBy = reader.string();
                    break;
                case /* google.protobuf.Timestamp last_modified_at */ 5:
                    message.lastModifiedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.lastModifiedAt);
                    break;
                case /* string title */ 6:
                    message.title = reader.string();
                    break;
                case /* repeated CardProto cards */ 7:
                    message.cards.push(CardProto.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* StoryDataProto story_data */ 8:
                    message.storyData = StoryDataProto.internalBinaryRead(reader, reader.uint32(), options, message.storyData);
                    break;
                case /* StoryRecsProto story_recs */ 9:
                    message.storyRecs = StoryRecsProto.internalBinaryRead(reader, reader.uint32(), options, message.storyRecs);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StoryProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string created_by = 2; */
        if (message.createdBy !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.createdBy);
        /* google.protobuf.Timestamp created_at = 3; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* string last_modified_by = 4; */
        if (message.lastModifiedBy !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.lastModifiedBy);
        /* google.protobuf.Timestamp last_modified_at = 5; */
        if (message.lastModifiedAt)
            Timestamp.internalBinaryWrite(message.lastModifiedAt, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* string title = 6; */
        if (message.title !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.title);
        /* repeated CardProto cards = 7; */
        for (let i = 0; i < message.cards.length; i++)
            CardProto.internalBinaryWrite(message.cards[i], writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* StoryDataProto story_data = 8; */
        if (message.storyData)
            StoryDataProto.internalBinaryWrite(message.storyData, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* StoryRecsProto story_recs = 9; */
        if (message.storyRecs)
            StoryRecsProto.internalBinaryWrite(message.storyRecs, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message StoryProto
 */
export const StoryProto = new StoryProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CardProto$Type extends MessageType<CardProto> {
    constructor() {
        super("CardProto", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "front_face", kind: "message", T: () => CardFaceProto }
        ]);
    }
    create(value?: PartialMessage<CardProto>): CardProto {
        const message = { id: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CardProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CardProto): CardProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* CardFaceProto front_face */ 2:
                    message.frontFace = CardFaceProto.internalBinaryRead(reader, reader.uint32(), options, message.frontFace);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CardProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* CardFaceProto front_face = 2; */
        if (message.frontFace)
            CardFaceProto.internalBinaryWrite(message.frontFace, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CardProto
 */
export const CardProto = new CardProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CardFaceProto$Type extends MessageType<CardFaceProto> {
    constructor() {
        super("CardFaceProto", [
            { no: 1, name: "blocks", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => CardBlockProto },
            { no: 2, name: "hash_tags", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CardFaceProto>): CardFaceProto {
        const message = { blocks: [], hashTags: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CardFaceProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CardFaceProto): CardFaceProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated CardBlockProto blocks */ 1:
                    message.blocks.push(CardBlockProto.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated string hash_tags */ 2:
                    message.hashTags.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CardFaceProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated CardBlockProto blocks = 1; */
        for (let i = 0; i < message.blocks.length; i++)
            CardBlockProto.internalBinaryWrite(message.blocks[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated string hash_tags = 2; */
        for (let i = 0; i < message.hashTags.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.hashTags[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CardFaceProto
 */
export const CardFaceProto = new CardFaceProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CardBlockProto$Type extends MessageType<CardBlockProto> {
    constructor() {
        super("CardBlockProto", [
            { no: 1, name: "space", kind: "message", oneof: "type", T: () => SpaceBlockProto },
            { no: 2, name: "image", kind: "message", oneof: "type", T: () => ImageBlockProto },
            { no: 3, name: "text", kind: "message", oneof: "type", T: () => TextBlockProto },
            { no: 4, name: "flip", kind: "message", oneof: "type", T: () => FlipBlockProto },
            { no: 5, name: "coffee", kind: "message", oneof: "type", T: () => CoffeeBlockProto },
            { no: 6, name: "reveal", kind: "message", oneof: "type", T: () => RevealBlockProto },
            { no: 7, name: "choice", kind: "message", oneof: "type", T: () => ChoiceBlockProto },
            { no: 8, name: "question", kind: "message", oneof: "type", T: () => QuestionBlockProto },
            { no: 9, name: "prompt", kind: "message", oneof: "type", T: () => PromptBlockProto },
            { no: 10, name: "reveal_back", kind: "message", oneof: "type", T: () => RevealBackBlockProto },
            { no: 11, name: "chat_bot", kind: "message", oneof: "type", T: () => ChatbotBlockProto }
        ]);
    }
    create(value?: PartialMessage<CardBlockProto>): CardBlockProto {
        const message = { type: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CardBlockProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CardBlockProto): CardBlockProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* SpaceBlockProto space */ 1:
                    message.type = {
                        oneofKind: "space",
                        space: SpaceBlockProto.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).space)
                    };
                    break;
                case /* ImageBlockProto image */ 2:
                    message.type = {
                        oneofKind: "image",
                        image: ImageBlockProto.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).image)
                    };
                    break;
                case /* TextBlockProto text */ 3:
                    message.type = {
                        oneofKind: "text",
                        text: TextBlockProto.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).text)
                    };
                    break;
                case /* FlipBlockProto flip */ 4:
                    message.type = {
                        oneofKind: "flip",
                        flip: FlipBlockProto.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).flip)
                    };
                    break;
                case /* CoffeeBlockProto coffee */ 5:
                    message.type = {
                        oneofKind: "coffee",
                        coffee: CoffeeBlockProto.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).coffee)
                    };
                    break;
                case /* RevealBlockProto reveal */ 6:
                    message.type = {
                        oneofKind: "reveal",
                        reveal: RevealBlockProto.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).reveal)
                    };
                    break;
                case /* ChoiceBlockProto choice */ 7:
                    message.type = {
                        oneofKind: "choice",
                        choice: ChoiceBlockProto.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).choice)
                    };
                    break;
                case /* QuestionBlockProto question */ 8:
                    message.type = {
                        oneofKind: "question",
                        question: QuestionBlockProto.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).question)
                    };
                    break;
                case /* PromptBlockProto prompt */ 9:
                    message.type = {
                        oneofKind: "prompt",
                        prompt: PromptBlockProto.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).prompt)
                    };
                    break;
                case /* RevealBackBlockProto reveal_back */ 10:
                    message.type = {
                        oneofKind: "revealBack",
                        revealBack: RevealBackBlockProto.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).revealBack)
                    };
                    break;
                case /* ChatbotBlockProto chat_bot */ 11:
                    message.type = {
                        oneofKind: "chatBot",
                        chatBot: ChatbotBlockProto.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).chatBot)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CardBlockProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* SpaceBlockProto space = 1; */
        if (message.type.oneofKind === "space")
            SpaceBlockProto.internalBinaryWrite(message.type.space, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* ImageBlockProto image = 2; */
        if (message.type.oneofKind === "image")
            ImageBlockProto.internalBinaryWrite(message.type.image, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* TextBlockProto text = 3; */
        if (message.type.oneofKind === "text")
            TextBlockProto.internalBinaryWrite(message.type.text, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* FlipBlockProto flip = 4; */
        if (message.type.oneofKind === "flip")
            FlipBlockProto.internalBinaryWrite(message.type.flip, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* CoffeeBlockProto coffee = 5; */
        if (message.type.oneofKind === "coffee")
            CoffeeBlockProto.internalBinaryWrite(message.type.coffee, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* RevealBlockProto reveal = 6; */
        if (message.type.oneofKind === "reveal")
            RevealBlockProto.internalBinaryWrite(message.type.reveal, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* ChoiceBlockProto choice = 7; */
        if (message.type.oneofKind === "choice")
            ChoiceBlockProto.internalBinaryWrite(message.type.choice, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* QuestionBlockProto question = 8; */
        if (message.type.oneofKind === "question")
            QuestionBlockProto.internalBinaryWrite(message.type.question, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* PromptBlockProto prompt = 9; */
        if (message.type.oneofKind === "prompt")
            PromptBlockProto.internalBinaryWrite(message.type.prompt, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* RevealBackBlockProto reveal_back = 10; */
        if (message.type.oneofKind === "revealBack")
            RevealBackBlockProto.internalBinaryWrite(message.type.revealBack, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* ChatbotBlockProto chat_bot = 11; */
        if (message.type.oneofKind === "chatBot")
            ChatbotBlockProto.internalBinaryWrite(message.type.chatBot, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CardBlockProto
 */
export const CardBlockProto = new CardBlockProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SpaceBlockProto$Type extends MessageType<SpaceBlockProto> {
    constructor() {
        super("SpaceBlockProto", [
            { no: 1, name: "scale", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<SpaceBlockProto>): SpaceBlockProto {
        const message = { scale: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SpaceBlockProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SpaceBlockProto): SpaceBlockProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* float scale */ 1:
                    message.scale = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SpaceBlockProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* float scale = 1; */
        if (message.scale !== 0)
            writer.tag(1, WireType.Bit32).float(message.scale);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SpaceBlockProto
 */
export const SpaceBlockProto = new SpaceBlockProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ImageRefProto$Type extends MessageType<ImageRefProto> {
    constructor() {
        super("ImageRefProto", [
            { no: 1, name: "storage_path", kind: "scalar", oneof: "type", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "image_data", kind: "scalar", oneof: "type", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<ImageRefProto>): ImageRefProto {
        const message = { type: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ImageRefProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ImageRefProto): ImageRefProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string storage_path */ 1:
                    message.type = {
                        oneofKind: "storagePath",
                        storagePath: reader.string()
                    };
                    break;
                case /* bytes image_data */ 2:
                    message.type = {
                        oneofKind: "imageData",
                        imageData: reader.bytes()
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ImageRefProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string storage_path = 1; */
        if (message.type.oneofKind === "storagePath")
            writer.tag(1, WireType.LengthDelimited).string(message.type.storagePath);
        /* bytes image_data = 2; */
        if (message.type.oneofKind === "imageData")
            writer.tag(2, WireType.LengthDelimited).bytes(message.type.imageData);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ImageRefProto
 */
export const ImageRefProto = new ImageRefProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ImageBlockProto$Type extends MessageType<ImageBlockProto> {
    constructor() {
        super("ImageBlockProto", [
            { no: 1, name: "image_ref", kind: "message", T: () => ImageRefProto },
            { no: 2, name: "scale", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 3, name: "border_radius", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<ImageBlockProto>): ImageBlockProto {
        const message = { scale: 0, borderRadius: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ImageBlockProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ImageBlockProto): ImageBlockProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ImageRefProto image_ref */ 1:
                    message.imageRef = ImageRefProto.internalBinaryRead(reader, reader.uint32(), options, message.imageRef);
                    break;
                case /* float scale */ 2:
                    message.scale = reader.float();
                    break;
                case /* float border_radius */ 3:
                    message.borderRadius = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ImageBlockProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* ImageRefProto image_ref = 1; */
        if (message.imageRef)
            ImageRefProto.internalBinaryWrite(message.imageRef, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* float scale = 2; */
        if (message.scale !== 0)
            writer.tag(2, WireType.Bit32).float(message.scale);
        /* float border_radius = 3; */
        if (message.borderRadius !== 0)
            writer.tag(3, WireType.Bit32).float(message.borderRadius);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ImageBlockProto
 */
export const ImageBlockProto = new ImageBlockProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TextSpanProto$Type extends MessageType<TextSpanProto> {
    constructor() {
        super("TextSpanProto", [
            { no: 1, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "font_weight", kind: "enum", T: () => ["FontWeightProto", FontWeightProto, "FONT_WEIGHT_PROTO_"] },
            { no: 3, name: "font_style", kind: "enum", T: () => ["FontStyleProto", FontStyleProto, "FONT_STYLE_PROTO_"] },
            { no: 4, name: "decoration", kind: "enum", T: () => ["TextDecorationProto", TextDecorationProto, "TEXT_DECORATION_PROTO_"] }
        ]);
    }
    create(value?: PartialMessage<TextSpanProto>): TextSpanProto {
        const message = { text: "", fontWeight: 0, fontStyle: 0, decoration: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TextSpanProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TextSpanProto): TextSpanProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string text */ 1:
                    message.text = reader.string();
                    break;
                case /* FontWeightProto font_weight */ 2:
                    message.fontWeight = reader.int32();
                    break;
                case /* FontStyleProto font_style */ 3:
                    message.fontStyle = reader.int32();
                    break;
                case /* TextDecorationProto decoration */ 4:
                    message.decoration = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TextSpanProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string text = 1; */
        if (message.text !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.text);
        /* FontWeightProto font_weight = 2; */
        if (message.fontWeight !== 0)
            writer.tag(2, WireType.Varint).int32(message.fontWeight);
        /* FontStyleProto font_style = 3; */
        if (message.fontStyle !== 0)
            writer.tag(3, WireType.Varint).int32(message.fontStyle);
        /* TextDecorationProto decoration = 4; */
        if (message.decoration !== 0)
            writer.tag(4, WireType.Varint).int32(message.decoration);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TextSpanProto
 */
export const TextSpanProto = new TextSpanProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StyledTextProto$Type extends MessageType<StyledTextProto> {
    constructor() {
        super("StyledTextProto", [
            { no: 1, name: "spans", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => TextSpanProto },
            { no: 2, name: "font_name", kind: "enum", T: () => ["FontNameProto", FontNameProto, "FONT_NAME_PROTO_"] },
            { no: 3, name: "font_size", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 4, name: "padding_start", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 5, name: "padding_end", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 6, name: "align", kind: "enum", T: () => ["TextAlignmentProto", TextAlignmentProto, "TEXT_ALIGNMENT_PROTO_"] },
            { no: 7, name: "whitespace", kind: "enum", T: () => ["TextWhitespaceProto", TextWhitespaceProto, "TEXT_WHITESPACE_PROTO_"] },
            { no: 8, name: "hyphens", kind: "enum", T: () => ["TextHyphensProto", TextHyphensProto, "TEXT_HYPHENS_PROTO_"] }
        ]);
    }
    create(value?: PartialMessage<StyledTextProto>): StyledTextProto {
        const message = { spans: [], fontName: 0, fontSize: 0, paddingStart: 0, paddingEnd: 0, align: 0, whitespace: 0, hyphens: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StyledTextProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StyledTextProto): StyledTextProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated TextSpanProto spans */ 1:
                    message.spans.push(TextSpanProto.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* FontNameProto font_name */ 2:
                    message.fontName = reader.int32();
                    break;
                case /* float font_size */ 3:
                    message.fontSize = reader.float();
                    break;
                case /* float padding_start */ 4:
                    message.paddingStart = reader.float();
                    break;
                case /* float padding_end */ 5:
                    message.paddingEnd = reader.float();
                    break;
                case /* TextAlignmentProto align */ 6:
                    message.align = reader.int32();
                    break;
                case /* TextWhitespaceProto whitespace */ 7:
                    message.whitespace = reader.int32();
                    break;
                case /* TextHyphensProto hyphens */ 8:
                    message.hyphens = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StyledTextProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated TextSpanProto spans = 1; */
        for (let i = 0; i < message.spans.length; i++)
            TextSpanProto.internalBinaryWrite(message.spans[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* FontNameProto font_name = 2; */
        if (message.fontName !== 0)
            writer.tag(2, WireType.Varint).int32(message.fontName);
        /* float font_size = 3; */
        if (message.fontSize !== 0)
            writer.tag(3, WireType.Bit32).float(message.fontSize);
        /* float padding_start = 4; */
        if (message.paddingStart !== 0)
            writer.tag(4, WireType.Bit32).float(message.paddingStart);
        /* float padding_end = 5; */
        if (message.paddingEnd !== 0)
            writer.tag(5, WireType.Bit32).float(message.paddingEnd);
        /* TextAlignmentProto align = 6; */
        if (message.align !== 0)
            writer.tag(6, WireType.Varint).int32(message.align);
        /* TextWhitespaceProto whitespace = 7; */
        if (message.whitespace !== 0)
            writer.tag(7, WireType.Varint).int32(message.whitespace);
        /* TextHyphensProto hyphens = 8; */
        if (message.hyphens !== 0)
            writer.tag(8, WireType.Varint).int32(message.hyphens);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message StyledTextProto
 */
export const StyledTextProto = new StyledTextProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TextBlockProto$Type extends MessageType<TextBlockProto> {
    constructor() {
        super("TextBlockProto", [
            { no: 1, name: "styled_text", kind: "message", T: () => StyledTextProto }
        ]);
    }
    create(value?: PartialMessage<TextBlockProto>): TextBlockProto {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TextBlockProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TextBlockProto): TextBlockProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* StyledTextProto styled_text */ 1:
                    message.styledText = StyledTextProto.internalBinaryRead(reader, reader.uint32(), options, message.styledText);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TextBlockProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* StyledTextProto styled_text = 1; */
        if (message.styledText)
            StyledTextProto.internalBinaryWrite(message.styledText, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TextBlockProto
 */
export const TextBlockProto = new TextBlockProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FlipBlockProto$Type extends MessageType<FlipBlockProto> {
    constructor() {
        super("FlipBlockProto", [
            { no: 1, name: "label", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<FlipBlockProto>): FlipBlockProto {
        const message = { label: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FlipBlockProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FlipBlockProto): FlipBlockProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string label */ 1:
                    message.label = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FlipBlockProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string label = 1; */
        if (message.label !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.label);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message FlipBlockProto
 */
export const FlipBlockProto = new FlipBlockProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CoffeeBlockProto$Type extends MessageType<CoffeeBlockProto> {
    constructor() {
        super("CoffeeBlockProto", [
            { no: 1, name: "label", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "start_offset", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 3, name: "image_ref", kind: "message", T: () => ImageRefProto }
        ]);
    }
    create(value?: PartialMessage<CoffeeBlockProto>): CoffeeBlockProto {
        const message = { label: "", startOffset: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CoffeeBlockProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CoffeeBlockProto): CoffeeBlockProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string label */ 1:
                    message.label = reader.string();
                    break;
                case /* float start_offset */ 2:
                    message.startOffset = reader.float();
                    break;
                case /* ImageRefProto image_ref */ 3:
                    message.imageRef = ImageRefProto.internalBinaryRead(reader, reader.uint32(), options, message.imageRef);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CoffeeBlockProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string label = 1; */
        if (message.label !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.label);
        /* float start_offset = 2; */
        if (message.startOffset !== 0)
            writer.tag(2, WireType.Bit32).float(message.startOffset);
        /* ImageRefProto image_ref = 3; */
        if (message.imageRef)
            ImageRefProto.internalBinaryWrite(message.imageRef, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CoffeeBlockProto
 */
export const CoffeeBlockProto = new CoffeeBlockProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RevealBlockProto$Type extends MessageType<RevealBlockProto> {
    constructor() {
        super("RevealBlockProto", [
            { no: 1, name: "scale", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 2, name: "label", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "text", kind: "message", T: () => StyledTextProto }
        ]);
    }
    create(value?: PartialMessage<RevealBlockProto>): RevealBlockProto {
        const message = { scale: 0, label: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RevealBlockProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RevealBlockProto): RevealBlockProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* float scale */ 1:
                    message.scale = reader.float();
                    break;
                case /* string label */ 2:
                    message.label = reader.string();
                    break;
                case /* StyledTextProto text */ 3:
                    message.text = StyledTextProto.internalBinaryRead(reader, reader.uint32(), options, message.text);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RevealBlockProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* float scale = 1; */
        if (message.scale !== 0)
            writer.tag(1, WireType.Bit32).float(message.scale);
        /* string label = 2; */
        if (message.label !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.label);
        /* StyledTextProto text = 3; */
        if (message.text)
            StyledTextProto.internalBinaryWrite(message.text, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RevealBlockProto
 */
export const RevealBlockProto = new RevealBlockProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChoiceBlockOptionProto$Type extends MessageType<ChoiceBlockOptionProto> {
    constructor() {
        super("ChoiceBlockOptionProto", [
            { no: 1, name: "text", kind: "message", T: () => StyledTextProto },
            { no: 2, name: "fraction", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<ChoiceBlockOptionProto>): ChoiceBlockOptionProto {
        const message = { fraction: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChoiceBlockOptionProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChoiceBlockOptionProto): ChoiceBlockOptionProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* StyledTextProto text */ 1:
                    message.text = StyledTextProto.internalBinaryRead(reader, reader.uint32(), options, message.text);
                    break;
                case /* float fraction */ 2:
                    message.fraction = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChoiceBlockOptionProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* StyledTextProto text = 1; */
        if (message.text)
            StyledTextProto.internalBinaryWrite(message.text, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* float fraction = 2; */
        if (message.fraction !== 0)
            writer.tag(2, WireType.Bit32).float(message.fraction);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ChoiceBlockOptionProto
 */
export const ChoiceBlockOptionProto = new ChoiceBlockOptionProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChoiceBlockProto$Type extends MessageType<ChoiceBlockProto> {
    constructor() {
        super("ChoiceBlockProto", [
            { no: 1, name: "scale", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 2, name: "options", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ChoiceBlockOptionProto },
            { no: 3, name: "correct_index", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "correct_answer_face", kind: "message", T: () => CardFaceProto },
            { no: 5, name: "wrong_answer_face", kind: "message", T: () => CardFaceProto }
        ]);
    }
    create(value?: PartialMessage<ChoiceBlockProto>): ChoiceBlockProto {
        const message = { scale: 0, options: [], correctIndex: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChoiceBlockProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChoiceBlockProto): ChoiceBlockProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* float scale */ 1:
                    message.scale = reader.float();
                    break;
                case /* repeated ChoiceBlockOptionProto options */ 2:
                    message.options.push(ChoiceBlockOptionProto.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int32 correct_index */ 3:
                    message.correctIndex = reader.int32();
                    break;
                case /* CardFaceProto correct_answer_face */ 4:
                    message.correctAnswerFace = CardFaceProto.internalBinaryRead(reader, reader.uint32(), options, message.correctAnswerFace);
                    break;
                case /* CardFaceProto wrong_answer_face */ 5:
                    message.wrongAnswerFace = CardFaceProto.internalBinaryRead(reader, reader.uint32(), options, message.wrongAnswerFace);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChoiceBlockProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* float scale = 1; */
        if (message.scale !== 0)
            writer.tag(1, WireType.Bit32).float(message.scale);
        /* repeated ChoiceBlockOptionProto options = 2; */
        for (let i = 0; i < message.options.length; i++)
            ChoiceBlockOptionProto.internalBinaryWrite(message.options[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* int32 correct_index = 3; */
        if (message.correctIndex !== 0)
            writer.tag(3, WireType.Varint).int32(message.correctIndex);
        /* CardFaceProto correct_answer_face = 4; */
        if (message.correctAnswerFace)
            CardFaceProto.internalBinaryWrite(message.correctAnswerFace, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* CardFaceProto wrong_answer_face = 5; */
        if (message.wrongAnswerFace)
            CardFaceProto.internalBinaryWrite(message.wrongAnswerFace, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ChoiceBlockProto
 */
export const ChoiceBlockProto = new ChoiceBlockProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QuestionBlockOptionProto$Type extends MessageType<QuestionBlockOptionProto> {
    constructor() {
        super("QuestionBlockOptionProto", [
            { no: 1, name: "label", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "fraction", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<QuestionBlockOptionProto>): QuestionBlockOptionProto {
        const message = { label: "", fraction: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QuestionBlockOptionProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QuestionBlockOptionProto): QuestionBlockOptionProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string label */ 1:
                    message.label = reader.string();
                    break;
                case /* float fraction */ 2:
                    message.fraction = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QuestionBlockOptionProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string label = 1; */
        if (message.label !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.label);
        /* float fraction = 2; */
        if (message.fraction !== 0)
            writer.tag(2, WireType.Bit32).float(message.fraction);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message QuestionBlockOptionProto
 */
export const QuestionBlockOptionProto = new QuestionBlockOptionProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QuestionBlockProto$Type extends MessageType<QuestionBlockProto> {
    constructor() {
        super("QuestionBlockProto", [
            { no: 1, name: "scale", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 2, name: "options", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => QuestionBlockOptionProto },
            { no: 3, name: "correct_index", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "correct_answer_face", kind: "message", T: () => CardFaceProto },
            { no: 5, name: "wrong_answer_face", kind: "message", T: () => CardFaceProto }
        ]);
    }
    create(value?: PartialMessage<QuestionBlockProto>): QuestionBlockProto {
        const message = { scale: 0, options: [], correctIndex: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QuestionBlockProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QuestionBlockProto): QuestionBlockProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* float scale */ 1:
                    message.scale = reader.float();
                    break;
                case /* repeated QuestionBlockOptionProto options */ 2:
                    message.options.push(QuestionBlockOptionProto.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int32 correct_index */ 3:
                    message.correctIndex = reader.int32();
                    break;
                case /* CardFaceProto correct_answer_face */ 4:
                    message.correctAnswerFace = CardFaceProto.internalBinaryRead(reader, reader.uint32(), options, message.correctAnswerFace);
                    break;
                case /* CardFaceProto wrong_answer_face */ 5:
                    message.wrongAnswerFace = CardFaceProto.internalBinaryRead(reader, reader.uint32(), options, message.wrongAnswerFace);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QuestionBlockProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* float scale = 1; */
        if (message.scale !== 0)
            writer.tag(1, WireType.Bit32).float(message.scale);
        /* repeated QuestionBlockOptionProto options = 2; */
        for (let i = 0; i < message.options.length; i++)
            QuestionBlockOptionProto.internalBinaryWrite(message.options[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* int32 correct_index = 3; */
        if (message.correctIndex !== 0)
            writer.tag(3, WireType.Varint).int32(message.correctIndex);
        /* CardFaceProto correct_answer_face = 4; */
        if (message.correctAnswerFace)
            CardFaceProto.internalBinaryWrite(message.correctAnswerFace, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* CardFaceProto wrong_answer_face = 5; */
        if (message.wrongAnswerFace)
            CardFaceProto.internalBinaryWrite(message.wrongAnswerFace, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message QuestionBlockProto
 */
export const QuestionBlockProto = new QuestionBlockProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PromptBlockProto$Type extends MessageType<PromptBlockProto> {
    constructor() {
        super("PromptBlockProto", [
            { no: 1, name: "label", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "back_face", kind: "message", T: () => CardFaceProto }
        ]);
    }
    create(value?: PartialMessage<PromptBlockProto>): PromptBlockProto {
        const message = { label: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PromptBlockProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PromptBlockProto): PromptBlockProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string label */ 1:
                    message.label = reader.string();
                    break;
                case /* CardFaceProto back_face */ 2:
                    message.backFace = CardFaceProto.internalBinaryRead(reader, reader.uint32(), options, message.backFace);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PromptBlockProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string label = 1; */
        if (message.label !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.label);
        /* CardFaceProto back_face = 2; */
        if (message.backFace)
            CardFaceProto.internalBinaryWrite(message.backFace, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PromptBlockProto
 */
export const PromptBlockProto = new PromptBlockProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RevealBackBlockProto$Type extends MessageType<RevealBackBlockProto> {
    constructor() {
        super("RevealBackBlockProto", [
            { no: 1, name: "label", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "back_face", kind: "message", T: () => CardFaceProto }
        ]);
    }
    create(value?: PartialMessage<RevealBackBlockProto>): RevealBackBlockProto {
        const message = { label: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RevealBackBlockProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RevealBackBlockProto): RevealBackBlockProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string label */ 1:
                    message.label = reader.string();
                    break;
                case /* CardFaceProto back_face */ 2:
                    message.backFace = CardFaceProto.internalBinaryRead(reader, reader.uint32(), options, message.backFace);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RevealBackBlockProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string label = 1; */
        if (message.label !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.label);
        /* CardFaceProto back_face = 2; */
        if (message.backFace)
            CardFaceProto.internalBinaryWrite(message.backFace, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RevealBackBlockProto
 */
export const RevealBackBlockProto = new RevealBackBlockProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChatbotBlockProto$Type extends MessageType<ChatbotBlockProto> {
    constructor() {
        super("ChatbotBlockProto", [
            { no: 1, name: "bot_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ChatbotBlockProto>): ChatbotBlockProto {
        const message = { botId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChatbotBlockProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChatbotBlockProto): ChatbotBlockProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string bot_id */ 1:
                    message.botId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChatbotBlockProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string bot_id = 1; */
        if (message.botId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.botId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ChatbotBlockProto
 */
export const ChatbotBlockProto = new ChatbotBlockProto$Type();
