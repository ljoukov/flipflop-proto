/* eslint-disable */
// @generated by protobuf-ts 2.9.1 with parameter eslint_disable,long_type_string,ts_nocheck
// @generated from protobuf file "StoredPodcastProto.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { PodcastWordProto } from "./PodcastProto";
import { Duration } from "./google/protobuf/duration";
import { PodcastVisualTransitionProto } from "./PodcastProto";
import { PodcastHostProto } from "./PodcastProto";
import { LogProto } from "./LogProto";
import { PodcastPromptAnswerProto } from "./PodcastProto";
import { Timestamp } from "./google/protobuf/timestamp";
/**
 * @generated from protobuf message StoredPodcastProto
 */
export interface StoredPodcastProto {
    /**
     * @generated from protobuf field: string podcast_id = 1;
     */
    podcastId: string;
    /**
     * @generated from protobuf field: string created_by = 2;
     */
    createdBy: string;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp created_at = 3;
     */
    createdAt?: Timestamp;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp updated_at = 4;
     */
    updatedAt?: Timestamp;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp deleted_at = 16;
     */
    deletedAt?: Timestamp;
    /**
     * @generated from protobuf field: StoredPodcastUserInputProto user_input = 5;
     */
    userInput?: StoredPodcastUserInputProto;
    /**
     * @generated from protobuf field: StoredPodcastSuggestionInputProto suggestion_input = 15;
     */
    suggestionInput?: StoredPodcastSuggestionInputProto;
    /**
     * @generated from protobuf field: StoredPodcastStateProto state = 6;
     */
    state: StoredPodcastStateProto;
    /**
     * @generated from protobuf field: PodcastPromptAnswerProto answer = 7;
     */
    answer?: PodcastPromptAnswerProto;
    /**
     * @generated from protobuf field: StoredPodcastPointsProto points = 8;
     */
    points?: StoredPodcastPointsProto;
    /**
     * @generated from protobuf field: StoredPodcastPlanProto plan = 9;
     */
    plan?: StoredPodcastPlanProto;
    /**
     * @generated from protobuf field: StoredPodcastTranscriptProto transcript = 10;
     */
    transcript?: StoredPodcastTranscriptProto;
    /**
     * @generated from protobuf field: StoredPodcastAudioProto audio = 11;
     */
    audio?: StoredPodcastAudioProto;
    /**
     * @generated from protobuf field: StoredPodcastVisualsProto visuals = 12;
     */
    visuals?: StoredPodcastVisualsProto;
    /**
     * @generated from protobuf field: StoredPodcastKeyPointsProto key_points = 13;
     */
    keyPoints?: StoredPodcastKeyPointsProto;
    /**
     * @generated from protobuf field: StoredPodcastFollowupsProto followups = 14;
     */
    followups?: StoredPodcastFollowupsProto;
    /**
     * @generated from protobuf field: LogProto log = 101;
     */
    log?: LogProto;
}
/**
 * @generated from protobuf message StoredPodcastUserInputProto
 */
export interface StoredPodcastUserInputProto {
    /**
     * @generated from protobuf field: string prompt = 1;
     */
    prompt: string;
    /**
     * @generated from protobuf field: repeated string point_ids = 2;
     */
    pointIds: string[];
}
/**
 * @generated from protobuf message StoredPodcastSuggestionInputProto
 */
export interface StoredPodcastSuggestionInputProto {
    /**
     * @generated from protobuf field: string suggestion_section_id = 1;
     */
    suggestionSectionId: string;
    /**
     * @generated from protobuf field: string suggestion_section_reasoning = 2;
     */
    suggestionSectionReasoning: string;
    /**
     * @generated from protobuf field: string suggestion_title = 3;
     */
    suggestionTitle: string;
    /**
     * @generated from protobuf field: string suggestion_thumbnail_prompt = 4;
     */
    suggestionThumbnailPrompt: string;
}
/**
 * @generated from protobuf message StoredPodcastPointsProto
 */
export interface StoredPodcastPointsProto {
    /**
     * @generated from protobuf field: repeated StoredPodcastPointProto points = 1;
     */
    points: StoredPodcastPointProto[];
}
/**
 * @generated from protobuf message StoredPodcastPointProto
 */
export interface StoredPodcastPointProto {
    /**
     * @generated from protobuf field: string point_id = 1;
     */
    pointId: string;
    /**
     * @generated from protobuf field: string reasoning = 2;
     */
    reasoning: string;
    /**
     * @generated from protobuf field: string title = 3;
     */
    title: string;
    /**
     * @generated from protobuf field: string title_emoji = 4;
     */
    titleEmoji: string;
    /**
     * @generated from protobuf field: string outline = 5;
     */
    outline: string;
}
/**
 * @generated from protobuf message StoredPodcastPlanProto
 */
export interface StoredPodcastPlanProto {
    /**
     * @generated from protobuf field: string title = 1;
     */
    title: string;
    /**
     * @generated from protobuf field: string plan = 2;
     */
    plan: string;
}
/**
 * @generated from protobuf message StoredPodcastTranscriptProto
 */
export interface StoredPodcastTranscriptProto {
    /**
     * @generated from protobuf field: repeated StoredPodcastSectionTranscriptProto sections = 1;
     */
    sections: StoredPodcastSectionTranscriptProto[];
}
/**
 * @generated from protobuf message StoredPodcastSectionTranscriptProto
 */
export interface StoredPodcastSectionTranscriptProto {
    /**
     * @generated from protobuf field: StoredPodcastSectionTypeProto section_type = 1;
     */
    sectionType: StoredPodcastSectionTypeProto;
    /**
     * @generated from protobuf field: repeated StoredPodcastTranscriptEntryProto entries = 2;
     */
    entries: StoredPodcastTranscriptEntryProto[];
}
/**
 * @generated from protobuf message StoredPodcastTranscriptEntryProto
 */
export interface StoredPodcastTranscriptEntryProto {
    /**
     * @generated from protobuf field: PodcastHostProto host = 1;
     */
    host: PodcastHostProto;
    /**
     * @generated from protobuf field: string text = 2;
     */
    text: string;
    /**
     * @generated from protobuf field: int32 start_millis = 3;
     */
    startMillis: number;
    /**
     * @generated from protobuf field: int32 end_millis = 4;
     */
    endMillis: number;
}
/**
 * @generated from protobuf message StoredPodcastVisualsProto
 */
export interface StoredPodcastVisualsProto {
    /**
     * @generated from protobuf field: string style_prompt = 1;
     */
    stylePrompt: string;
    /**
     * @generated from protobuf field: string thumbnail_prompt = 2;
     */
    thumbnailPrompt: string;
    /**
     * @generated from protobuf field: string thumbnail_key = 3;
     */
    thumbnailKey: string;
    /**
     * @generated from protobuf field: repeated StoredPodcastVisualProto visuals = 4;
     */
    visuals: StoredPodcastVisualProto[];
}
/**
 * @generated from protobuf message StoredPodcastVisualProto
 */
export interface StoredPodcastVisualProto {
    /**
     * @generated from protobuf field: int32 timestamp_millis = 1;
     */
    timestampMillis: number;
    /**
     * @generated from protobuf field: string image_prompt = 2;
     */
    imagePrompt: string;
    /**
     * @generated from protobuf field: string image_key = 3;
     */
    imageKey: string;
    /**
     * @generated from protobuf field: PodcastVisualTransitionProto transition = 4;
     */
    transition: PodcastVisualTransitionProto;
}
/**
 * @generated from protobuf message StoredPodcastAudioProto
 */
export interface StoredPodcastAudioProto {
    /**
     * @generated from protobuf field: string audio_key = 1;
     */
    audioKey: string;
    /**
     * @generated from protobuf field: google.protobuf.Duration audio_duration = 2;
     */
    audioDuration?: Duration;
    /**
     * @generated from protobuf field: repeated PodcastWordProto words = 3;
     */
    words: PodcastWordProto[];
}
/**
 * @generated from protobuf message StoredPodcastKeyPointsProto
 */
export interface StoredPodcastKeyPointsProto {
    /**
     * @generated from protobuf field: string label = 1;
     */
    label: string;
    /**
     * @generated from protobuf field: repeated StoredPodcastKeyPointProto key_points = 2;
     */
    keyPoints: StoredPodcastKeyPointProto[];
}
/**
 * @generated from protobuf message StoredPodcastFollowupsProto
 */
export interface StoredPodcastFollowupsProto {
    /**
     * @generated from protobuf field: string label = 1;
     */
    label: string;
    /**
     * @generated from protobuf field: repeated StoredPodcastFollowupProto followups = 2;
     */
    followups: StoredPodcastFollowupProto[];
}
/**
 * @generated from protobuf message StoredPodcastFollowupProto
 */
export interface StoredPodcastFollowupProto {
    /**
     * @generated from protobuf field: string followup_id = 1;
     */
    followupId: string;
    /**
     * @generated from protobuf field: string reasoning = 2;
     */
    reasoning: string;
    /**
     * @generated from protobuf field: string emoji = 3;
     */
    emoji: string;
    /**
     * @generated from protobuf field: string outline = 4;
     */
    outline: string;
}
/**
 * @generated from protobuf message StoredPodcastKeyPointProto
 */
export interface StoredPodcastKeyPointProto {
    /**
     * @generated from protobuf field: string key_point_id = 1;
     */
    keyPointId: string;
    /**
     * @generated from protobuf field: string title = 2;
     */
    title: string;
    /**
     * @generated from protobuf field: string title_emoji = 3;
     */
    titleEmoji: string;
    /**
     * @generated from protobuf field: string outline = 4;
     */
    outline: string;
}
/**
 * @generated from protobuf message StoredPodcastSuggestionsProto
 */
export interface StoredPodcastSuggestionsProto {
    /**
     * @generated from protobuf field: string suggestions_id = 1;
     */
    suggestionsId: string;
    /**
     * @generated from protobuf field: StoredPodcastSuggestionsStateProto state = 2;
     */
    state: StoredPodcastSuggestionsStateProto;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp created_at = 3;
     */
    createdAt?: Timestamp;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp updated_at = 4;
     */
    updatedAt?: Timestamp;
    /**
     * @generated from protobuf field: string reasoning = 5;
     */
    reasoning: string;
    /**
     * @generated from protobuf field: string ranking = 6;
     */
    ranking: string;
    /**
     * @generated from protobuf field: repeated StoredPodcastSuggestionsSectionProto sections = 7;
     */
    sections: StoredPodcastSuggestionsSectionProto[];
    /**
     * @generated from protobuf field: LogProto log = 101;
     */
    log?: LogProto;
}
/**
 * @generated from protobuf message StoredPodcastSuggestionsSectionProto
 */
export interface StoredPodcastSuggestionsSectionProto {
    /**
     * @generated from protobuf field: string section_id = 1;
     */
    sectionId: string; // e.g. "do-right-now"
    /**
     * @generated from protobuf field: string reasoning = 2;
     */
    reasoning: string;
    /**
     * @generated from protobuf field: string title = 3;
     */
    title: string;
    /**
     * @generated from protobuf field: string style_prompt = 4;
     */
    stylePrompt: string;
    /**
     * @generated from protobuf field: StoredPodcastSuggestionProto banner_suggestion = 5;
     */
    bannerSuggestion?: StoredPodcastSuggestionProto;
    /**
     * @generated from protobuf field: StoredPodcastSuggestionProto footer_suggestion = 6;
     */
    footerSuggestion?: StoredPodcastSuggestionProto;
    /**
     * @generated from protobuf field: StoredPodcastStorySuggestionProto story1 = 7;
     */
    story1?: StoredPodcastStorySuggestionProto;
    /**
     * @generated from protobuf field: StoredPodcastStorySuggestionProto story2 = 8;
     */
    story2?: StoredPodcastStorySuggestionProto;
}
/**
 * @generated from protobuf message StoredPodcastSuggestionProto
 */
export interface StoredPodcastSuggestionProto {
    /**
     * @generated from protobuf field: string suggested_podcast_id = 1;
     */
    suggestedPodcastId: string;
    /**
     * @generated from protobuf field: string title = 2;
     */
    title: string;
    /**
     * @generated from protobuf field: string badge = 3;
     */
    badge: string; // Q&A, Explainer, ...
    /**
     * @generated from protobuf field: string thumbnail_prompt = 4;
     */
    thumbnailPrompt: string;
    /**
     * @generated from protobuf field: string thumbnail_key = 5;
     */
    thumbnailKey: string;
}
/**
 * @generated from protobuf message StoredPodcastStorySuggestionProto
 */
export interface StoredPodcastStorySuggestionProto {
    /**
     * @generated from protobuf field: string suggested_story_id = 1;
     */
    suggestedStoryId: string;
    /**
     * @generated from protobuf field: string title = 2;
     */
    title: string;
    /**
     * @generated from protobuf field: string thumbnail_prompt = 3;
     */
    thumbnailPrompt: string;
    /**
     * @generated from protobuf field: string thumbnail_key = 4;
     */
    thumbnailKey: string;
}
/**
 * @generated from protobuf message StoredPodcastStoryProto
 */
export interface StoredPodcastStoryProto {
    /**
     * @generated from protobuf field: string story_id = 1;
     */
    storyId: string;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp created_at = 2;
     */
    createdAt?: Timestamp;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp updated_at = 3;
     */
    updatedAt?: Timestamp;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp deleted_at = 4;
     */
    deletedAt?: Timestamp;
    /**
     * @generated from protobuf field: StoredPodcastStoryStateProto state = 5;
     */
    state: StoredPodcastStoryStateProto;
    /**
     * @generated from protobuf field: StoredPodcastStoryInputProto input = 6;
     */
    input?: StoredPodcastStoryInputProto;
    /**
     * @generated from protobuf field: StoredPodcastStorySlidesProto slides = 7;
     */
    slides?: StoredPodcastStorySlidesProto;
    /**
     * Debug metadata
     *
     * @generated from protobuf field: LogProto log = 100;
     */
    log?: LogProto;
}
/**
 * @generated from protobuf message StoredPodcastStoryInputProto
 */
export interface StoredPodcastStoryInputProto {
    /**
     * @generated from protobuf oneof: type
     */
    type: {
        oneofKind: "suggestion";
        /**
         * @generated from protobuf field: StoredPodcastStorySuggestionInputProto suggestion = 1;
         */
        suggestion: StoredPodcastStorySuggestionInputProto;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message StoredPodcastStorySuggestionInputProto
 */
export interface StoredPodcastStorySuggestionInputProto {
    /**
     * @generated from protobuf field: string suggestion_section_id = 1;
     */
    suggestionSectionId: string;
    /**
     * @generated from protobuf field: string suggestion_section_reasoning = 2;
     */
    suggestionSectionReasoning: string;
    /**
     * @generated from protobuf field: string suggestion_title = 3;
     */
    suggestionTitle: string;
    /**
     * @generated from protobuf field: string suggestion_thumbnail_prompt = 4;
     */
    suggestionThumbnailPrompt: string;
}
/**
 * @generated from protobuf message StoredPodcastStorySlidesProto
 */
export interface StoredPodcastStorySlidesProto {
    /**
     * @generated from protobuf field: bool is_ready = 1;
     */
    isReady: boolean;
    /**
     * @generated from protobuf field: repeated StoredPodcastStorySlideProto slides = 2;
     */
    slides: StoredPodcastStorySlideProto[];
}
/**
 * @generated from protobuf message StoredPodcastStorySlideProto
 */
export interface StoredPodcastStorySlideProto {
    /**
     * @generated from protobuf field: string slide_id = 1;
     */
    slideId: string;
    /**
     * @generated from protobuf field: bool is_ready = 2;
     */
    isReady: boolean;
    /**
     * @generated from protobuf field: string title = 3;
     */
    title: string;
    /**
     * @generated from protobuf field: string text = 4;
     */
    text: string;
}
/**
 * @generated from protobuf enum StoredPodcastStateProto
 */
export enum StoredPodcastStateProto {
    /**
     * @generated from protobuf enum value: STORED_PODCAST_STATE_PROTO_UNKNOWN = 0;
     */
    UNKNOWN = 0,
    /**
     * @generated from protobuf enum value: STORED_PODCAST_STATE_PROTO_READY = 1;
     */
    READY = 1,
    /**
     * @generated from protobuf enum value: STORED_PODCAST_STATE_PROTO_INPUT_READY = 2;
     */
    INPUT_READY = 2,
    /**
     * @generated from protobuf enum value: STORED_PODCAST_STATE_PROTO_GENERATION_STARTED = 3;
     */
    GENERATION_STARTED = 3,
    /**
     * @generated from protobuf enum value: STORED_PODCAST_STATE_PROTO_GENERATION_FAILED = 4;
     */
    GENERATION_FAILED = 4
}
/**
 * @generated from protobuf enum StoredPodcastSectionTypeProto
 */
export enum StoredPodcastSectionTypeProto {
    /**
     * @generated from protobuf enum value: STORED_PODCAST_SECTION_TYPE_PROTO_UNKNOWN = 0;
     */
    UNKNOWN = 0,
    /**
     * @generated from protobuf enum value: STORED_PODCAST_SECTION_TYPE_PROTO_INTRODUCTION = 1;
     */
    INTRODUCTION = 1,
    /**
     * @generated from protobuf enum value: STORED_PODCAST_SECTION_TYPE_PROTO_SECTION = 2;
     */
    SECTION = 2,
    /**
     * @generated from protobuf enum value: STORED_PODCAST_SECTION_TYPE_PROTO_CONCLUSION = 3;
     */
    CONCLUSION = 3
}
/**
 * @generated from protobuf enum StoredPodcastSuggestionsStateProto
 */
export enum StoredPodcastSuggestionsStateProto {
    /**
     * @generated from protobuf enum value: STORED_PODCAST_SUGGESTIONS_STATE_PROTO_UNDEFINED = 0;
     */
    UNDEFINED = 0,
    /**
     * @generated from protobuf enum value: STORED_PODCAST_SUGGESTIONS_STATE_PROTO_GENERATING = 1;
     */
    GENERATING = 1,
    /**
     * @generated from protobuf enum value: STORED_PODCAST_SUGGESTIONS_STATE_PROTO_READY = 2;
     */
    READY = 2,
    /**
     * @generated from protobuf enum value: STORED_PODCAST_SUGGESTIONS_STATE_PROTO_FAILED = 3;
     */
    FAILED = 3
}
/**
 * @generated from protobuf enum StoredPodcastStoryStateProto
 */
export enum StoredPodcastStoryStateProto {
    /**
     * @generated from protobuf enum value: STORED_PODCAST_STORY_STATE_PROTO_UNDEFINED = 0;
     */
    UNDEFINED = 0,
    /**
     * @generated from protobuf enum value: STORED_PODCAST_STORY_STATE_PROTO_INPUT_READY = 1;
     */
    INPUT_READY = 1,
    /**
     * @generated from protobuf enum value: STORED_PODCAST_STORY_STATE_PROTO_GENERATING = 2;
     */
    GENERATING = 2,
    /**
     * @generated from protobuf enum value: STORED_PODCAST_STORY_STATE_PROTO_READY = 3;
     */
    READY = 3,
    /**
     * @generated from protobuf enum value: STORED_PODCAST_STORY_STATE_PROTO_FAILED = 4;
     */
    FAILED = 4
}
// @generated message type with reflection information, may provide speed optimized methods
class StoredPodcastProto$Type extends MessageType<StoredPodcastProto> {
    constructor() {
        super("StoredPodcastProto", [
            { no: 1, name: "podcast_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "created_by", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "created_at", kind: "message", T: () => Timestamp },
            { no: 4, name: "updated_at", kind: "message", T: () => Timestamp },
            { no: 16, name: "deleted_at", kind: "message", T: () => Timestamp },
            { no: 5, name: "user_input", kind: "message", T: () => StoredPodcastUserInputProto },
            { no: 15, name: "suggestion_input", kind: "message", T: () => StoredPodcastSuggestionInputProto },
            { no: 6, name: "state", kind: "enum", T: () => ["StoredPodcastStateProto", StoredPodcastStateProto, "STORED_PODCAST_STATE_PROTO_"] },
            { no: 7, name: "answer", kind: "message", T: () => PodcastPromptAnswerProto },
            { no: 8, name: "points", kind: "message", T: () => StoredPodcastPointsProto },
            { no: 9, name: "plan", kind: "message", T: () => StoredPodcastPlanProto },
            { no: 10, name: "transcript", kind: "message", T: () => StoredPodcastTranscriptProto },
            { no: 11, name: "audio", kind: "message", T: () => StoredPodcastAudioProto },
            { no: 12, name: "visuals", kind: "message", T: () => StoredPodcastVisualsProto },
            { no: 13, name: "key_points", kind: "message", T: () => StoredPodcastKeyPointsProto },
            { no: 14, name: "followups", kind: "message", T: () => StoredPodcastFollowupsProto },
            { no: 101, name: "log", kind: "message", T: () => LogProto }
        ]);
    }
    create(value?: PartialMessage<StoredPodcastProto>): StoredPodcastProto {
        const message = { podcastId: "", createdBy: "", state: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StoredPodcastProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StoredPodcastProto): StoredPodcastProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string podcast_id */ 1:
                    message.podcastId = reader.string();
                    break;
                case /* string created_by */ 2:
                    message.createdBy = reader.string();
                    break;
                case /* google.protobuf.Timestamp created_at */ 3:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* google.protobuf.Timestamp updated_at */ 4:
                    message.updatedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.updatedAt);
                    break;
                case /* google.protobuf.Timestamp deleted_at */ 16:
                    message.deletedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.deletedAt);
                    break;
                case /* StoredPodcastUserInputProto user_input */ 5:
                    message.userInput = StoredPodcastUserInputProto.internalBinaryRead(reader, reader.uint32(), options, message.userInput);
                    break;
                case /* StoredPodcastSuggestionInputProto suggestion_input */ 15:
                    message.suggestionInput = StoredPodcastSuggestionInputProto.internalBinaryRead(reader, reader.uint32(), options, message.suggestionInput);
                    break;
                case /* StoredPodcastStateProto state */ 6:
                    message.state = reader.int32();
                    break;
                case /* PodcastPromptAnswerProto answer */ 7:
                    message.answer = PodcastPromptAnswerProto.internalBinaryRead(reader, reader.uint32(), options, message.answer);
                    break;
                case /* StoredPodcastPointsProto points */ 8:
                    message.points = StoredPodcastPointsProto.internalBinaryRead(reader, reader.uint32(), options, message.points);
                    break;
                case /* StoredPodcastPlanProto plan */ 9:
                    message.plan = StoredPodcastPlanProto.internalBinaryRead(reader, reader.uint32(), options, message.plan);
                    break;
                case /* StoredPodcastTranscriptProto transcript */ 10:
                    message.transcript = StoredPodcastTranscriptProto.internalBinaryRead(reader, reader.uint32(), options, message.transcript);
                    break;
                case /* StoredPodcastAudioProto audio */ 11:
                    message.audio = StoredPodcastAudioProto.internalBinaryRead(reader, reader.uint32(), options, message.audio);
                    break;
                case /* StoredPodcastVisualsProto visuals */ 12:
                    message.visuals = StoredPodcastVisualsProto.internalBinaryRead(reader, reader.uint32(), options, message.visuals);
                    break;
                case /* StoredPodcastKeyPointsProto key_points */ 13:
                    message.keyPoints = StoredPodcastKeyPointsProto.internalBinaryRead(reader, reader.uint32(), options, message.keyPoints);
                    break;
                case /* StoredPodcastFollowupsProto followups */ 14:
                    message.followups = StoredPodcastFollowupsProto.internalBinaryRead(reader, reader.uint32(), options, message.followups);
                    break;
                case /* LogProto log */ 101:
                    message.log = LogProto.internalBinaryRead(reader, reader.uint32(), options, message.log);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StoredPodcastProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string podcast_id = 1; */
        if (message.podcastId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.podcastId);
        /* string created_by = 2; */
        if (message.createdBy !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.createdBy);
        /* google.protobuf.Timestamp created_at = 3; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp updated_at = 4; */
        if (message.updatedAt)
            Timestamp.internalBinaryWrite(message.updatedAt, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp deleted_at = 16; */
        if (message.deletedAt)
            Timestamp.internalBinaryWrite(message.deletedAt, writer.tag(16, WireType.LengthDelimited).fork(), options).join();
        /* StoredPodcastUserInputProto user_input = 5; */
        if (message.userInput)
            StoredPodcastUserInputProto.internalBinaryWrite(message.userInput, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* StoredPodcastSuggestionInputProto suggestion_input = 15; */
        if (message.suggestionInput)
            StoredPodcastSuggestionInputProto.internalBinaryWrite(message.suggestionInput, writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        /* StoredPodcastStateProto state = 6; */
        if (message.state !== 0)
            writer.tag(6, WireType.Varint).int32(message.state);
        /* PodcastPromptAnswerProto answer = 7; */
        if (message.answer)
            PodcastPromptAnswerProto.internalBinaryWrite(message.answer, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* StoredPodcastPointsProto points = 8; */
        if (message.points)
            StoredPodcastPointsProto.internalBinaryWrite(message.points, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* StoredPodcastPlanProto plan = 9; */
        if (message.plan)
            StoredPodcastPlanProto.internalBinaryWrite(message.plan, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* StoredPodcastTranscriptProto transcript = 10; */
        if (message.transcript)
            StoredPodcastTranscriptProto.internalBinaryWrite(message.transcript, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* StoredPodcastAudioProto audio = 11; */
        if (message.audio)
            StoredPodcastAudioProto.internalBinaryWrite(message.audio, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* StoredPodcastVisualsProto visuals = 12; */
        if (message.visuals)
            StoredPodcastVisualsProto.internalBinaryWrite(message.visuals, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* StoredPodcastKeyPointsProto key_points = 13; */
        if (message.keyPoints)
            StoredPodcastKeyPointsProto.internalBinaryWrite(message.keyPoints, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* StoredPodcastFollowupsProto followups = 14; */
        if (message.followups)
            StoredPodcastFollowupsProto.internalBinaryWrite(message.followups, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* LogProto log = 101; */
        if (message.log)
            LogProto.internalBinaryWrite(message.log, writer.tag(101, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message StoredPodcastProto
 */
export const StoredPodcastProto = new StoredPodcastProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StoredPodcastUserInputProto$Type extends MessageType<StoredPodcastUserInputProto> {
    constructor() {
        super("StoredPodcastUserInputProto", [
            { no: 1, name: "prompt", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "point_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<StoredPodcastUserInputProto>): StoredPodcastUserInputProto {
        const message = { prompt: "", pointIds: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StoredPodcastUserInputProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StoredPodcastUserInputProto): StoredPodcastUserInputProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string prompt */ 1:
                    message.prompt = reader.string();
                    break;
                case /* repeated string point_ids */ 2:
                    message.pointIds.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StoredPodcastUserInputProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string prompt = 1; */
        if (message.prompt !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.prompt);
        /* repeated string point_ids = 2; */
        for (let i = 0; i < message.pointIds.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.pointIds[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message StoredPodcastUserInputProto
 */
export const StoredPodcastUserInputProto = new StoredPodcastUserInputProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StoredPodcastSuggestionInputProto$Type extends MessageType<StoredPodcastSuggestionInputProto> {
    constructor() {
        super("StoredPodcastSuggestionInputProto", [
            { no: 1, name: "suggestion_section_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "suggestion_section_reasoning", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "suggestion_title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "suggestion_thumbnail_prompt", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<StoredPodcastSuggestionInputProto>): StoredPodcastSuggestionInputProto {
        const message = { suggestionSectionId: "", suggestionSectionReasoning: "", suggestionTitle: "", suggestionThumbnailPrompt: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StoredPodcastSuggestionInputProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StoredPodcastSuggestionInputProto): StoredPodcastSuggestionInputProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string suggestion_section_id */ 1:
                    message.suggestionSectionId = reader.string();
                    break;
                case /* string suggestion_section_reasoning */ 2:
                    message.suggestionSectionReasoning = reader.string();
                    break;
                case /* string suggestion_title */ 3:
                    message.suggestionTitle = reader.string();
                    break;
                case /* string suggestion_thumbnail_prompt */ 4:
                    message.suggestionThumbnailPrompt = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StoredPodcastSuggestionInputProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string suggestion_section_id = 1; */
        if (message.suggestionSectionId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.suggestionSectionId);
        /* string suggestion_section_reasoning = 2; */
        if (message.suggestionSectionReasoning !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.suggestionSectionReasoning);
        /* string suggestion_title = 3; */
        if (message.suggestionTitle !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.suggestionTitle);
        /* string suggestion_thumbnail_prompt = 4; */
        if (message.suggestionThumbnailPrompt !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.suggestionThumbnailPrompt);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message StoredPodcastSuggestionInputProto
 */
export const StoredPodcastSuggestionInputProto = new StoredPodcastSuggestionInputProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StoredPodcastPointsProto$Type extends MessageType<StoredPodcastPointsProto> {
    constructor() {
        super("StoredPodcastPointsProto", [
            { no: 1, name: "points", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => StoredPodcastPointProto }
        ]);
    }
    create(value?: PartialMessage<StoredPodcastPointsProto>): StoredPodcastPointsProto {
        const message = { points: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StoredPodcastPointsProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StoredPodcastPointsProto): StoredPodcastPointsProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated StoredPodcastPointProto points */ 1:
                    message.points.push(StoredPodcastPointProto.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StoredPodcastPointsProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated StoredPodcastPointProto points = 1; */
        for (let i = 0; i < message.points.length; i++)
            StoredPodcastPointProto.internalBinaryWrite(message.points[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message StoredPodcastPointsProto
 */
export const StoredPodcastPointsProto = new StoredPodcastPointsProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StoredPodcastPointProto$Type extends MessageType<StoredPodcastPointProto> {
    constructor() {
        super("StoredPodcastPointProto", [
            { no: 1, name: "point_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "reasoning", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "title_emoji", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "outline", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<StoredPodcastPointProto>): StoredPodcastPointProto {
        const message = { pointId: "", reasoning: "", title: "", titleEmoji: "", outline: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StoredPodcastPointProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StoredPodcastPointProto): StoredPodcastPointProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string point_id */ 1:
                    message.pointId = reader.string();
                    break;
                case /* string reasoning */ 2:
                    message.reasoning = reader.string();
                    break;
                case /* string title */ 3:
                    message.title = reader.string();
                    break;
                case /* string title_emoji */ 4:
                    message.titleEmoji = reader.string();
                    break;
                case /* string outline */ 5:
                    message.outline = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StoredPodcastPointProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string point_id = 1; */
        if (message.pointId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.pointId);
        /* string reasoning = 2; */
        if (message.reasoning !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.reasoning);
        /* string title = 3; */
        if (message.title !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.title);
        /* string title_emoji = 4; */
        if (message.titleEmoji !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.titleEmoji);
        /* string outline = 5; */
        if (message.outline !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.outline);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message StoredPodcastPointProto
 */
export const StoredPodcastPointProto = new StoredPodcastPointProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StoredPodcastPlanProto$Type extends MessageType<StoredPodcastPlanProto> {
    constructor() {
        super("StoredPodcastPlanProto", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "plan", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<StoredPodcastPlanProto>): StoredPodcastPlanProto {
        const message = { title: "", plan: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StoredPodcastPlanProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StoredPodcastPlanProto): StoredPodcastPlanProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* string plan */ 2:
                    message.plan = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StoredPodcastPlanProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* string plan = 2; */
        if (message.plan !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.plan);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message StoredPodcastPlanProto
 */
export const StoredPodcastPlanProto = new StoredPodcastPlanProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StoredPodcastTranscriptProto$Type extends MessageType<StoredPodcastTranscriptProto> {
    constructor() {
        super("StoredPodcastTranscriptProto", [
            { no: 1, name: "sections", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => StoredPodcastSectionTranscriptProto }
        ]);
    }
    create(value?: PartialMessage<StoredPodcastTranscriptProto>): StoredPodcastTranscriptProto {
        const message = { sections: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StoredPodcastTranscriptProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StoredPodcastTranscriptProto): StoredPodcastTranscriptProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated StoredPodcastSectionTranscriptProto sections */ 1:
                    message.sections.push(StoredPodcastSectionTranscriptProto.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StoredPodcastTranscriptProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated StoredPodcastSectionTranscriptProto sections = 1; */
        for (let i = 0; i < message.sections.length; i++)
            StoredPodcastSectionTranscriptProto.internalBinaryWrite(message.sections[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message StoredPodcastTranscriptProto
 */
export const StoredPodcastTranscriptProto = new StoredPodcastTranscriptProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StoredPodcastSectionTranscriptProto$Type extends MessageType<StoredPodcastSectionTranscriptProto> {
    constructor() {
        super("StoredPodcastSectionTranscriptProto", [
            { no: 1, name: "section_type", kind: "enum", T: () => ["StoredPodcastSectionTypeProto", StoredPodcastSectionTypeProto, "STORED_PODCAST_SECTION_TYPE_PROTO_"] },
            { no: 2, name: "entries", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => StoredPodcastTranscriptEntryProto }
        ]);
    }
    create(value?: PartialMessage<StoredPodcastSectionTranscriptProto>): StoredPodcastSectionTranscriptProto {
        const message = { sectionType: 0, entries: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StoredPodcastSectionTranscriptProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StoredPodcastSectionTranscriptProto): StoredPodcastSectionTranscriptProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* StoredPodcastSectionTypeProto section_type */ 1:
                    message.sectionType = reader.int32();
                    break;
                case /* repeated StoredPodcastTranscriptEntryProto entries */ 2:
                    message.entries.push(StoredPodcastTranscriptEntryProto.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StoredPodcastSectionTranscriptProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* StoredPodcastSectionTypeProto section_type = 1; */
        if (message.sectionType !== 0)
            writer.tag(1, WireType.Varint).int32(message.sectionType);
        /* repeated StoredPodcastTranscriptEntryProto entries = 2; */
        for (let i = 0; i < message.entries.length; i++)
            StoredPodcastTranscriptEntryProto.internalBinaryWrite(message.entries[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message StoredPodcastSectionTranscriptProto
 */
export const StoredPodcastSectionTranscriptProto = new StoredPodcastSectionTranscriptProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StoredPodcastTranscriptEntryProto$Type extends MessageType<StoredPodcastTranscriptEntryProto> {
    constructor() {
        super("StoredPodcastTranscriptEntryProto", [
            { no: 1, name: "host", kind: "enum", T: () => ["PodcastHostProto", PodcastHostProto, "PODCAST_HOST_PROTO_"] },
            { no: 2, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "start_millis", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "end_millis", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<StoredPodcastTranscriptEntryProto>): StoredPodcastTranscriptEntryProto {
        const message = { host: 0, text: "", startMillis: 0, endMillis: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StoredPodcastTranscriptEntryProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StoredPodcastTranscriptEntryProto): StoredPodcastTranscriptEntryProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* PodcastHostProto host */ 1:
                    message.host = reader.int32();
                    break;
                case /* string text */ 2:
                    message.text = reader.string();
                    break;
                case /* int32 start_millis */ 3:
                    message.startMillis = reader.int32();
                    break;
                case /* int32 end_millis */ 4:
                    message.endMillis = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StoredPodcastTranscriptEntryProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* PodcastHostProto host = 1; */
        if (message.host !== 0)
            writer.tag(1, WireType.Varint).int32(message.host);
        /* string text = 2; */
        if (message.text !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.text);
        /* int32 start_millis = 3; */
        if (message.startMillis !== 0)
            writer.tag(3, WireType.Varint).int32(message.startMillis);
        /* int32 end_millis = 4; */
        if (message.endMillis !== 0)
            writer.tag(4, WireType.Varint).int32(message.endMillis);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message StoredPodcastTranscriptEntryProto
 */
export const StoredPodcastTranscriptEntryProto = new StoredPodcastTranscriptEntryProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StoredPodcastVisualsProto$Type extends MessageType<StoredPodcastVisualsProto> {
    constructor() {
        super("StoredPodcastVisualsProto", [
            { no: 1, name: "style_prompt", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "thumbnail_prompt", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "thumbnail_key", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "visuals", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => StoredPodcastVisualProto }
        ]);
    }
    create(value?: PartialMessage<StoredPodcastVisualsProto>): StoredPodcastVisualsProto {
        const message = { stylePrompt: "", thumbnailPrompt: "", thumbnailKey: "", visuals: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StoredPodcastVisualsProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StoredPodcastVisualsProto): StoredPodcastVisualsProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string style_prompt */ 1:
                    message.stylePrompt = reader.string();
                    break;
                case /* string thumbnail_prompt */ 2:
                    message.thumbnailPrompt = reader.string();
                    break;
                case /* string thumbnail_key */ 3:
                    message.thumbnailKey = reader.string();
                    break;
                case /* repeated StoredPodcastVisualProto visuals */ 4:
                    message.visuals.push(StoredPodcastVisualProto.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StoredPodcastVisualsProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string style_prompt = 1; */
        if (message.stylePrompt !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.stylePrompt);
        /* string thumbnail_prompt = 2; */
        if (message.thumbnailPrompt !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.thumbnailPrompt);
        /* string thumbnail_key = 3; */
        if (message.thumbnailKey !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.thumbnailKey);
        /* repeated StoredPodcastVisualProto visuals = 4; */
        for (let i = 0; i < message.visuals.length; i++)
            StoredPodcastVisualProto.internalBinaryWrite(message.visuals[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message StoredPodcastVisualsProto
 */
export const StoredPodcastVisualsProto = new StoredPodcastVisualsProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StoredPodcastVisualProto$Type extends MessageType<StoredPodcastVisualProto> {
    constructor() {
        super("StoredPodcastVisualProto", [
            { no: 1, name: "timestamp_millis", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "image_prompt", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "image_key", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "transition", kind: "enum", T: () => ["PodcastVisualTransitionProto", PodcastVisualTransitionProto, "PODCAST_VISUAL_TRANSITION_PROTO_"] }
        ]);
    }
    create(value?: PartialMessage<StoredPodcastVisualProto>): StoredPodcastVisualProto {
        const message = { timestampMillis: 0, imagePrompt: "", imageKey: "", transition: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StoredPodcastVisualProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StoredPodcastVisualProto): StoredPodcastVisualProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 timestamp_millis */ 1:
                    message.timestampMillis = reader.int32();
                    break;
                case /* string image_prompt */ 2:
                    message.imagePrompt = reader.string();
                    break;
                case /* string image_key */ 3:
                    message.imageKey = reader.string();
                    break;
                case /* PodcastVisualTransitionProto transition */ 4:
                    message.transition = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StoredPodcastVisualProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 timestamp_millis = 1; */
        if (message.timestampMillis !== 0)
            writer.tag(1, WireType.Varint).int32(message.timestampMillis);
        /* string image_prompt = 2; */
        if (message.imagePrompt !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.imagePrompt);
        /* string image_key = 3; */
        if (message.imageKey !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.imageKey);
        /* PodcastVisualTransitionProto transition = 4; */
        if (message.transition !== 0)
            writer.tag(4, WireType.Varint).int32(message.transition);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message StoredPodcastVisualProto
 */
export const StoredPodcastVisualProto = new StoredPodcastVisualProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StoredPodcastAudioProto$Type extends MessageType<StoredPodcastAudioProto> {
    constructor() {
        super("StoredPodcastAudioProto", [
            { no: 1, name: "audio_key", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "audio_duration", kind: "message", T: () => Duration },
            { no: 3, name: "words", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PodcastWordProto }
        ]);
    }
    create(value?: PartialMessage<StoredPodcastAudioProto>): StoredPodcastAudioProto {
        const message = { audioKey: "", words: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StoredPodcastAudioProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StoredPodcastAudioProto): StoredPodcastAudioProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string audio_key */ 1:
                    message.audioKey = reader.string();
                    break;
                case /* google.protobuf.Duration audio_duration */ 2:
                    message.audioDuration = Duration.internalBinaryRead(reader, reader.uint32(), options, message.audioDuration);
                    break;
                case /* repeated PodcastWordProto words */ 3:
                    message.words.push(PodcastWordProto.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StoredPodcastAudioProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string audio_key = 1; */
        if (message.audioKey !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.audioKey);
        /* google.protobuf.Duration audio_duration = 2; */
        if (message.audioDuration)
            Duration.internalBinaryWrite(message.audioDuration, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated PodcastWordProto words = 3; */
        for (let i = 0; i < message.words.length; i++)
            PodcastWordProto.internalBinaryWrite(message.words[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message StoredPodcastAudioProto
 */
export const StoredPodcastAudioProto = new StoredPodcastAudioProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StoredPodcastKeyPointsProto$Type extends MessageType<StoredPodcastKeyPointsProto> {
    constructor() {
        super("StoredPodcastKeyPointsProto", [
            { no: 1, name: "label", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "key_points", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => StoredPodcastKeyPointProto }
        ]);
    }
    create(value?: PartialMessage<StoredPodcastKeyPointsProto>): StoredPodcastKeyPointsProto {
        const message = { label: "", keyPoints: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StoredPodcastKeyPointsProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StoredPodcastKeyPointsProto): StoredPodcastKeyPointsProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string label */ 1:
                    message.label = reader.string();
                    break;
                case /* repeated StoredPodcastKeyPointProto key_points */ 2:
                    message.keyPoints.push(StoredPodcastKeyPointProto.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StoredPodcastKeyPointsProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string label = 1; */
        if (message.label !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.label);
        /* repeated StoredPodcastKeyPointProto key_points = 2; */
        for (let i = 0; i < message.keyPoints.length; i++)
            StoredPodcastKeyPointProto.internalBinaryWrite(message.keyPoints[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message StoredPodcastKeyPointsProto
 */
export const StoredPodcastKeyPointsProto = new StoredPodcastKeyPointsProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StoredPodcastFollowupsProto$Type extends MessageType<StoredPodcastFollowupsProto> {
    constructor() {
        super("StoredPodcastFollowupsProto", [
            { no: 1, name: "label", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "followups", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => StoredPodcastFollowupProto }
        ]);
    }
    create(value?: PartialMessage<StoredPodcastFollowupsProto>): StoredPodcastFollowupsProto {
        const message = { label: "", followups: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StoredPodcastFollowupsProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StoredPodcastFollowupsProto): StoredPodcastFollowupsProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string label */ 1:
                    message.label = reader.string();
                    break;
                case /* repeated StoredPodcastFollowupProto followups */ 2:
                    message.followups.push(StoredPodcastFollowupProto.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StoredPodcastFollowupsProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string label = 1; */
        if (message.label !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.label);
        /* repeated StoredPodcastFollowupProto followups = 2; */
        for (let i = 0; i < message.followups.length; i++)
            StoredPodcastFollowupProto.internalBinaryWrite(message.followups[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message StoredPodcastFollowupsProto
 */
export const StoredPodcastFollowupsProto = new StoredPodcastFollowupsProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StoredPodcastFollowupProto$Type extends MessageType<StoredPodcastFollowupProto> {
    constructor() {
        super("StoredPodcastFollowupProto", [
            { no: 1, name: "followup_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "reasoning", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "emoji", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "outline", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<StoredPodcastFollowupProto>): StoredPodcastFollowupProto {
        const message = { followupId: "", reasoning: "", emoji: "", outline: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StoredPodcastFollowupProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StoredPodcastFollowupProto): StoredPodcastFollowupProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string followup_id */ 1:
                    message.followupId = reader.string();
                    break;
                case /* string reasoning */ 2:
                    message.reasoning = reader.string();
                    break;
                case /* string emoji */ 3:
                    message.emoji = reader.string();
                    break;
                case /* string outline */ 4:
                    message.outline = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StoredPodcastFollowupProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string followup_id = 1; */
        if (message.followupId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.followupId);
        /* string reasoning = 2; */
        if (message.reasoning !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.reasoning);
        /* string emoji = 3; */
        if (message.emoji !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.emoji);
        /* string outline = 4; */
        if (message.outline !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.outline);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message StoredPodcastFollowupProto
 */
export const StoredPodcastFollowupProto = new StoredPodcastFollowupProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StoredPodcastKeyPointProto$Type extends MessageType<StoredPodcastKeyPointProto> {
    constructor() {
        super("StoredPodcastKeyPointProto", [
            { no: 1, name: "key_point_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "title_emoji", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "outline", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<StoredPodcastKeyPointProto>): StoredPodcastKeyPointProto {
        const message = { keyPointId: "", title: "", titleEmoji: "", outline: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StoredPodcastKeyPointProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StoredPodcastKeyPointProto): StoredPodcastKeyPointProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string key_point_id */ 1:
                    message.keyPointId = reader.string();
                    break;
                case /* string title */ 2:
                    message.title = reader.string();
                    break;
                case /* string title_emoji */ 3:
                    message.titleEmoji = reader.string();
                    break;
                case /* string outline */ 4:
                    message.outline = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StoredPodcastKeyPointProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string key_point_id = 1; */
        if (message.keyPointId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.keyPointId);
        /* string title = 2; */
        if (message.title !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.title);
        /* string title_emoji = 3; */
        if (message.titleEmoji !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.titleEmoji);
        /* string outline = 4; */
        if (message.outline !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.outline);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message StoredPodcastKeyPointProto
 */
export const StoredPodcastKeyPointProto = new StoredPodcastKeyPointProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StoredPodcastSuggestionsProto$Type extends MessageType<StoredPodcastSuggestionsProto> {
    constructor() {
        super("StoredPodcastSuggestionsProto", [
            { no: 1, name: "suggestions_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "state", kind: "enum", T: () => ["StoredPodcastSuggestionsStateProto", StoredPodcastSuggestionsStateProto, "STORED_PODCAST_SUGGESTIONS_STATE_PROTO_"] },
            { no: 3, name: "created_at", kind: "message", T: () => Timestamp },
            { no: 4, name: "updated_at", kind: "message", T: () => Timestamp },
            { no: 5, name: "reasoning", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "ranking", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "sections", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => StoredPodcastSuggestionsSectionProto },
            { no: 101, name: "log", kind: "message", T: () => LogProto }
        ]);
    }
    create(value?: PartialMessage<StoredPodcastSuggestionsProto>): StoredPodcastSuggestionsProto {
        const message = { suggestionsId: "", state: 0, reasoning: "", ranking: "", sections: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StoredPodcastSuggestionsProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StoredPodcastSuggestionsProto): StoredPodcastSuggestionsProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string suggestions_id */ 1:
                    message.suggestionsId = reader.string();
                    break;
                case /* StoredPodcastSuggestionsStateProto state */ 2:
                    message.state = reader.int32();
                    break;
                case /* google.protobuf.Timestamp created_at */ 3:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* google.protobuf.Timestamp updated_at */ 4:
                    message.updatedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.updatedAt);
                    break;
                case /* string reasoning */ 5:
                    message.reasoning = reader.string();
                    break;
                case /* string ranking */ 6:
                    message.ranking = reader.string();
                    break;
                case /* repeated StoredPodcastSuggestionsSectionProto sections */ 7:
                    message.sections.push(StoredPodcastSuggestionsSectionProto.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* LogProto log */ 101:
                    message.log = LogProto.internalBinaryRead(reader, reader.uint32(), options, message.log);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StoredPodcastSuggestionsProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string suggestions_id = 1; */
        if (message.suggestionsId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.suggestionsId);
        /* StoredPodcastSuggestionsStateProto state = 2; */
        if (message.state !== 0)
            writer.tag(2, WireType.Varint).int32(message.state);
        /* google.protobuf.Timestamp created_at = 3; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp updated_at = 4; */
        if (message.updatedAt)
            Timestamp.internalBinaryWrite(message.updatedAt, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* string reasoning = 5; */
        if (message.reasoning !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.reasoning);
        /* string ranking = 6; */
        if (message.ranking !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.ranking);
        /* repeated StoredPodcastSuggestionsSectionProto sections = 7; */
        for (let i = 0; i < message.sections.length; i++)
            StoredPodcastSuggestionsSectionProto.internalBinaryWrite(message.sections[i], writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* LogProto log = 101; */
        if (message.log)
            LogProto.internalBinaryWrite(message.log, writer.tag(101, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message StoredPodcastSuggestionsProto
 */
export const StoredPodcastSuggestionsProto = new StoredPodcastSuggestionsProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StoredPodcastSuggestionsSectionProto$Type extends MessageType<StoredPodcastSuggestionsSectionProto> {
    constructor() {
        super("StoredPodcastSuggestionsSectionProto", [
            { no: 1, name: "section_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "reasoning", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "style_prompt", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "banner_suggestion", kind: "message", T: () => StoredPodcastSuggestionProto },
            { no: 6, name: "footer_suggestion", kind: "message", T: () => StoredPodcastSuggestionProto },
            { no: 7, name: "story1", kind: "message", T: () => StoredPodcastStorySuggestionProto },
            { no: 8, name: "story2", kind: "message", T: () => StoredPodcastStorySuggestionProto }
        ]);
    }
    create(value?: PartialMessage<StoredPodcastSuggestionsSectionProto>): StoredPodcastSuggestionsSectionProto {
        const message = { sectionId: "", reasoning: "", title: "", stylePrompt: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StoredPodcastSuggestionsSectionProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StoredPodcastSuggestionsSectionProto): StoredPodcastSuggestionsSectionProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string section_id */ 1:
                    message.sectionId = reader.string();
                    break;
                case /* string reasoning */ 2:
                    message.reasoning = reader.string();
                    break;
                case /* string title */ 3:
                    message.title = reader.string();
                    break;
                case /* string style_prompt */ 4:
                    message.stylePrompt = reader.string();
                    break;
                case /* StoredPodcastSuggestionProto banner_suggestion */ 5:
                    message.bannerSuggestion = StoredPodcastSuggestionProto.internalBinaryRead(reader, reader.uint32(), options, message.bannerSuggestion);
                    break;
                case /* StoredPodcastSuggestionProto footer_suggestion */ 6:
                    message.footerSuggestion = StoredPodcastSuggestionProto.internalBinaryRead(reader, reader.uint32(), options, message.footerSuggestion);
                    break;
                case /* StoredPodcastStorySuggestionProto story1 */ 7:
                    message.story1 = StoredPodcastStorySuggestionProto.internalBinaryRead(reader, reader.uint32(), options, message.story1);
                    break;
                case /* StoredPodcastStorySuggestionProto story2 */ 8:
                    message.story2 = StoredPodcastStorySuggestionProto.internalBinaryRead(reader, reader.uint32(), options, message.story2);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StoredPodcastSuggestionsSectionProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string section_id = 1; */
        if (message.sectionId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.sectionId);
        /* string reasoning = 2; */
        if (message.reasoning !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.reasoning);
        /* string title = 3; */
        if (message.title !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.title);
        /* string style_prompt = 4; */
        if (message.stylePrompt !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.stylePrompt);
        /* StoredPodcastSuggestionProto banner_suggestion = 5; */
        if (message.bannerSuggestion)
            StoredPodcastSuggestionProto.internalBinaryWrite(message.bannerSuggestion, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* StoredPodcastSuggestionProto footer_suggestion = 6; */
        if (message.footerSuggestion)
            StoredPodcastSuggestionProto.internalBinaryWrite(message.footerSuggestion, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* StoredPodcastStorySuggestionProto story1 = 7; */
        if (message.story1)
            StoredPodcastStorySuggestionProto.internalBinaryWrite(message.story1, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* StoredPodcastStorySuggestionProto story2 = 8; */
        if (message.story2)
            StoredPodcastStorySuggestionProto.internalBinaryWrite(message.story2, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message StoredPodcastSuggestionsSectionProto
 */
export const StoredPodcastSuggestionsSectionProto = new StoredPodcastSuggestionsSectionProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StoredPodcastSuggestionProto$Type extends MessageType<StoredPodcastSuggestionProto> {
    constructor() {
        super("StoredPodcastSuggestionProto", [
            { no: 1, name: "suggested_podcast_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "badge", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "thumbnail_prompt", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "thumbnail_key", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<StoredPodcastSuggestionProto>): StoredPodcastSuggestionProto {
        const message = { suggestedPodcastId: "", title: "", badge: "", thumbnailPrompt: "", thumbnailKey: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StoredPodcastSuggestionProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StoredPodcastSuggestionProto): StoredPodcastSuggestionProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string suggested_podcast_id */ 1:
                    message.suggestedPodcastId = reader.string();
                    break;
                case /* string title */ 2:
                    message.title = reader.string();
                    break;
                case /* string badge */ 3:
                    message.badge = reader.string();
                    break;
                case /* string thumbnail_prompt */ 4:
                    message.thumbnailPrompt = reader.string();
                    break;
                case /* string thumbnail_key */ 5:
                    message.thumbnailKey = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StoredPodcastSuggestionProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string suggested_podcast_id = 1; */
        if (message.suggestedPodcastId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.suggestedPodcastId);
        /* string title = 2; */
        if (message.title !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.title);
        /* string badge = 3; */
        if (message.badge !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.badge);
        /* string thumbnail_prompt = 4; */
        if (message.thumbnailPrompt !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.thumbnailPrompt);
        /* string thumbnail_key = 5; */
        if (message.thumbnailKey !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.thumbnailKey);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message StoredPodcastSuggestionProto
 */
export const StoredPodcastSuggestionProto = new StoredPodcastSuggestionProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StoredPodcastStorySuggestionProto$Type extends MessageType<StoredPodcastStorySuggestionProto> {
    constructor() {
        super("StoredPodcastStorySuggestionProto", [
            { no: 1, name: "suggested_story_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "thumbnail_prompt", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "thumbnail_key", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<StoredPodcastStorySuggestionProto>): StoredPodcastStorySuggestionProto {
        const message = { suggestedStoryId: "", title: "", thumbnailPrompt: "", thumbnailKey: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StoredPodcastStorySuggestionProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StoredPodcastStorySuggestionProto): StoredPodcastStorySuggestionProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string suggested_story_id */ 1:
                    message.suggestedStoryId = reader.string();
                    break;
                case /* string title */ 2:
                    message.title = reader.string();
                    break;
                case /* string thumbnail_prompt */ 3:
                    message.thumbnailPrompt = reader.string();
                    break;
                case /* string thumbnail_key */ 4:
                    message.thumbnailKey = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StoredPodcastStorySuggestionProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string suggested_story_id = 1; */
        if (message.suggestedStoryId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.suggestedStoryId);
        /* string title = 2; */
        if (message.title !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.title);
        /* string thumbnail_prompt = 3; */
        if (message.thumbnailPrompt !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.thumbnailPrompt);
        /* string thumbnail_key = 4; */
        if (message.thumbnailKey !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.thumbnailKey);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message StoredPodcastStorySuggestionProto
 */
export const StoredPodcastStorySuggestionProto = new StoredPodcastStorySuggestionProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StoredPodcastStoryProto$Type extends MessageType<StoredPodcastStoryProto> {
    constructor() {
        super("StoredPodcastStoryProto", [
            { no: 1, name: "story_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "created_at", kind: "message", T: () => Timestamp },
            { no: 3, name: "updated_at", kind: "message", T: () => Timestamp },
            { no: 4, name: "deleted_at", kind: "message", T: () => Timestamp },
            { no: 5, name: "state", kind: "enum", T: () => ["StoredPodcastStoryStateProto", StoredPodcastStoryStateProto, "STORED_PODCAST_STORY_STATE_PROTO_"] },
            { no: 6, name: "input", kind: "message", T: () => StoredPodcastStoryInputProto },
            { no: 7, name: "slides", kind: "message", T: () => StoredPodcastStorySlidesProto },
            { no: 100, name: "log", kind: "message", T: () => LogProto }
        ]);
    }
    create(value?: PartialMessage<StoredPodcastStoryProto>): StoredPodcastStoryProto {
        const message = { storyId: "", state: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StoredPodcastStoryProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StoredPodcastStoryProto): StoredPodcastStoryProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string story_id */ 1:
                    message.storyId = reader.string();
                    break;
                case /* google.protobuf.Timestamp created_at */ 2:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* google.protobuf.Timestamp updated_at */ 3:
                    message.updatedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.updatedAt);
                    break;
                case /* google.protobuf.Timestamp deleted_at */ 4:
                    message.deletedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.deletedAt);
                    break;
                case /* StoredPodcastStoryStateProto state */ 5:
                    message.state = reader.int32();
                    break;
                case /* StoredPodcastStoryInputProto input */ 6:
                    message.input = StoredPodcastStoryInputProto.internalBinaryRead(reader, reader.uint32(), options, message.input);
                    break;
                case /* StoredPodcastStorySlidesProto slides */ 7:
                    message.slides = StoredPodcastStorySlidesProto.internalBinaryRead(reader, reader.uint32(), options, message.slides);
                    break;
                case /* LogProto log */ 100:
                    message.log = LogProto.internalBinaryRead(reader, reader.uint32(), options, message.log);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StoredPodcastStoryProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string story_id = 1; */
        if (message.storyId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.storyId);
        /* google.protobuf.Timestamp created_at = 2; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp updated_at = 3; */
        if (message.updatedAt)
            Timestamp.internalBinaryWrite(message.updatedAt, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp deleted_at = 4; */
        if (message.deletedAt)
            Timestamp.internalBinaryWrite(message.deletedAt, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* StoredPodcastStoryStateProto state = 5; */
        if (message.state !== 0)
            writer.tag(5, WireType.Varint).int32(message.state);
        /* StoredPodcastStoryInputProto input = 6; */
        if (message.input)
            StoredPodcastStoryInputProto.internalBinaryWrite(message.input, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* StoredPodcastStorySlidesProto slides = 7; */
        if (message.slides)
            StoredPodcastStorySlidesProto.internalBinaryWrite(message.slides, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* LogProto log = 100; */
        if (message.log)
            LogProto.internalBinaryWrite(message.log, writer.tag(100, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message StoredPodcastStoryProto
 */
export const StoredPodcastStoryProto = new StoredPodcastStoryProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StoredPodcastStoryInputProto$Type extends MessageType<StoredPodcastStoryInputProto> {
    constructor() {
        super("StoredPodcastStoryInputProto", [
            { no: 1, name: "suggestion", kind: "message", oneof: "type", T: () => StoredPodcastStorySuggestionInputProto }
        ]);
    }
    create(value?: PartialMessage<StoredPodcastStoryInputProto>): StoredPodcastStoryInputProto {
        const message = { type: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StoredPodcastStoryInputProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StoredPodcastStoryInputProto): StoredPodcastStoryInputProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* StoredPodcastStorySuggestionInputProto suggestion */ 1:
                    message.type = {
                        oneofKind: "suggestion",
                        suggestion: StoredPodcastStorySuggestionInputProto.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).suggestion)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StoredPodcastStoryInputProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* StoredPodcastStorySuggestionInputProto suggestion = 1; */
        if (message.type.oneofKind === "suggestion")
            StoredPodcastStorySuggestionInputProto.internalBinaryWrite(message.type.suggestion, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message StoredPodcastStoryInputProto
 */
export const StoredPodcastStoryInputProto = new StoredPodcastStoryInputProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StoredPodcastStorySuggestionInputProto$Type extends MessageType<StoredPodcastStorySuggestionInputProto> {
    constructor() {
        super("StoredPodcastStorySuggestionInputProto", [
            { no: 1, name: "suggestion_section_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "suggestion_section_reasoning", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "suggestion_title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "suggestion_thumbnail_prompt", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<StoredPodcastStorySuggestionInputProto>): StoredPodcastStorySuggestionInputProto {
        const message = { suggestionSectionId: "", suggestionSectionReasoning: "", suggestionTitle: "", suggestionThumbnailPrompt: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StoredPodcastStorySuggestionInputProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StoredPodcastStorySuggestionInputProto): StoredPodcastStorySuggestionInputProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string suggestion_section_id */ 1:
                    message.suggestionSectionId = reader.string();
                    break;
                case /* string suggestion_section_reasoning */ 2:
                    message.suggestionSectionReasoning = reader.string();
                    break;
                case /* string suggestion_title */ 3:
                    message.suggestionTitle = reader.string();
                    break;
                case /* string suggestion_thumbnail_prompt */ 4:
                    message.suggestionThumbnailPrompt = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StoredPodcastStorySuggestionInputProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string suggestion_section_id = 1; */
        if (message.suggestionSectionId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.suggestionSectionId);
        /* string suggestion_section_reasoning = 2; */
        if (message.suggestionSectionReasoning !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.suggestionSectionReasoning);
        /* string suggestion_title = 3; */
        if (message.suggestionTitle !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.suggestionTitle);
        /* string suggestion_thumbnail_prompt = 4; */
        if (message.suggestionThumbnailPrompt !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.suggestionThumbnailPrompt);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message StoredPodcastStorySuggestionInputProto
 */
export const StoredPodcastStorySuggestionInputProto = new StoredPodcastStorySuggestionInputProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StoredPodcastStorySlidesProto$Type extends MessageType<StoredPodcastStorySlidesProto> {
    constructor() {
        super("StoredPodcastStorySlidesProto", [
            { no: 1, name: "is_ready", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "slides", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => StoredPodcastStorySlideProto }
        ]);
    }
    create(value?: PartialMessage<StoredPodcastStorySlidesProto>): StoredPodcastStorySlidesProto {
        const message = { isReady: false, slides: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StoredPodcastStorySlidesProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StoredPodcastStorySlidesProto): StoredPodcastStorySlidesProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool is_ready */ 1:
                    message.isReady = reader.bool();
                    break;
                case /* repeated StoredPodcastStorySlideProto slides */ 2:
                    message.slides.push(StoredPodcastStorySlideProto.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StoredPodcastStorySlidesProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool is_ready = 1; */
        if (message.isReady !== false)
            writer.tag(1, WireType.Varint).bool(message.isReady);
        /* repeated StoredPodcastStorySlideProto slides = 2; */
        for (let i = 0; i < message.slides.length; i++)
            StoredPodcastStorySlideProto.internalBinaryWrite(message.slides[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message StoredPodcastStorySlidesProto
 */
export const StoredPodcastStorySlidesProto = new StoredPodcastStorySlidesProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StoredPodcastStorySlideProto$Type extends MessageType<StoredPodcastStorySlideProto> {
    constructor() {
        super("StoredPodcastStorySlideProto", [
            { no: 1, name: "slide_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "is_ready", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<StoredPodcastStorySlideProto>): StoredPodcastStorySlideProto {
        const message = { slideId: "", isReady: false, title: "", text: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StoredPodcastStorySlideProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StoredPodcastStorySlideProto): StoredPodcastStorySlideProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string slide_id */ 1:
                    message.slideId = reader.string();
                    break;
                case /* bool is_ready */ 2:
                    message.isReady = reader.bool();
                    break;
                case /* string title */ 3:
                    message.title = reader.string();
                    break;
                case /* string text */ 4:
                    message.text = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StoredPodcastStorySlideProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string slide_id = 1; */
        if (message.slideId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.slideId);
        /* bool is_ready = 2; */
        if (message.isReady !== false)
            writer.tag(2, WireType.Varint).bool(message.isReady);
        /* string title = 3; */
        if (message.title !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.title);
        /* string text = 4; */
        if (message.text !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.text);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message StoredPodcastStorySlideProto
 */
export const StoredPodcastStorySlideProto = new StoredPodcastStorySlideProto$Type();
