/* eslint-disable */
// @generated by protobuf-ts 2.9.1 with parameter eslint_disable,long_type_string,ts_nocheck
// @generated from protobuf file "StoredPodcastProto.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { PodcastWordProto } from "./PodcastProto";
import { Duration } from "./google/protobuf/duration";
import { PodcastVisualTransitionProto } from "./PodcastProto";
import { PodcastHostProto } from "./PodcastProto";
import { LogProto } from "./LogProto";
import { LatenciesProto } from "./LatencyProto";
import { PodcastCardsProto } from "./PodcastProto";
import { PodcastPromptAnswerProto } from "./PodcastProto";
import { Timestamp } from "./google/protobuf/timestamp";
/**
 * @generated from protobuf message StoredPodcastProto
 */
export interface StoredPodcastProto {
    /**
     * @generated from protobuf field: string podcast_id = 1;
     */
    podcastId: string;
    /**
     * @generated from protobuf field: string created_by = 2;
     */
    createdBy: string;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp created_at = 3;
     */
    createdAt?: Timestamp;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp updated_at = 4;
     */
    updatedAt?: Timestamp;
    /**
     * @generated from protobuf field: StoredPodcastUserInputProto user_input = 5;
     */
    userInput?: StoredPodcastUserInputProto;
    /**
     * @generated from protobuf field: StoredPodcastStateProto state = 6;
     */
    state: StoredPodcastStateProto;
    /**
     * @generated from protobuf field: PodcastPromptAnswerProto answer = 7;
     */
    answer?: PodcastPromptAnswerProto;
    /**
     * @generated from protobuf field: StoredPodcastPointsProto points = 8;
     */
    points?: StoredPodcastPointsProto;
    /**
     * @generated from protobuf field: StoredPodcastPlanProto plan = 9;
     */
    plan?: StoredPodcastPlanProto;
    /**
     * @generated from protobuf field: StoredPodcastTranscriptProto transcript = 10;
     */
    transcript?: StoredPodcastTranscriptProto;
    /**
     * @generated from protobuf field: StoredPodcastAudioProto audio = 11;
     */
    audio?: StoredPodcastAudioProto;
    /**
     * @generated from protobuf field: StoredPodcastVisualsProto visuals = 12;
     */
    visuals?: StoredPodcastVisualsProto;
    /**
     * @generated from protobuf field: StoredPodcastCardsStateProto cards_state = 13;
     */
    cardsState: StoredPodcastCardsStateProto;
    /**
     * @generated from protobuf field: PodcastCardsProto cards = 14;
     */
    cards?: PodcastCardsProto;
    /**
     * Debug metadata
     *
     * @generated from protobuf field: LatenciesProto latencies = 100;
     */
    latencies?: LatenciesProto;
    /**
     * @generated from protobuf field: LogProto log = 101;
     */
    log?: LogProto;
}
/**
 * @generated from protobuf message StoredPodcastUserInputProto
 */
export interface StoredPodcastUserInputProto {
    /**
     * @generated from protobuf field: string prompt = 1;
     */
    prompt: string;
    /**
     * @generated from protobuf field: repeated string point_ids = 2;
     */
    pointIds: string[];
}
/**
 * @generated from protobuf message StoredPodcastPointsProto
 */
export interface StoredPodcastPointsProto {
    /**
     * @generated from protobuf field: repeated StoredPodcastPointProto points = 1;
     */
    points: StoredPodcastPointProto[];
}
/**
 * @generated from protobuf message StoredPodcastPointProto
 */
export interface StoredPodcastPointProto {
    /**
     * @generated from protobuf field: string point_id = 1;
     */
    pointId: string;
    /**
     * @generated from protobuf field: string reasoning = 2;
     */
    reasoning: string;
    /**
     * @generated from protobuf field: string title = 3;
     */
    title: string;
    /**
     * @generated from protobuf field: string title_emoji = 4;
     */
    titleEmoji: string;
    /**
     * @generated from protobuf field: string outline = 5;
     */
    outline: string;
}
/**
 * @generated from protobuf message StoredPodcastPlanProto
 */
export interface StoredPodcastPlanProto {
    /**
     * @generated from protobuf field: string title = 1;
     */
    title: string;
    /**
     * @generated from protobuf field: string plan = 2;
     */
    plan: string;
}
/**
 * @generated from protobuf message StoredPodcastTranscriptProto
 */
export interface StoredPodcastTranscriptProto {
    /**
     * @generated from protobuf field: repeated StoredPodcastSectionTranscriptProto sections = 1;
     */
    sections: StoredPodcastSectionTranscriptProto[];
}
/**
 * @generated from protobuf message StoredPodcastSectionTranscriptProto
 */
export interface StoredPodcastSectionTranscriptProto {
    /**
     * @generated from protobuf field: StoredPodcastSectionTypeProto section_type = 1;
     */
    sectionType: StoredPodcastSectionTypeProto;
    /**
     * @generated from protobuf field: repeated StoredPodcastTranscriptEntryProto entries = 2;
     */
    entries: StoredPodcastTranscriptEntryProto[];
}
/**
 * @generated from protobuf message StoredPodcastTranscriptEntryProto
 */
export interface StoredPodcastTranscriptEntryProto {
    /**
     * @generated from protobuf field: PodcastHostProto host = 1;
     */
    host: PodcastHostProto;
    /**
     * @generated from protobuf field: string text = 2;
     */
    text: string;
    /**
     * @generated from protobuf field: int32 start_millis = 3;
     */
    startMillis: number;
    /**
     * @generated from protobuf field: int32 end_millis = 4;
     */
    endMillis: number;
}
/**
 * @generated from protobuf message StoredPodcastVisualsProto
 */
export interface StoredPodcastVisualsProto {
    /**
     * @generated from protobuf field: string style_prompt = 1;
     */
    stylePrompt: string;
    /**
     * @generated from protobuf field: string thumbnail_prompt = 2;
     */
    thumbnailPrompt: string;
    /**
     * @generated from protobuf field: string thumbnail_key = 3;
     */
    thumbnailKey: string;
    /**
     * @generated from protobuf field: repeated StoredPodcastVisualProto visuals = 4;
     */
    visuals: StoredPodcastVisualProto[];
}
/**
 * @generated from protobuf message StoredPodcastVisualProto
 */
export interface StoredPodcastVisualProto {
    /**
     * @generated from protobuf field: int32 timestamp_millis = 1;
     */
    timestampMillis: number;
    /**
     * @generated from protobuf field: string image_prompt = 2;
     */
    imagePrompt: string;
    /**
     * @generated from protobuf field: string image_key = 3;
     */
    imageKey: string;
    /**
     * @generated from protobuf field: PodcastVisualTransitionProto transition = 4;
     */
    transition: PodcastVisualTransitionProto;
}
/**
 * @generated from protobuf message StoredPodcastAudioProto
 */
export interface StoredPodcastAudioProto {
    /**
     * @generated from protobuf field: string audio_key = 1;
     */
    audioKey: string;
    /**
     * @generated from protobuf field: google.protobuf.Duration audio_duration = 2;
     */
    audioDuration?: Duration;
    /**
     * @generated from protobuf field: repeated PodcastWordProto words = 3;
     */
    words: PodcastWordProto[];
}
/**
 * @generated from protobuf enum StoredPodcastStateProto
 */
export enum StoredPodcastStateProto {
    /**
     * @generated from protobuf enum value: STORED_PODCAST_STATE_PROTO_UNKNOWN = 0;
     */
    UNKNOWN = 0,
    /**
     * @generated from protobuf enum value: STORED_PODCAST_STATE_PROTO_READY = 1;
     */
    READY = 1,
    /**
     * @generated from protobuf enum value: STORED_PODCAST_STATE_PROTO_POINTS_READY = 2;
     */
    POINTS_READY = 2,
    /**
     * @generated from protobuf enum value: STORED_PODCAST_STATE_PROTO_GENERATION_STARTED = 3;
     */
    GENERATION_STARTED = 3,
    /**
     * @generated from protobuf enum value: STORED_PODCAST_STATE_PROTO_GENERATION_FAILED = 4;
     */
    GENERATION_FAILED = 4,
    /**
     * IDs start at 10
     *
     * @generated from protobuf enum value: STORED_PODCAST_STATE_PROTO_GENERATING_PLAN = 10;
     */
    GENERATING_PLAN = 10,
    /**
     * @generated from protobuf enum value: STORED_PODCAST_STATE_PROTO_GENERATING_TRANSCRIPT = 11;
     */
    GENERATING_TRANSCRIPT = 11,
    /**
     * @generated from protobuf enum value: STORED_PODCAST_STATE_PROTO_GENERATING_AUDIO = 12;
     */
    GENERATING_AUDIO = 12,
    /**
     * @generated from protobuf enum value: STORED_PODCAST_STATE_PROTO_GENERATING_VISUALS = 13;
     */
    GENERATING_VISUALS = 13
}
/**
 * @generated from protobuf enum StoredPodcastCardsStateProto
 */
export enum StoredPodcastCardsStateProto {
    /**
     * @generated from protobuf enum value: STORED_PODCAST_CARDS_STATE_PROTO_NOT_STARTED = 0;
     */
    NOT_STARTED = 0,
    /**
     * @generated from protobuf enum value: STORED_PODCAST_CARDS_STATE_PROTO_GENERATING = 1;
     */
    GENERATING = 1,
    /**
     * @generated from protobuf enum value: STORED_PODCAST_CARDS_STATE_PROTO_READY = 2;
     */
    READY = 2,
    /**
     * @generated from protobuf enum value: STORED_PODCAST_CARDS_STATE_PROTO_FAILED = 3;
     */
    FAILED = 3
}
/**
 * @generated from protobuf enum StoredPodcastSectionTypeProto
 */
export enum StoredPodcastSectionTypeProto {
    /**
     * @generated from protobuf enum value: STORED_PODCAST_SECTION_TYPE_PROTO_UNKNOWN = 0;
     */
    UNKNOWN = 0,
    /**
     * @generated from protobuf enum value: STORED_PODCAST_SECTION_TYPE_PROTO_INTRODUCTION = 1;
     */
    INTRODUCTION = 1,
    /**
     * @generated from protobuf enum value: STORED_PODCAST_SECTION_TYPE_PROTO_SECTION = 2;
     */
    SECTION = 2,
    /**
     * @generated from protobuf enum value: STORED_PODCAST_SECTION_TYPE_PROTO_CONCLUSION = 3;
     */
    CONCLUSION = 3
}
// @generated message type with reflection information, may provide speed optimized methods
class StoredPodcastProto$Type extends MessageType<StoredPodcastProto> {
    constructor() {
        super("StoredPodcastProto", [
            { no: 1, name: "podcast_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "created_by", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "created_at", kind: "message", T: () => Timestamp },
            { no: 4, name: "updated_at", kind: "message", T: () => Timestamp },
            { no: 5, name: "user_input", kind: "message", T: () => StoredPodcastUserInputProto },
            { no: 6, name: "state", kind: "enum", T: () => ["StoredPodcastStateProto", StoredPodcastStateProto, "STORED_PODCAST_STATE_PROTO_"] },
            { no: 7, name: "answer", kind: "message", T: () => PodcastPromptAnswerProto },
            { no: 8, name: "points", kind: "message", T: () => StoredPodcastPointsProto },
            { no: 9, name: "plan", kind: "message", T: () => StoredPodcastPlanProto },
            { no: 10, name: "transcript", kind: "message", T: () => StoredPodcastTranscriptProto },
            { no: 11, name: "audio", kind: "message", T: () => StoredPodcastAudioProto },
            { no: 12, name: "visuals", kind: "message", T: () => StoredPodcastVisualsProto },
            { no: 13, name: "cards_state", kind: "enum", T: () => ["StoredPodcastCardsStateProto", StoredPodcastCardsStateProto, "STORED_PODCAST_CARDS_STATE_PROTO_"] },
            { no: 14, name: "cards", kind: "message", T: () => PodcastCardsProto },
            { no: 100, name: "latencies", kind: "message", T: () => LatenciesProto },
            { no: 101, name: "log", kind: "message", T: () => LogProto }
        ]);
    }
    create(value?: PartialMessage<StoredPodcastProto>): StoredPodcastProto {
        const message = { podcastId: "", createdBy: "", state: 0, cardsState: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StoredPodcastProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StoredPodcastProto): StoredPodcastProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string podcast_id */ 1:
                    message.podcastId = reader.string();
                    break;
                case /* string created_by */ 2:
                    message.createdBy = reader.string();
                    break;
                case /* google.protobuf.Timestamp created_at */ 3:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* google.protobuf.Timestamp updated_at */ 4:
                    message.updatedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.updatedAt);
                    break;
                case /* StoredPodcastUserInputProto user_input */ 5:
                    message.userInput = StoredPodcastUserInputProto.internalBinaryRead(reader, reader.uint32(), options, message.userInput);
                    break;
                case /* StoredPodcastStateProto state */ 6:
                    message.state = reader.int32();
                    break;
                case /* PodcastPromptAnswerProto answer */ 7:
                    message.answer = PodcastPromptAnswerProto.internalBinaryRead(reader, reader.uint32(), options, message.answer);
                    break;
                case /* StoredPodcastPointsProto points */ 8:
                    message.points = StoredPodcastPointsProto.internalBinaryRead(reader, reader.uint32(), options, message.points);
                    break;
                case /* StoredPodcastPlanProto plan */ 9:
                    message.plan = StoredPodcastPlanProto.internalBinaryRead(reader, reader.uint32(), options, message.plan);
                    break;
                case /* StoredPodcastTranscriptProto transcript */ 10:
                    message.transcript = StoredPodcastTranscriptProto.internalBinaryRead(reader, reader.uint32(), options, message.transcript);
                    break;
                case /* StoredPodcastAudioProto audio */ 11:
                    message.audio = StoredPodcastAudioProto.internalBinaryRead(reader, reader.uint32(), options, message.audio);
                    break;
                case /* StoredPodcastVisualsProto visuals */ 12:
                    message.visuals = StoredPodcastVisualsProto.internalBinaryRead(reader, reader.uint32(), options, message.visuals);
                    break;
                case /* StoredPodcastCardsStateProto cards_state */ 13:
                    message.cardsState = reader.int32();
                    break;
                case /* PodcastCardsProto cards */ 14:
                    message.cards = PodcastCardsProto.internalBinaryRead(reader, reader.uint32(), options, message.cards);
                    break;
                case /* LatenciesProto latencies */ 100:
                    message.latencies = LatenciesProto.internalBinaryRead(reader, reader.uint32(), options, message.latencies);
                    break;
                case /* LogProto log */ 101:
                    message.log = LogProto.internalBinaryRead(reader, reader.uint32(), options, message.log);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StoredPodcastProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string podcast_id = 1; */
        if (message.podcastId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.podcastId);
        /* string created_by = 2; */
        if (message.createdBy !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.createdBy);
        /* google.protobuf.Timestamp created_at = 3; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp updated_at = 4; */
        if (message.updatedAt)
            Timestamp.internalBinaryWrite(message.updatedAt, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* StoredPodcastUserInputProto user_input = 5; */
        if (message.userInput)
            StoredPodcastUserInputProto.internalBinaryWrite(message.userInput, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* StoredPodcastStateProto state = 6; */
        if (message.state !== 0)
            writer.tag(6, WireType.Varint).int32(message.state);
        /* PodcastPromptAnswerProto answer = 7; */
        if (message.answer)
            PodcastPromptAnswerProto.internalBinaryWrite(message.answer, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* StoredPodcastPointsProto points = 8; */
        if (message.points)
            StoredPodcastPointsProto.internalBinaryWrite(message.points, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* StoredPodcastPlanProto plan = 9; */
        if (message.plan)
            StoredPodcastPlanProto.internalBinaryWrite(message.plan, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* StoredPodcastTranscriptProto transcript = 10; */
        if (message.transcript)
            StoredPodcastTranscriptProto.internalBinaryWrite(message.transcript, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* StoredPodcastAudioProto audio = 11; */
        if (message.audio)
            StoredPodcastAudioProto.internalBinaryWrite(message.audio, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* StoredPodcastVisualsProto visuals = 12; */
        if (message.visuals)
            StoredPodcastVisualsProto.internalBinaryWrite(message.visuals, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* StoredPodcastCardsStateProto cards_state = 13; */
        if (message.cardsState !== 0)
            writer.tag(13, WireType.Varint).int32(message.cardsState);
        /* PodcastCardsProto cards = 14; */
        if (message.cards)
            PodcastCardsProto.internalBinaryWrite(message.cards, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* LatenciesProto latencies = 100; */
        if (message.latencies)
            LatenciesProto.internalBinaryWrite(message.latencies, writer.tag(100, WireType.LengthDelimited).fork(), options).join();
        /* LogProto log = 101; */
        if (message.log)
            LogProto.internalBinaryWrite(message.log, writer.tag(101, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message StoredPodcastProto
 */
export const StoredPodcastProto = new StoredPodcastProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StoredPodcastUserInputProto$Type extends MessageType<StoredPodcastUserInputProto> {
    constructor() {
        super("StoredPodcastUserInputProto", [
            { no: 1, name: "prompt", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "point_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<StoredPodcastUserInputProto>): StoredPodcastUserInputProto {
        const message = { prompt: "", pointIds: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StoredPodcastUserInputProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StoredPodcastUserInputProto): StoredPodcastUserInputProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string prompt */ 1:
                    message.prompt = reader.string();
                    break;
                case /* repeated string point_ids */ 2:
                    message.pointIds.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StoredPodcastUserInputProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string prompt = 1; */
        if (message.prompt !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.prompt);
        /* repeated string point_ids = 2; */
        for (let i = 0; i < message.pointIds.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.pointIds[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message StoredPodcastUserInputProto
 */
export const StoredPodcastUserInputProto = new StoredPodcastUserInputProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StoredPodcastPointsProto$Type extends MessageType<StoredPodcastPointsProto> {
    constructor() {
        super("StoredPodcastPointsProto", [
            { no: 1, name: "points", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => StoredPodcastPointProto }
        ]);
    }
    create(value?: PartialMessage<StoredPodcastPointsProto>): StoredPodcastPointsProto {
        const message = { points: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StoredPodcastPointsProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StoredPodcastPointsProto): StoredPodcastPointsProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated StoredPodcastPointProto points */ 1:
                    message.points.push(StoredPodcastPointProto.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StoredPodcastPointsProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated StoredPodcastPointProto points = 1; */
        for (let i = 0; i < message.points.length; i++)
            StoredPodcastPointProto.internalBinaryWrite(message.points[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message StoredPodcastPointsProto
 */
export const StoredPodcastPointsProto = new StoredPodcastPointsProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StoredPodcastPointProto$Type extends MessageType<StoredPodcastPointProto> {
    constructor() {
        super("StoredPodcastPointProto", [
            { no: 1, name: "point_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "reasoning", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "title_emoji", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "outline", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<StoredPodcastPointProto>): StoredPodcastPointProto {
        const message = { pointId: "", reasoning: "", title: "", titleEmoji: "", outline: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StoredPodcastPointProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StoredPodcastPointProto): StoredPodcastPointProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string point_id */ 1:
                    message.pointId = reader.string();
                    break;
                case /* string reasoning */ 2:
                    message.reasoning = reader.string();
                    break;
                case /* string title */ 3:
                    message.title = reader.string();
                    break;
                case /* string title_emoji */ 4:
                    message.titleEmoji = reader.string();
                    break;
                case /* string outline */ 5:
                    message.outline = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StoredPodcastPointProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string point_id = 1; */
        if (message.pointId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.pointId);
        /* string reasoning = 2; */
        if (message.reasoning !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.reasoning);
        /* string title = 3; */
        if (message.title !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.title);
        /* string title_emoji = 4; */
        if (message.titleEmoji !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.titleEmoji);
        /* string outline = 5; */
        if (message.outline !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.outline);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message StoredPodcastPointProto
 */
export const StoredPodcastPointProto = new StoredPodcastPointProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StoredPodcastPlanProto$Type extends MessageType<StoredPodcastPlanProto> {
    constructor() {
        super("StoredPodcastPlanProto", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "plan", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<StoredPodcastPlanProto>): StoredPodcastPlanProto {
        const message = { title: "", plan: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StoredPodcastPlanProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StoredPodcastPlanProto): StoredPodcastPlanProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* string plan */ 2:
                    message.plan = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StoredPodcastPlanProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* string plan = 2; */
        if (message.plan !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.plan);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message StoredPodcastPlanProto
 */
export const StoredPodcastPlanProto = new StoredPodcastPlanProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StoredPodcastTranscriptProto$Type extends MessageType<StoredPodcastTranscriptProto> {
    constructor() {
        super("StoredPodcastTranscriptProto", [
            { no: 1, name: "sections", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => StoredPodcastSectionTranscriptProto }
        ]);
    }
    create(value?: PartialMessage<StoredPodcastTranscriptProto>): StoredPodcastTranscriptProto {
        const message = { sections: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StoredPodcastTranscriptProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StoredPodcastTranscriptProto): StoredPodcastTranscriptProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated StoredPodcastSectionTranscriptProto sections */ 1:
                    message.sections.push(StoredPodcastSectionTranscriptProto.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StoredPodcastTranscriptProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated StoredPodcastSectionTranscriptProto sections = 1; */
        for (let i = 0; i < message.sections.length; i++)
            StoredPodcastSectionTranscriptProto.internalBinaryWrite(message.sections[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message StoredPodcastTranscriptProto
 */
export const StoredPodcastTranscriptProto = new StoredPodcastTranscriptProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StoredPodcastSectionTranscriptProto$Type extends MessageType<StoredPodcastSectionTranscriptProto> {
    constructor() {
        super("StoredPodcastSectionTranscriptProto", [
            { no: 1, name: "section_type", kind: "enum", T: () => ["StoredPodcastSectionTypeProto", StoredPodcastSectionTypeProto, "STORED_PODCAST_SECTION_TYPE_PROTO_"] },
            { no: 2, name: "entries", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => StoredPodcastTranscriptEntryProto }
        ]);
    }
    create(value?: PartialMessage<StoredPodcastSectionTranscriptProto>): StoredPodcastSectionTranscriptProto {
        const message = { sectionType: 0, entries: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StoredPodcastSectionTranscriptProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StoredPodcastSectionTranscriptProto): StoredPodcastSectionTranscriptProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* StoredPodcastSectionTypeProto section_type */ 1:
                    message.sectionType = reader.int32();
                    break;
                case /* repeated StoredPodcastTranscriptEntryProto entries */ 2:
                    message.entries.push(StoredPodcastTranscriptEntryProto.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StoredPodcastSectionTranscriptProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* StoredPodcastSectionTypeProto section_type = 1; */
        if (message.sectionType !== 0)
            writer.tag(1, WireType.Varint).int32(message.sectionType);
        /* repeated StoredPodcastTranscriptEntryProto entries = 2; */
        for (let i = 0; i < message.entries.length; i++)
            StoredPodcastTranscriptEntryProto.internalBinaryWrite(message.entries[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message StoredPodcastSectionTranscriptProto
 */
export const StoredPodcastSectionTranscriptProto = new StoredPodcastSectionTranscriptProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StoredPodcastTranscriptEntryProto$Type extends MessageType<StoredPodcastTranscriptEntryProto> {
    constructor() {
        super("StoredPodcastTranscriptEntryProto", [
            { no: 1, name: "host", kind: "enum", T: () => ["PodcastHostProto", PodcastHostProto, "PODCAST_HOST_PROTO_"] },
            { no: 2, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "start_millis", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "end_millis", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<StoredPodcastTranscriptEntryProto>): StoredPodcastTranscriptEntryProto {
        const message = { host: 0, text: "", startMillis: 0, endMillis: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StoredPodcastTranscriptEntryProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StoredPodcastTranscriptEntryProto): StoredPodcastTranscriptEntryProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* PodcastHostProto host */ 1:
                    message.host = reader.int32();
                    break;
                case /* string text */ 2:
                    message.text = reader.string();
                    break;
                case /* int32 start_millis */ 3:
                    message.startMillis = reader.int32();
                    break;
                case /* int32 end_millis */ 4:
                    message.endMillis = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StoredPodcastTranscriptEntryProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* PodcastHostProto host = 1; */
        if (message.host !== 0)
            writer.tag(1, WireType.Varint).int32(message.host);
        /* string text = 2; */
        if (message.text !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.text);
        /* int32 start_millis = 3; */
        if (message.startMillis !== 0)
            writer.tag(3, WireType.Varint).int32(message.startMillis);
        /* int32 end_millis = 4; */
        if (message.endMillis !== 0)
            writer.tag(4, WireType.Varint).int32(message.endMillis);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message StoredPodcastTranscriptEntryProto
 */
export const StoredPodcastTranscriptEntryProto = new StoredPodcastTranscriptEntryProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StoredPodcastVisualsProto$Type extends MessageType<StoredPodcastVisualsProto> {
    constructor() {
        super("StoredPodcastVisualsProto", [
            { no: 1, name: "style_prompt", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "thumbnail_prompt", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "thumbnail_key", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "visuals", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => StoredPodcastVisualProto }
        ]);
    }
    create(value?: PartialMessage<StoredPodcastVisualsProto>): StoredPodcastVisualsProto {
        const message = { stylePrompt: "", thumbnailPrompt: "", thumbnailKey: "", visuals: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StoredPodcastVisualsProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StoredPodcastVisualsProto): StoredPodcastVisualsProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string style_prompt */ 1:
                    message.stylePrompt = reader.string();
                    break;
                case /* string thumbnail_prompt */ 2:
                    message.thumbnailPrompt = reader.string();
                    break;
                case /* string thumbnail_key */ 3:
                    message.thumbnailKey = reader.string();
                    break;
                case /* repeated StoredPodcastVisualProto visuals */ 4:
                    message.visuals.push(StoredPodcastVisualProto.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StoredPodcastVisualsProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string style_prompt = 1; */
        if (message.stylePrompt !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.stylePrompt);
        /* string thumbnail_prompt = 2; */
        if (message.thumbnailPrompt !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.thumbnailPrompt);
        /* string thumbnail_key = 3; */
        if (message.thumbnailKey !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.thumbnailKey);
        /* repeated StoredPodcastVisualProto visuals = 4; */
        for (let i = 0; i < message.visuals.length; i++)
            StoredPodcastVisualProto.internalBinaryWrite(message.visuals[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message StoredPodcastVisualsProto
 */
export const StoredPodcastVisualsProto = new StoredPodcastVisualsProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StoredPodcastVisualProto$Type extends MessageType<StoredPodcastVisualProto> {
    constructor() {
        super("StoredPodcastVisualProto", [
            { no: 1, name: "timestamp_millis", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "image_prompt", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "image_key", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "transition", kind: "enum", T: () => ["PodcastVisualTransitionProto", PodcastVisualTransitionProto, "PODCAST_VISUAL_TRANSITION_PROTO_"] }
        ]);
    }
    create(value?: PartialMessage<StoredPodcastVisualProto>): StoredPodcastVisualProto {
        const message = { timestampMillis: 0, imagePrompt: "", imageKey: "", transition: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StoredPodcastVisualProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StoredPodcastVisualProto): StoredPodcastVisualProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 timestamp_millis */ 1:
                    message.timestampMillis = reader.int32();
                    break;
                case /* string image_prompt */ 2:
                    message.imagePrompt = reader.string();
                    break;
                case /* string image_key */ 3:
                    message.imageKey = reader.string();
                    break;
                case /* PodcastVisualTransitionProto transition */ 4:
                    message.transition = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StoredPodcastVisualProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 timestamp_millis = 1; */
        if (message.timestampMillis !== 0)
            writer.tag(1, WireType.Varint).int32(message.timestampMillis);
        /* string image_prompt = 2; */
        if (message.imagePrompt !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.imagePrompt);
        /* string image_key = 3; */
        if (message.imageKey !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.imageKey);
        /* PodcastVisualTransitionProto transition = 4; */
        if (message.transition !== 0)
            writer.tag(4, WireType.Varint).int32(message.transition);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message StoredPodcastVisualProto
 */
export const StoredPodcastVisualProto = new StoredPodcastVisualProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StoredPodcastAudioProto$Type extends MessageType<StoredPodcastAudioProto> {
    constructor() {
        super("StoredPodcastAudioProto", [
            { no: 1, name: "audio_key", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "audio_duration", kind: "message", T: () => Duration },
            { no: 3, name: "words", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PodcastWordProto }
        ]);
    }
    create(value?: PartialMessage<StoredPodcastAudioProto>): StoredPodcastAudioProto {
        const message = { audioKey: "", words: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StoredPodcastAudioProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StoredPodcastAudioProto): StoredPodcastAudioProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string audio_key */ 1:
                    message.audioKey = reader.string();
                    break;
                case /* google.protobuf.Duration audio_duration */ 2:
                    message.audioDuration = Duration.internalBinaryRead(reader, reader.uint32(), options, message.audioDuration);
                    break;
                case /* repeated PodcastWordProto words */ 3:
                    message.words.push(PodcastWordProto.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StoredPodcastAudioProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string audio_key = 1; */
        if (message.audioKey !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.audioKey);
        /* google.protobuf.Duration audio_duration = 2; */
        if (message.audioDuration)
            Duration.internalBinaryWrite(message.audioDuration, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated PodcastWordProto words = 3; */
        for (let i = 0; i < message.words.length; i++)
            PodcastWordProto.internalBinaryWrite(message.words[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message StoredPodcastAudioProto
 */
export const StoredPodcastAudioProto = new StoredPodcastAudioProto$Type();
