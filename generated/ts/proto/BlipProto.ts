/* eslint-disable */
// @generated by protobuf-ts 2.9.1 with parameter eslint_disable,long_type_string,ts_nocheck
// @generated from protobuf file "BlipProto.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "./google/protobuf/timestamp";
import { Duration } from "./google/protobuf/duration";
/**
 * @generated from protobuf message BlipApiRequestProto
 */
export interface BlipApiRequestProto {
    /**
     * @generated from protobuf field: string encoded_user_auth = 1;
     */
    encodedUserAuth: string;
    /**
     * @generated from protobuf oneof: request
     */
    request: {
        oneofKind: "getBlips";
        /**
         * @generated from protobuf field: GetBlipsRequestProto get_blips = 2;
         */
        getBlips: GetBlipsRequestProto;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message BlipApiResponseProto
 */
export interface BlipApiResponseProto {
    /**
     * If present the token was refreshed and the client should use this new one from now onwards.
     *
     * @generated from protobuf field: string refreshed_encoded_user_auth = 1;
     */
    refreshedEncodedUserAuth: string;
    /**
     * @generated from protobuf oneof: response
     */
    response: {
        oneofKind: "getBlips";
        /**
         * @generated from protobuf field: GetBlipsResponseProto get_blips = 2;
         */
        getBlips: GetBlipsResponseProto;
    } | {
        oneofKind: undefined;
    };
    /**
     * @generated from protobuf field: map<string, google.protobuf.Duration> latencies = 100;
     */
    latencies: {
        [key: string]: Duration;
    };
}
/**
 * @generated from protobuf message GetBlipsRequestProto
 */
export interface GetBlipsRequestProto {
}
/**
 * @generated from protobuf message GetBlipsResponseProto
 */
export interface GetBlipsResponseProto {
    /**
     * @generated from protobuf field: repeated BlipProto blips = 1;
     */
    blips: BlipProto[];
}
/**
 * @generated from protobuf message BlipsCacheProto
 */
export interface BlipsCacheProto {
    /**
     * @generated from protobuf field: google.protobuf.Timestamp created_at = 1;
     */
    createdAt?: Timestamp;
    /**
     * @generated from protobuf field: repeated BlipProto blips = 2;
     */
    blips: BlipProto[];
}
/**
 * @generated from protobuf message BlipProto
 */
export interface BlipProto {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp created_at = 2;
     */
    createdAt?: Timestamp;
    /**
     * @generated from protobuf field: string title = 3;
     */
    title: string;
    /**
     * @generated from protobuf field: string title_emoji = 4;
     */
    titleEmoji: string;
    /**
     * @generated from protobuf field: string body = 5;
     */
    body: string;
    /**
     * @generated from protobuf field: string closure_emoji = 6;
     */
    closureEmoji: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class BlipApiRequestProto$Type extends MessageType<BlipApiRequestProto> {
    constructor() {
        super("BlipApiRequestProto", [
            { no: 1, name: "encoded_user_auth", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "get_blips", kind: "message", oneof: "request", T: () => GetBlipsRequestProto }
        ]);
    }
    create(value?: PartialMessage<BlipApiRequestProto>): BlipApiRequestProto {
        const message = { encodedUserAuth: "", request: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BlipApiRequestProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BlipApiRequestProto): BlipApiRequestProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string encoded_user_auth */ 1:
                    message.encodedUserAuth = reader.string();
                    break;
                case /* GetBlipsRequestProto get_blips */ 2:
                    message.request = {
                        oneofKind: "getBlips",
                        getBlips: GetBlipsRequestProto.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).getBlips)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BlipApiRequestProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string encoded_user_auth = 1; */
        if (message.encodedUserAuth !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.encodedUserAuth);
        /* GetBlipsRequestProto get_blips = 2; */
        if (message.request.oneofKind === "getBlips")
            GetBlipsRequestProto.internalBinaryWrite(message.request.getBlips, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message BlipApiRequestProto
 */
export const BlipApiRequestProto = new BlipApiRequestProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BlipApiResponseProto$Type extends MessageType<BlipApiResponseProto> {
    constructor() {
        super("BlipApiResponseProto", [
            { no: 1, name: "refreshed_encoded_user_auth", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "get_blips", kind: "message", oneof: "response", T: () => GetBlipsResponseProto },
            { no: 100, name: "latencies", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => Duration } }
        ]);
    }
    create(value?: PartialMessage<BlipApiResponseProto>): BlipApiResponseProto {
        const message = { refreshedEncodedUserAuth: "", response: { oneofKind: undefined }, latencies: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BlipApiResponseProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BlipApiResponseProto): BlipApiResponseProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string refreshed_encoded_user_auth */ 1:
                    message.refreshedEncodedUserAuth = reader.string();
                    break;
                case /* GetBlipsResponseProto get_blips */ 2:
                    message.response = {
                        oneofKind: "getBlips",
                        getBlips: GetBlipsResponseProto.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).getBlips)
                    };
                    break;
                case /* map<string, google.protobuf.Duration> latencies */ 100:
                    this.binaryReadMap100(message.latencies, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap100(map: BlipApiResponseProto["latencies"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof BlipApiResponseProto["latencies"] | undefined, val: BlipApiResponseProto["latencies"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = Duration.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field BlipApiResponseProto.latencies");
            }
        }
        map[key ?? ""] = val ?? Duration.create();
    }
    internalBinaryWrite(message: BlipApiResponseProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string refreshed_encoded_user_auth = 1; */
        if (message.refreshedEncodedUserAuth !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.refreshedEncodedUserAuth);
        /* GetBlipsResponseProto get_blips = 2; */
        if (message.response.oneofKind === "getBlips")
            GetBlipsResponseProto.internalBinaryWrite(message.response.getBlips, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* map<string, google.protobuf.Duration> latencies = 100; */
        for (let k of Object.keys(message.latencies)) {
            writer.tag(100, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            Duration.internalBinaryWrite(message.latencies[k], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message BlipApiResponseProto
 */
export const BlipApiResponseProto = new BlipApiResponseProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetBlipsRequestProto$Type extends MessageType<GetBlipsRequestProto> {
    constructor() {
        super("GetBlipsRequestProto", []);
    }
    create(value?: PartialMessage<GetBlipsRequestProto>): GetBlipsRequestProto {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetBlipsRequestProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetBlipsRequestProto): GetBlipsRequestProto {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetBlipsRequestProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetBlipsRequestProto
 */
export const GetBlipsRequestProto = new GetBlipsRequestProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetBlipsResponseProto$Type extends MessageType<GetBlipsResponseProto> {
    constructor() {
        super("GetBlipsResponseProto", [
            { no: 1, name: "blips", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => BlipProto }
        ]);
    }
    create(value?: PartialMessage<GetBlipsResponseProto>): GetBlipsResponseProto {
        const message = { blips: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetBlipsResponseProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetBlipsResponseProto): GetBlipsResponseProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated BlipProto blips */ 1:
                    message.blips.push(BlipProto.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetBlipsResponseProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated BlipProto blips = 1; */
        for (let i = 0; i < message.blips.length; i++)
            BlipProto.internalBinaryWrite(message.blips[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetBlipsResponseProto
 */
export const GetBlipsResponseProto = new GetBlipsResponseProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BlipsCacheProto$Type extends MessageType<BlipsCacheProto> {
    constructor() {
        super("BlipsCacheProto", [
            { no: 1, name: "created_at", kind: "message", T: () => Timestamp },
            { no: 2, name: "blips", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => BlipProto }
        ]);
    }
    create(value?: PartialMessage<BlipsCacheProto>): BlipsCacheProto {
        const message = { blips: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BlipsCacheProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BlipsCacheProto): BlipsCacheProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Timestamp created_at */ 1:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* repeated BlipProto blips */ 2:
                    message.blips.push(BlipProto.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BlipsCacheProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.Timestamp created_at = 1; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated BlipProto blips = 2; */
        for (let i = 0; i < message.blips.length; i++)
            BlipProto.internalBinaryWrite(message.blips[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message BlipsCacheProto
 */
export const BlipsCacheProto = new BlipsCacheProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BlipProto$Type extends MessageType<BlipProto> {
    constructor() {
        super("BlipProto", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "created_at", kind: "message", T: () => Timestamp },
            { no: 3, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "title_emoji", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "body", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "closure_emoji", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<BlipProto>): BlipProto {
        const message = { id: "", title: "", titleEmoji: "", body: "", closureEmoji: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BlipProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BlipProto): BlipProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* google.protobuf.Timestamp created_at */ 2:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* string title */ 3:
                    message.title = reader.string();
                    break;
                case /* string title_emoji */ 4:
                    message.titleEmoji = reader.string();
                    break;
                case /* string body */ 5:
                    message.body = reader.string();
                    break;
                case /* string closure_emoji */ 6:
                    message.closureEmoji = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BlipProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* google.protobuf.Timestamp created_at = 2; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string title = 3; */
        if (message.title !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.title);
        /* string title_emoji = 4; */
        if (message.titleEmoji !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.titleEmoji);
        /* string body = 5; */
        if (message.body !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.body);
        /* string closure_emoji = 6; */
        if (message.closureEmoji !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.closureEmoji);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message BlipProto
 */
export const BlipProto = new BlipProto$Type();
