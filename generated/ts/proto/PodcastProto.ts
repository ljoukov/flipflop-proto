/* eslint-disable */
// @generated by protobuf-ts 2.9.1 with parameter eslint_disable,long_type_string,ts_nocheck
// @generated from protobuf file "PodcastProto.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "./google/protobuf/timestamp";
import { Duration } from "./google/protobuf/duration";
/**
 * @generated from protobuf message PodcastStreamApiRequestProto
 */
export interface PodcastStreamApiRequestProto {
    /**
     * @generated from protobuf field: string encoded_user_auth = 1;
     */
    encodedUserAuth: string;
    /**
     * @generated from protobuf oneof: request
     */
    request: {
        oneofKind: "create";
        /**
         * @generated from protobuf field: CreatePodcastRequestProto create = 2;
         */
        create: CreatePodcastRequestProto;
    } | {
        oneofKind: "generate";
        /**
         * @generated from protobuf field: GeneratePodcastRequestProto generate = 3;
         */
        generate: GeneratePodcastRequestProto;
    } | {
        oneofKind: "list";
        /**
         * @generated from protobuf field: ListPodcastsRequestProto list = 4;
         */
        list: ListPodcastsRequestProto;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message PodcastStreamApiResponseHeaderProto
 */
export interface PodcastStreamApiResponseHeaderProto {
    /**
     * If present the token was refreshed and the client should use this new one
     * from now onwards.
     *
     * @generated from protobuf field: string refreshed_encoded_user_auth = 1;
     */
    refreshedEncodedUserAuth: string;
    /**
     * @generated from protobuf oneof: header
     */
    header: {
        oneofKind: "createHeader";
        /**
         * @generated from protobuf field: CreatePodcastResponseHeaderProto create_header = 2;
         */
        createHeader: CreatePodcastResponseHeaderProto;
    } | {
        oneofKind: "generate";
        /**
         * @generated from protobuf field: GeneratePodcastResponseHeaderProto generate = 3;
         */
        generate: GeneratePodcastResponseHeaderProto;
    } | {
        oneofKind: "list";
        /**
         * @generated from protobuf field: ListPodcastsResponseHeaderProto list = 4;
         */
        list: ListPodcastsResponseHeaderProto;
    } | {
        oneofKind: undefined;
    };
    /**
     * @generated from protobuf field: map<string, google.protobuf.Duration> latencies = 100;
     */
    latencies: {
        [key: string]: Duration;
    };
}
/**
 * @generated from protobuf message PodcastStreamApiResponseDeltaProto
 */
export interface PodcastStreamApiResponseDeltaProto {
    /**
     * @generated from protobuf oneof: response_delta
     */
    responseDelta: {
        oneofKind: "createDelta";
        /**
         * @generated from protobuf field: CreatePodcastResponseDeltaProto create_delta = 1;
         */
        createDelta: CreatePodcastResponseDeltaProto;
    } | {
        oneofKind: "generateDelta";
        /**
         * @generated from protobuf field: GeneratePodcastResponseDeltaProto generate_delta = 2;
         */
        generateDelta: GeneratePodcastResponseDeltaProto;
    } | {
        oneofKind: "listDelta";
        /**
         * @generated from protobuf field: ListPodcastsResponseDeltaProto list_delta = 3;
         */
        listDelta: ListPodcastsResponseDeltaProto;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message CreatePodcastRequestProto
 */
export interface CreatePodcastRequestProto {
    /**
     * @generated from protobuf field: string prompt = 1;
     */
    prompt: string;
}
/**
 * @generated from protobuf message CreatePodcastResponseHeaderProto
 */
export interface CreatePodcastResponseHeaderProto {
}
/**
 * @generated from protobuf message CreatePodcastResponseDeltaProto
 */
export interface CreatePodcastResponseDeltaProto {
    /**
     * @generated from protobuf oneof: type
     */
    type: {
        oneofKind: "separator";
        /**
         * @generated from protobuf field: bool separator = 1;
         */
        separator: boolean;
    } | {
        oneofKind: "errorNoTopic";
        /**
         * This is the last delta message
         *
         * @generated from protobuf field: bool error_no_topic = 2;
         */
        errorNoTopic: boolean;
    } | {
        oneofKind: "podcast";
        /**
         * IDs start at 10
         *
         * @generated from protobuf field: PodcastProto podcast = 10;
         */
        podcast: PodcastProto;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message GeneratePodcastRequestProto
 */
export interface GeneratePodcastRequestProto {
    /**
     * @generated from protobuf field: string podcast_id = 1;
     */
    podcastId: string;
}
/**
 * @generated from protobuf message GeneratePodcastResponseHeaderProto
 */
export interface GeneratePodcastResponseHeaderProto {
}
/**
 * @generated from protobuf message GeneratePodcastResponseDeltaProto
 */
export interface GeneratePodcastResponseDeltaProto {
    /**
     * @generated from protobuf oneof: type
     */
    type: {
        oneofKind: "stateUpdate";
        /**
         * @generated from protobuf field: PodcastStateProto state_update = 1;
         */
        stateUpdate: PodcastStateProto;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message ListPodcastsRequestProto
 */
export interface ListPodcastsRequestProto {
}
/**
 * @generated from protobuf message ListPodcastsResponseHeaderProto
 */
export interface ListPodcastsResponseHeaderProto {
    /**
     * @generated from protobuf field: repeated PodcastProto podcasts = 1;
     */
    podcasts: PodcastProto[];
}
/**
 * @generated from protobuf message ListPodcastsResponseDeltaProto
 */
export interface ListPodcastsResponseDeltaProto {
    /**
     * @generated from protobuf oneof: type
     */
    type: {
        oneofKind: "ping";
        /**
         * @generated from protobuf field: bool ping = 1;
         */
        ping: boolean;
    } | {
        oneofKind: "updatedPodcast";
        /**
         * @generated from protobuf field: PodcastProto updated_podcast = 2;
         */
        updatedPodcast: PodcastProto;
    } | {
        oneofKind: "deletedPodcastId";
        /**
         * @generated from protobuf field: string deleted_podcast_id = 3;
         */
        deletedPodcastId: string;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message PodcastProto
 */
export interface PodcastProto {
    /**
     * @generated from protobuf field: string podcast_id = 1;
     */
    podcastId: string;
    /**
     * @generated from protobuf field: string created_by = 2;
     */
    createdBy: string;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp created_at = 3;
     */
    createdAt?: Timestamp;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp updated_at = 4;
     */
    updatedAt?: Timestamp;
    /**
     * @generated from protobuf field: PodcastStateProto state = 5;
     */
    state: PodcastStateProto;
    /**
     * @generated from protobuf field: string title = 6;
     */
    title: string;
    /**
     * @generated from protobuf field: string title_emoji = 7;
     */
    titleEmoji: string;
    /**
     * @generated from protobuf field: string synopsis = 8;
     */
    synopsis: string;
    /**
     * @generated from protobuf field: string audio_path = 9;
     */
    audioPath: string;
    /**
     * @generated from protobuf field: google.protobuf.Duration audio_duration = 10;
     */
    audioDuration?: Duration;
    /**
     * @generated from protobuf field: PodcastVisualsProto visuals = 11;
     */
    visuals?: PodcastVisualsProto;
}
/**
 * @generated from protobuf message StoredPodcastProto
 */
export interface StoredPodcastProto {
    /**
     * @generated from protobuf field: string podcast_id = 1;
     */
    podcastId: string;
    /**
     * @generated from protobuf field: string created_by = 2;
     */
    createdBy: string;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp created_at = 3;
     */
    createdAt?: Timestamp;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp updated_at = 4;
     */
    updatedAt?: Timestamp;
    /**
     * @generated from protobuf field: string user_prompt = 5;
     */
    userPrompt: string;
    /**
     * @generated from protobuf field: PodcastStateProto state = 6;
     */
    state: PodcastStateProto;
    /**
     * @generated from protobuf field: string reasoning = 7;
     */
    reasoning: string;
    /**
     * @generated from protobuf field: string title = 8;
     */
    title: string;
    /**
     * @generated from protobuf field: string title_emoji = 9;
     */
    titleEmoji: string;
    /**
     * @generated from protobuf field: string hook = 10;
     */
    hook: string;
    /**
     * @generated from protobuf field: string thumbnail_prompt = 11;
     */
    thumbnailPrompt: string;
    /**
     * @generated from protobuf field: string plan = 12;
     */
    plan: string;
    /**
     * @generated from protobuf field: PodcastTranscriptProto transcript = 13;
     */
    transcript?: PodcastTranscriptProto;
    /**
     * @generated from protobuf field: PodcastAudioProto audio = 14;
     */
    audio?: PodcastAudioProto;
    /**
     * @generated from protobuf field: PodcastVisualsProto visuals = 15;
     */
    visuals?: PodcastVisualsProto;
}
/**
 * @generated from protobuf message PodcastTranscriptProto
 */
export interface PodcastTranscriptProto {
    /**
     * @generated from protobuf field: string images_style = 1;
     */
    imagesStyle: string;
    /**
     * @generated from protobuf field: string thumbnail_prompt = 2;
     */
    thumbnailPrompt: string;
    /**
     * @generated from protobuf field: repeated PodcastSectionTranscriptProto sections = 3;
     */
    sections: PodcastSectionTranscriptProto[];
}
/**
 * @generated from protobuf message PodcastSectionTranscriptProto
 */
export interface PodcastSectionTranscriptProto {
    /**
     * @generated from protobuf field: PodcastSectionTypeProto section_type = 1;
     */
    sectionType: PodcastSectionTypeProto;
    /**
     * @generated from protobuf field: repeated PodcastTranscriptEntryProto entries = 2;
     */
    entries: PodcastTranscriptEntryProto[];
}
/**
 * @generated from protobuf message PodcastTranscriptEntryProto
 */
export interface PodcastTranscriptEntryProto {
    /**
     * @generated from protobuf oneof: type
     */
    type: {
        oneofKind: "host";
        /**
         * @generated from protobuf field: PodcastHostSpeechProto host = 1;
         */
        host: PodcastHostSpeechProto;
    } | {
        oneofKind: "imagePrompt";
        /**
         * @generated from protobuf field: string image_prompt = 2;
         */
        imagePrompt: string;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message PodcastHostSpeechProto
 */
export interface PodcastHostSpeechProto {
    /**
     * @generated from protobuf field: PodcastHostProto host = 1;
     */
    host: PodcastHostProto;
    /**
     * @generated from protobuf field: string text = 2;
     */
    text: string;
    /**
     * @generated from protobuf field: int32 start_millis = 3;
     */
    startMillis: number;
    /**
     * @generated from protobuf field: int32 end_millis = 4;
     */
    endMillis: number;
}
/**
 * @generated from protobuf message PodcastAudioProto
 */
export interface PodcastAudioProto {
    /**
     * @generated from protobuf field: string audio_key = 1;
     */
    audioKey: string;
    /**
     * @generated from protobuf field: google.protobuf.Duration audio_duration = 2;
     */
    audioDuration?: Duration;
    /**
     * @generated from protobuf field: repeated PodcastWordProto words = 3;
     */
    words: PodcastWordProto[];
}
/**
 * @generated from protobuf message PodcastWordProto
 */
export interface PodcastWordProto {
    /**
     * @generated from protobuf field: string word = 1;
     */
    word: string;
    /**
     * @generated from protobuf field: int32 start_millis = 2;
     */
    startMillis: number;
    /**
     * @generated from protobuf field: int32 end_millis = 3;
     */
    endMillis: number;
    /**
     * @generated from protobuf field: string separator = 4;
     */
    separator: string;
}
/**
 * @generated from protobuf message PodcastVisualsProto
 */
export interface PodcastVisualsProto {
    /**
     * @generated from protobuf field: string thumbnail_key = 1;
     */
    thumbnailKey: string;
    /**
     * @generated from protobuf field: repeated PodcastVisualProto visuals = 2;
     */
    visuals: PodcastVisualProto[];
}
/**
 * @generated from protobuf message PodcastVisualProto
 */
export interface PodcastVisualProto {
    /**
     * @generated from protobuf field: int32 timestamp_millis = 1;
     */
    timestampMillis: number;
    /**
     * @generated from protobuf field: string image_key = 2;
     */
    imageKey: string;
}
/**
 * @generated from protobuf enum PodcastStateProto
 */
export enum PodcastStateProto {
    /**
     * @generated from protobuf enum value: PODCAST_STATE_PROTO_UNKNOWN = 0;
     */
    UNKNOWN = 0,
    /**
     * @generated from protobuf enum value: PODCAST_STATE_PROTO_READY = 1;
     */
    READY = 1,
    /**
     * @generated from protobuf enum value: PODCAST_STATE_PROTO_GENERATING_SYNOPSYS = 2;
     */
    GENERATING_SYNOPSYS = 2,
    /**
     * @generated from protobuf enum value: PODCAST_STATE_PROTO_SYNOPSYS_READY = 3;
     */
    SYNOPSYS_READY = 3,
    /**
     * @generated from protobuf enum value: PODCAST_STATE_PROTO_GENERATING_THUMBNAIL = 4;
     */
    GENERATING_THUMBNAIL = 4,
    /**
     * @generated from protobuf enum value: PODCAST_STATE_PROTO_THUMBNAIL_READY = 5;
     */
    THUMBNAIL_READY = 5,
    /**
     * @generated from protobuf enum value: PODCAST_STATE_PROTO_GENERATING_PLAN = 6;
     */
    GENERATING_PLAN = 6,
    /**
     * @generated from protobuf enum value: PODCAST_STATE_PROTO_PLAN_READY = 7;
     */
    PLAN_READY = 7,
    /**
     * @generated from protobuf enum value: PODCAST_STATE_PROTO_GENERATING_TRANSCRIPT = 8;
     */
    GENERATING_TRANSCRIPT = 8,
    /**
     * @generated from protobuf enum value: PODCAST_STATE_PROTO_TRANSCRIPT_READY = 9;
     */
    TRANSCRIPT_READY = 9,
    /**
     * @generated from protobuf enum value: PODCAST_STATE_PROTO_GENERATING_AUDIO = 10;
     */
    GENERATING_AUDIO = 10,
    /**
     * @generated from protobuf enum value: PODCAST_STATE_PROTO_AUDIO_READY = 11;
     */
    AUDIO_READY = 11,
    /**
     * @generated from protobuf enum value: PODCAST_STATE_PROTO_GENERATING_VISUALS = 12;
     */
    GENERATING_VISUALS = 12,
    /**
     * @generated from protobuf enum value: PODCAST_STATE_PROTO_VISUALS_READY = 13;
     */
    VISUALS_READY = 13
}
/**
 * @generated from protobuf enum PodcastSectionTypeProto
 */
export enum PodcastSectionTypeProto {
    /**
     * @generated from protobuf enum value: PODCAST_SECTION_TYPE_PROTO_UNKNOWN = 0;
     */
    UNKNOWN = 0,
    /**
     * @generated from protobuf enum value: PODCAST_SECTION_TYPE_PROTO_INTRODUCTION = 1;
     */
    INTRODUCTION = 1,
    /**
     * @generated from protobuf enum value: PODCAST_SECTION_TYPE_PROTO_SECTION = 2;
     */
    SECTION = 2,
    /**
     * @generated from protobuf enum value: PODCAST_SECTION_TYPE_PROTO_CONCLUSION = 3;
     */
    CONCLUSION = 3
}
/**
 * @generated from protobuf enum PodcastHostProto
 */
export enum PodcastHostProto {
    /**
     * @generated from protobuf enum value: PODCAST_HOST_PROTO_UNKNOWN = 0;
     */
    UNKNOWN = 0,
    /**
     * @generated from protobuf enum value: PODCAST_HOST_PROTO_MALE = 1;
     */
    MALE = 1,
    /**
     * @generated from protobuf enum value: PODCAST_HOST_PROTO_FEMALE = 2;
     */
    FEMALE = 2
}
// @generated message type with reflection information, may provide speed optimized methods
class PodcastStreamApiRequestProto$Type extends MessageType<PodcastStreamApiRequestProto> {
    constructor() {
        super("PodcastStreamApiRequestProto", [
            { no: 1, name: "encoded_user_auth", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "create", kind: "message", oneof: "request", T: () => CreatePodcastRequestProto },
            { no: 3, name: "generate", kind: "message", oneof: "request", T: () => GeneratePodcastRequestProto },
            { no: 4, name: "list", kind: "message", oneof: "request", T: () => ListPodcastsRequestProto }
        ]);
    }
    create(value?: PartialMessage<PodcastStreamApiRequestProto>): PodcastStreamApiRequestProto {
        const message = { encodedUserAuth: "", request: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PodcastStreamApiRequestProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PodcastStreamApiRequestProto): PodcastStreamApiRequestProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string encoded_user_auth */ 1:
                    message.encodedUserAuth = reader.string();
                    break;
                case /* CreatePodcastRequestProto create */ 2:
                    message.request = {
                        oneofKind: "create",
                        create: CreatePodcastRequestProto.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).create)
                    };
                    break;
                case /* GeneratePodcastRequestProto generate */ 3:
                    message.request = {
                        oneofKind: "generate",
                        generate: GeneratePodcastRequestProto.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).generate)
                    };
                    break;
                case /* ListPodcastsRequestProto list */ 4:
                    message.request = {
                        oneofKind: "list",
                        list: ListPodcastsRequestProto.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).list)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PodcastStreamApiRequestProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string encoded_user_auth = 1; */
        if (message.encodedUserAuth !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.encodedUserAuth);
        /* CreatePodcastRequestProto create = 2; */
        if (message.request.oneofKind === "create")
            CreatePodcastRequestProto.internalBinaryWrite(message.request.create, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* GeneratePodcastRequestProto generate = 3; */
        if (message.request.oneofKind === "generate")
            GeneratePodcastRequestProto.internalBinaryWrite(message.request.generate, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* ListPodcastsRequestProto list = 4; */
        if (message.request.oneofKind === "list")
            ListPodcastsRequestProto.internalBinaryWrite(message.request.list, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PodcastStreamApiRequestProto
 */
export const PodcastStreamApiRequestProto = new PodcastStreamApiRequestProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PodcastStreamApiResponseHeaderProto$Type extends MessageType<PodcastStreamApiResponseHeaderProto> {
    constructor() {
        super("PodcastStreamApiResponseHeaderProto", [
            { no: 1, name: "refreshed_encoded_user_auth", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "create_header", kind: "message", oneof: "header", T: () => CreatePodcastResponseHeaderProto },
            { no: 3, name: "generate", kind: "message", oneof: "header", T: () => GeneratePodcastResponseHeaderProto },
            { no: 4, name: "list", kind: "message", oneof: "header", T: () => ListPodcastsResponseHeaderProto },
            { no: 100, name: "latencies", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => Duration } }
        ]);
    }
    create(value?: PartialMessage<PodcastStreamApiResponseHeaderProto>): PodcastStreamApiResponseHeaderProto {
        const message = { refreshedEncodedUserAuth: "", header: { oneofKind: undefined }, latencies: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PodcastStreamApiResponseHeaderProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PodcastStreamApiResponseHeaderProto): PodcastStreamApiResponseHeaderProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string refreshed_encoded_user_auth */ 1:
                    message.refreshedEncodedUserAuth = reader.string();
                    break;
                case /* CreatePodcastResponseHeaderProto create_header */ 2:
                    message.header = {
                        oneofKind: "createHeader",
                        createHeader: CreatePodcastResponseHeaderProto.internalBinaryRead(reader, reader.uint32(), options, (message.header as any).createHeader)
                    };
                    break;
                case /* GeneratePodcastResponseHeaderProto generate */ 3:
                    message.header = {
                        oneofKind: "generate",
                        generate: GeneratePodcastResponseHeaderProto.internalBinaryRead(reader, reader.uint32(), options, (message.header as any).generate)
                    };
                    break;
                case /* ListPodcastsResponseHeaderProto list */ 4:
                    message.header = {
                        oneofKind: "list",
                        list: ListPodcastsResponseHeaderProto.internalBinaryRead(reader, reader.uint32(), options, (message.header as any).list)
                    };
                    break;
                case /* map<string, google.protobuf.Duration> latencies */ 100:
                    this.binaryReadMap100(message.latencies, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap100(map: PodcastStreamApiResponseHeaderProto["latencies"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof PodcastStreamApiResponseHeaderProto["latencies"] | undefined, val: PodcastStreamApiResponseHeaderProto["latencies"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = Duration.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field PodcastStreamApiResponseHeaderProto.latencies");
            }
        }
        map[key ?? ""] = val ?? Duration.create();
    }
    internalBinaryWrite(message: PodcastStreamApiResponseHeaderProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string refreshed_encoded_user_auth = 1; */
        if (message.refreshedEncodedUserAuth !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.refreshedEncodedUserAuth);
        /* CreatePodcastResponseHeaderProto create_header = 2; */
        if (message.header.oneofKind === "createHeader")
            CreatePodcastResponseHeaderProto.internalBinaryWrite(message.header.createHeader, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* GeneratePodcastResponseHeaderProto generate = 3; */
        if (message.header.oneofKind === "generate")
            GeneratePodcastResponseHeaderProto.internalBinaryWrite(message.header.generate, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* ListPodcastsResponseHeaderProto list = 4; */
        if (message.header.oneofKind === "list")
            ListPodcastsResponseHeaderProto.internalBinaryWrite(message.header.list, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* map<string, google.protobuf.Duration> latencies = 100; */
        for (let k of Object.keys(message.latencies)) {
            writer.tag(100, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            Duration.internalBinaryWrite(message.latencies[k], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PodcastStreamApiResponseHeaderProto
 */
export const PodcastStreamApiResponseHeaderProto = new PodcastStreamApiResponseHeaderProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PodcastStreamApiResponseDeltaProto$Type extends MessageType<PodcastStreamApiResponseDeltaProto> {
    constructor() {
        super("PodcastStreamApiResponseDeltaProto", [
            { no: 1, name: "create_delta", kind: "message", oneof: "responseDelta", T: () => CreatePodcastResponseDeltaProto },
            { no: 2, name: "generate_delta", kind: "message", oneof: "responseDelta", T: () => GeneratePodcastResponseDeltaProto },
            { no: 3, name: "list_delta", kind: "message", oneof: "responseDelta", T: () => ListPodcastsResponseDeltaProto }
        ]);
    }
    create(value?: PartialMessage<PodcastStreamApiResponseDeltaProto>): PodcastStreamApiResponseDeltaProto {
        const message = { responseDelta: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PodcastStreamApiResponseDeltaProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PodcastStreamApiResponseDeltaProto): PodcastStreamApiResponseDeltaProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* CreatePodcastResponseDeltaProto create_delta */ 1:
                    message.responseDelta = {
                        oneofKind: "createDelta",
                        createDelta: CreatePodcastResponseDeltaProto.internalBinaryRead(reader, reader.uint32(), options, (message.responseDelta as any).createDelta)
                    };
                    break;
                case /* GeneratePodcastResponseDeltaProto generate_delta */ 2:
                    message.responseDelta = {
                        oneofKind: "generateDelta",
                        generateDelta: GeneratePodcastResponseDeltaProto.internalBinaryRead(reader, reader.uint32(), options, (message.responseDelta as any).generateDelta)
                    };
                    break;
                case /* ListPodcastsResponseDeltaProto list_delta */ 3:
                    message.responseDelta = {
                        oneofKind: "listDelta",
                        listDelta: ListPodcastsResponseDeltaProto.internalBinaryRead(reader, reader.uint32(), options, (message.responseDelta as any).listDelta)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PodcastStreamApiResponseDeltaProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* CreatePodcastResponseDeltaProto create_delta = 1; */
        if (message.responseDelta.oneofKind === "createDelta")
            CreatePodcastResponseDeltaProto.internalBinaryWrite(message.responseDelta.createDelta, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* GeneratePodcastResponseDeltaProto generate_delta = 2; */
        if (message.responseDelta.oneofKind === "generateDelta")
            GeneratePodcastResponseDeltaProto.internalBinaryWrite(message.responseDelta.generateDelta, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* ListPodcastsResponseDeltaProto list_delta = 3; */
        if (message.responseDelta.oneofKind === "listDelta")
            ListPodcastsResponseDeltaProto.internalBinaryWrite(message.responseDelta.listDelta, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PodcastStreamApiResponseDeltaProto
 */
export const PodcastStreamApiResponseDeltaProto = new PodcastStreamApiResponseDeltaProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreatePodcastRequestProto$Type extends MessageType<CreatePodcastRequestProto> {
    constructor() {
        super("CreatePodcastRequestProto", [
            { no: 1, name: "prompt", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreatePodcastRequestProto>): CreatePodcastRequestProto {
        const message = { prompt: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreatePodcastRequestProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreatePodcastRequestProto): CreatePodcastRequestProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string prompt */ 1:
                    message.prompt = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreatePodcastRequestProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string prompt = 1; */
        if (message.prompt !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.prompt);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CreatePodcastRequestProto
 */
export const CreatePodcastRequestProto = new CreatePodcastRequestProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreatePodcastResponseHeaderProto$Type extends MessageType<CreatePodcastResponseHeaderProto> {
    constructor() {
        super("CreatePodcastResponseHeaderProto", []);
    }
    create(value?: PartialMessage<CreatePodcastResponseHeaderProto>): CreatePodcastResponseHeaderProto {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreatePodcastResponseHeaderProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreatePodcastResponseHeaderProto): CreatePodcastResponseHeaderProto {
        return target ?? this.create();
    }
    internalBinaryWrite(message: CreatePodcastResponseHeaderProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CreatePodcastResponseHeaderProto
 */
export const CreatePodcastResponseHeaderProto = new CreatePodcastResponseHeaderProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreatePodcastResponseDeltaProto$Type extends MessageType<CreatePodcastResponseDeltaProto> {
    constructor() {
        super("CreatePodcastResponseDeltaProto", [
            { no: 1, name: "separator", kind: "scalar", oneof: "type", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "error_no_topic", kind: "scalar", oneof: "type", T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "podcast", kind: "message", oneof: "type", T: () => PodcastProto }
        ]);
    }
    create(value?: PartialMessage<CreatePodcastResponseDeltaProto>): CreatePodcastResponseDeltaProto {
        const message = { type: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreatePodcastResponseDeltaProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreatePodcastResponseDeltaProto): CreatePodcastResponseDeltaProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool separator */ 1:
                    message.type = {
                        oneofKind: "separator",
                        separator: reader.bool()
                    };
                    break;
                case /* bool error_no_topic */ 2:
                    message.type = {
                        oneofKind: "errorNoTopic",
                        errorNoTopic: reader.bool()
                    };
                    break;
                case /* PodcastProto podcast */ 10:
                    message.type = {
                        oneofKind: "podcast",
                        podcast: PodcastProto.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).podcast)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreatePodcastResponseDeltaProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool separator = 1; */
        if (message.type.oneofKind === "separator")
            writer.tag(1, WireType.Varint).bool(message.type.separator);
        /* bool error_no_topic = 2; */
        if (message.type.oneofKind === "errorNoTopic")
            writer.tag(2, WireType.Varint).bool(message.type.errorNoTopic);
        /* PodcastProto podcast = 10; */
        if (message.type.oneofKind === "podcast")
            PodcastProto.internalBinaryWrite(message.type.podcast, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CreatePodcastResponseDeltaProto
 */
export const CreatePodcastResponseDeltaProto = new CreatePodcastResponseDeltaProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GeneratePodcastRequestProto$Type extends MessageType<GeneratePodcastRequestProto> {
    constructor() {
        super("GeneratePodcastRequestProto", [
            { no: 1, name: "podcast_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GeneratePodcastRequestProto>): GeneratePodcastRequestProto {
        const message = { podcastId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GeneratePodcastRequestProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GeneratePodcastRequestProto): GeneratePodcastRequestProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string podcast_id */ 1:
                    message.podcastId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GeneratePodcastRequestProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string podcast_id = 1; */
        if (message.podcastId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.podcastId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GeneratePodcastRequestProto
 */
export const GeneratePodcastRequestProto = new GeneratePodcastRequestProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GeneratePodcastResponseHeaderProto$Type extends MessageType<GeneratePodcastResponseHeaderProto> {
    constructor() {
        super("GeneratePodcastResponseHeaderProto", []);
    }
    create(value?: PartialMessage<GeneratePodcastResponseHeaderProto>): GeneratePodcastResponseHeaderProto {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GeneratePodcastResponseHeaderProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GeneratePodcastResponseHeaderProto): GeneratePodcastResponseHeaderProto {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GeneratePodcastResponseHeaderProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GeneratePodcastResponseHeaderProto
 */
export const GeneratePodcastResponseHeaderProto = new GeneratePodcastResponseHeaderProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GeneratePodcastResponseDeltaProto$Type extends MessageType<GeneratePodcastResponseDeltaProto> {
    constructor() {
        super("GeneratePodcastResponseDeltaProto", [
            { no: 1, name: "state_update", kind: "enum", oneof: "type", T: () => ["PodcastStateProto", PodcastStateProto, "PODCAST_STATE_PROTO_"] }
        ]);
    }
    create(value?: PartialMessage<GeneratePodcastResponseDeltaProto>): GeneratePodcastResponseDeltaProto {
        const message = { type: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GeneratePodcastResponseDeltaProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GeneratePodcastResponseDeltaProto): GeneratePodcastResponseDeltaProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* PodcastStateProto state_update */ 1:
                    message.type = {
                        oneofKind: "stateUpdate",
                        stateUpdate: reader.int32()
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GeneratePodcastResponseDeltaProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* PodcastStateProto state_update = 1; */
        if (message.type.oneofKind === "stateUpdate")
            writer.tag(1, WireType.Varint).int32(message.type.stateUpdate);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GeneratePodcastResponseDeltaProto
 */
export const GeneratePodcastResponseDeltaProto = new GeneratePodcastResponseDeltaProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListPodcastsRequestProto$Type extends MessageType<ListPodcastsRequestProto> {
    constructor() {
        super("ListPodcastsRequestProto", []);
    }
    create(value?: PartialMessage<ListPodcastsRequestProto>): ListPodcastsRequestProto {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListPodcastsRequestProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListPodcastsRequestProto): ListPodcastsRequestProto {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ListPodcastsRequestProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ListPodcastsRequestProto
 */
export const ListPodcastsRequestProto = new ListPodcastsRequestProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListPodcastsResponseHeaderProto$Type extends MessageType<ListPodcastsResponseHeaderProto> {
    constructor() {
        super("ListPodcastsResponseHeaderProto", [
            { no: 1, name: "podcasts", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PodcastProto }
        ]);
    }
    create(value?: PartialMessage<ListPodcastsResponseHeaderProto>): ListPodcastsResponseHeaderProto {
        const message = { podcasts: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListPodcastsResponseHeaderProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListPodcastsResponseHeaderProto): ListPodcastsResponseHeaderProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated PodcastProto podcasts */ 1:
                    message.podcasts.push(PodcastProto.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListPodcastsResponseHeaderProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated PodcastProto podcasts = 1; */
        for (let i = 0; i < message.podcasts.length; i++)
            PodcastProto.internalBinaryWrite(message.podcasts[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ListPodcastsResponseHeaderProto
 */
export const ListPodcastsResponseHeaderProto = new ListPodcastsResponseHeaderProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListPodcastsResponseDeltaProto$Type extends MessageType<ListPodcastsResponseDeltaProto> {
    constructor() {
        super("ListPodcastsResponseDeltaProto", [
            { no: 1, name: "ping", kind: "scalar", oneof: "type", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "updated_podcast", kind: "message", oneof: "type", T: () => PodcastProto },
            { no: 3, name: "deleted_podcast_id", kind: "scalar", oneof: "type", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ListPodcastsResponseDeltaProto>): ListPodcastsResponseDeltaProto {
        const message = { type: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListPodcastsResponseDeltaProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListPodcastsResponseDeltaProto): ListPodcastsResponseDeltaProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool ping */ 1:
                    message.type = {
                        oneofKind: "ping",
                        ping: reader.bool()
                    };
                    break;
                case /* PodcastProto updated_podcast */ 2:
                    message.type = {
                        oneofKind: "updatedPodcast",
                        updatedPodcast: PodcastProto.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).updatedPodcast)
                    };
                    break;
                case /* string deleted_podcast_id */ 3:
                    message.type = {
                        oneofKind: "deletedPodcastId",
                        deletedPodcastId: reader.string()
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListPodcastsResponseDeltaProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool ping = 1; */
        if (message.type.oneofKind === "ping")
            writer.tag(1, WireType.Varint).bool(message.type.ping);
        /* PodcastProto updated_podcast = 2; */
        if (message.type.oneofKind === "updatedPodcast")
            PodcastProto.internalBinaryWrite(message.type.updatedPodcast, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string deleted_podcast_id = 3; */
        if (message.type.oneofKind === "deletedPodcastId")
            writer.tag(3, WireType.LengthDelimited).string(message.type.deletedPodcastId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ListPodcastsResponseDeltaProto
 */
export const ListPodcastsResponseDeltaProto = new ListPodcastsResponseDeltaProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PodcastProto$Type extends MessageType<PodcastProto> {
    constructor() {
        super("PodcastProto", [
            { no: 1, name: "podcast_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "created_by", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "created_at", kind: "message", T: () => Timestamp },
            { no: 4, name: "updated_at", kind: "message", T: () => Timestamp },
            { no: 5, name: "state", kind: "enum", T: () => ["PodcastStateProto", PodcastStateProto, "PODCAST_STATE_PROTO_"] },
            { no: 6, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "title_emoji", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "synopsis", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "audio_path", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "audio_duration", kind: "message", T: () => Duration },
            { no: 11, name: "visuals", kind: "message", T: () => PodcastVisualsProto }
        ]);
    }
    create(value?: PartialMessage<PodcastProto>): PodcastProto {
        const message = { podcastId: "", createdBy: "", state: 0, title: "", titleEmoji: "", synopsis: "", audioPath: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PodcastProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PodcastProto): PodcastProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string podcast_id */ 1:
                    message.podcastId = reader.string();
                    break;
                case /* string created_by */ 2:
                    message.createdBy = reader.string();
                    break;
                case /* google.protobuf.Timestamp created_at */ 3:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* google.protobuf.Timestamp updated_at */ 4:
                    message.updatedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.updatedAt);
                    break;
                case /* PodcastStateProto state */ 5:
                    message.state = reader.int32();
                    break;
                case /* string title */ 6:
                    message.title = reader.string();
                    break;
                case /* string title_emoji */ 7:
                    message.titleEmoji = reader.string();
                    break;
                case /* string synopsis */ 8:
                    message.synopsis = reader.string();
                    break;
                case /* string audio_path */ 9:
                    message.audioPath = reader.string();
                    break;
                case /* google.protobuf.Duration audio_duration */ 10:
                    message.audioDuration = Duration.internalBinaryRead(reader, reader.uint32(), options, message.audioDuration);
                    break;
                case /* PodcastVisualsProto visuals */ 11:
                    message.visuals = PodcastVisualsProto.internalBinaryRead(reader, reader.uint32(), options, message.visuals);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PodcastProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string podcast_id = 1; */
        if (message.podcastId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.podcastId);
        /* string created_by = 2; */
        if (message.createdBy !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.createdBy);
        /* google.protobuf.Timestamp created_at = 3; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp updated_at = 4; */
        if (message.updatedAt)
            Timestamp.internalBinaryWrite(message.updatedAt, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* PodcastStateProto state = 5; */
        if (message.state !== 0)
            writer.tag(5, WireType.Varint).int32(message.state);
        /* string title = 6; */
        if (message.title !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.title);
        /* string title_emoji = 7; */
        if (message.titleEmoji !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.titleEmoji);
        /* string synopsis = 8; */
        if (message.synopsis !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.synopsis);
        /* string audio_path = 9; */
        if (message.audioPath !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.audioPath);
        /* google.protobuf.Duration audio_duration = 10; */
        if (message.audioDuration)
            Duration.internalBinaryWrite(message.audioDuration, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* PodcastVisualsProto visuals = 11; */
        if (message.visuals)
            PodcastVisualsProto.internalBinaryWrite(message.visuals, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PodcastProto
 */
export const PodcastProto = new PodcastProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StoredPodcastProto$Type extends MessageType<StoredPodcastProto> {
    constructor() {
        super("StoredPodcastProto", [
            { no: 1, name: "podcast_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "created_by", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "created_at", kind: "message", T: () => Timestamp },
            { no: 4, name: "updated_at", kind: "message", T: () => Timestamp },
            { no: 5, name: "user_prompt", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "state", kind: "enum", T: () => ["PodcastStateProto", PodcastStateProto, "PODCAST_STATE_PROTO_"] },
            { no: 7, name: "reasoning", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "title_emoji", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "hook", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "thumbnail_prompt", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "plan", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "transcript", kind: "message", T: () => PodcastTranscriptProto },
            { no: 14, name: "audio", kind: "message", T: () => PodcastAudioProto },
            { no: 15, name: "visuals", kind: "message", T: () => PodcastVisualsProto }
        ]);
    }
    create(value?: PartialMessage<StoredPodcastProto>): StoredPodcastProto {
        const message = { podcastId: "", createdBy: "", userPrompt: "", state: 0, reasoning: "", title: "", titleEmoji: "", hook: "", thumbnailPrompt: "", plan: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StoredPodcastProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StoredPodcastProto): StoredPodcastProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string podcast_id */ 1:
                    message.podcastId = reader.string();
                    break;
                case /* string created_by */ 2:
                    message.createdBy = reader.string();
                    break;
                case /* google.protobuf.Timestamp created_at */ 3:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* google.protobuf.Timestamp updated_at */ 4:
                    message.updatedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.updatedAt);
                    break;
                case /* string user_prompt */ 5:
                    message.userPrompt = reader.string();
                    break;
                case /* PodcastStateProto state */ 6:
                    message.state = reader.int32();
                    break;
                case /* string reasoning */ 7:
                    message.reasoning = reader.string();
                    break;
                case /* string title */ 8:
                    message.title = reader.string();
                    break;
                case /* string title_emoji */ 9:
                    message.titleEmoji = reader.string();
                    break;
                case /* string hook */ 10:
                    message.hook = reader.string();
                    break;
                case /* string thumbnail_prompt */ 11:
                    message.thumbnailPrompt = reader.string();
                    break;
                case /* string plan */ 12:
                    message.plan = reader.string();
                    break;
                case /* PodcastTranscriptProto transcript */ 13:
                    message.transcript = PodcastTranscriptProto.internalBinaryRead(reader, reader.uint32(), options, message.transcript);
                    break;
                case /* PodcastAudioProto audio */ 14:
                    message.audio = PodcastAudioProto.internalBinaryRead(reader, reader.uint32(), options, message.audio);
                    break;
                case /* PodcastVisualsProto visuals */ 15:
                    message.visuals = PodcastVisualsProto.internalBinaryRead(reader, reader.uint32(), options, message.visuals);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StoredPodcastProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string podcast_id = 1; */
        if (message.podcastId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.podcastId);
        /* string created_by = 2; */
        if (message.createdBy !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.createdBy);
        /* google.protobuf.Timestamp created_at = 3; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp updated_at = 4; */
        if (message.updatedAt)
            Timestamp.internalBinaryWrite(message.updatedAt, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* string user_prompt = 5; */
        if (message.userPrompt !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.userPrompt);
        /* PodcastStateProto state = 6; */
        if (message.state !== 0)
            writer.tag(6, WireType.Varint).int32(message.state);
        /* string reasoning = 7; */
        if (message.reasoning !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.reasoning);
        /* string title = 8; */
        if (message.title !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.title);
        /* string title_emoji = 9; */
        if (message.titleEmoji !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.titleEmoji);
        /* string hook = 10; */
        if (message.hook !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.hook);
        /* string thumbnail_prompt = 11; */
        if (message.thumbnailPrompt !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.thumbnailPrompt);
        /* string plan = 12; */
        if (message.plan !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.plan);
        /* PodcastTranscriptProto transcript = 13; */
        if (message.transcript)
            PodcastTranscriptProto.internalBinaryWrite(message.transcript, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* PodcastAudioProto audio = 14; */
        if (message.audio)
            PodcastAudioProto.internalBinaryWrite(message.audio, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* PodcastVisualsProto visuals = 15; */
        if (message.visuals)
            PodcastVisualsProto.internalBinaryWrite(message.visuals, writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message StoredPodcastProto
 */
export const StoredPodcastProto = new StoredPodcastProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PodcastTranscriptProto$Type extends MessageType<PodcastTranscriptProto> {
    constructor() {
        super("PodcastTranscriptProto", [
            { no: 1, name: "images_style", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "thumbnail_prompt", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "sections", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PodcastSectionTranscriptProto }
        ]);
    }
    create(value?: PartialMessage<PodcastTranscriptProto>): PodcastTranscriptProto {
        const message = { imagesStyle: "", thumbnailPrompt: "", sections: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PodcastTranscriptProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PodcastTranscriptProto): PodcastTranscriptProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string images_style */ 1:
                    message.imagesStyle = reader.string();
                    break;
                case /* string thumbnail_prompt */ 2:
                    message.thumbnailPrompt = reader.string();
                    break;
                case /* repeated PodcastSectionTranscriptProto sections */ 3:
                    message.sections.push(PodcastSectionTranscriptProto.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PodcastTranscriptProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string images_style = 1; */
        if (message.imagesStyle !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.imagesStyle);
        /* string thumbnail_prompt = 2; */
        if (message.thumbnailPrompt !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.thumbnailPrompt);
        /* repeated PodcastSectionTranscriptProto sections = 3; */
        for (let i = 0; i < message.sections.length; i++)
            PodcastSectionTranscriptProto.internalBinaryWrite(message.sections[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PodcastTranscriptProto
 */
export const PodcastTranscriptProto = new PodcastTranscriptProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PodcastSectionTranscriptProto$Type extends MessageType<PodcastSectionTranscriptProto> {
    constructor() {
        super("PodcastSectionTranscriptProto", [
            { no: 1, name: "section_type", kind: "enum", T: () => ["PodcastSectionTypeProto", PodcastSectionTypeProto, "PODCAST_SECTION_TYPE_PROTO_"] },
            { no: 2, name: "entries", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PodcastTranscriptEntryProto }
        ]);
    }
    create(value?: PartialMessage<PodcastSectionTranscriptProto>): PodcastSectionTranscriptProto {
        const message = { sectionType: 0, entries: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PodcastSectionTranscriptProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PodcastSectionTranscriptProto): PodcastSectionTranscriptProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* PodcastSectionTypeProto section_type */ 1:
                    message.sectionType = reader.int32();
                    break;
                case /* repeated PodcastTranscriptEntryProto entries */ 2:
                    message.entries.push(PodcastTranscriptEntryProto.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PodcastSectionTranscriptProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* PodcastSectionTypeProto section_type = 1; */
        if (message.sectionType !== 0)
            writer.tag(1, WireType.Varint).int32(message.sectionType);
        /* repeated PodcastTranscriptEntryProto entries = 2; */
        for (let i = 0; i < message.entries.length; i++)
            PodcastTranscriptEntryProto.internalBinaryWrite(message.entries[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PodcastSectionTranscriptProto
 */
export const PodcastSectionTranscriptProto = new PodcastSectionTranscriptProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PodcastTranscriptEntryProto$Type extends MessageType<PodcastTranscriptEntryProto> {
    constructor() {
        super("PodcastTranscriptEntryProto", [
            { no: 1, name: "host", kind: "message", oneof: "type", T: () => PodcastHostSpeechProto },
            { no: 2, name: "image_prompt", kind: "scalar", oneof: "type", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PodcastTranscriptEntryProto>): PodcastTranscriptEntryProto {
        const message = { type: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PodcastTranscriptEntryProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PodcastTranscriptEntryProto): PodcastTranscriptEntryProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* PodcastHostSpeechProto host */ 1:
                    message.type = {
                        oneofKind: "host",
                        host: PodcastHostSpeechProto.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).host)
                    };
                    break;
                case /* string image_prompt */ 2:
                    message.type = {
                        oneofKind: "imagePrompt",
                        imagePrompt: reader.string()
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PodcastTranscriptEntryProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* PodcastHostSpeechProto host = 1; */
        if (message.type.oneofKind === "host")
            PodcastHostSpeechProto.internalBinaryWrite(message.type.host, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string image_prompt = 2; */
        if (message.type.oneofKind === "imagePrompt")
            writer.tag(2, WireType.LengthDelimited).string(message.type.imagePrompt);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PodcastTranscriptEntryProto
 */
export const PodcastTranscriptEntryProto = new PodcastTranscriptEntryProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PodcastHostSpeechProto$Type extends MessageType<PodcastHostSpeechProto> {
    constructor() {
        super("PodcastHostSpeechProto", [
            { no: 1, name: "host", kind: "enum", T: () => ["PodcastHostProto", PodcastHostProto, "PODCAST_HOST_PROTO_"] },
            { no: 2, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "start_millis", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "end_millis", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<PodcastHostSpeechProto>): PodcastHostSpeechProto {
        const message = { host: 0, text: "", startMillis: 0, endMillis: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PodcastHostSpeechProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PodcastHostSpeechProto): PodcastHostSpeechProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* PodcastHostProto host */ 1:
                    message.host = reader.int32();
                    break;
                case /* string text */ 2:
                    message.text = reader.string();
                    break;
                case /* int32 start_millis */ 3:
                    message.startMillis = reader.int32();
                    break;
                case /* int32 end_millis */ 4:
                    message.endMillis = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PodcastHostSpeechProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* PodcastHostProto host = 1; */
        if (message.host !== 0)
            writer.tag(1, WireType.Varint).int32(message.host);
        /* string text = 2; */
        if (message.text !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.text);
        /* int32 start_millis = 3; */
        if (message.startMillis !== 0)
            writer.tag(3, WireType.Varint).int32(message.startMillis);
        /* int32 end_millis = 4; */
        if (message.endMillis !== 0)
            writer.tag(4, WireType.Varint).int32(message.endMillis);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PodcastHostSpeechProto
 */
export const PodcastHostSpeechProto = new PodcastHostSpeechProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PodcastAudioProto$Type extends MessageType<PodcastAudioProto> {
    constructor() {
        super("PodcastAudioProto", [
            { no: 1, name: "audio_key", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "audio_duration", kind: "message", T: () => Duration },
            { no: 3, name: "words", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PodcastWordProto }
        ]);
    }
    create(value?: PartialMessage<PodcastAudioProto>): PodcastAudioProto {
        const message = { audioKey: "", words: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PodcastAudioProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PodcastAudioProto): PodcastAudioProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string audio_key */ 1:
                    message.audioKey = reader.string();
                    break;
                case /* google.protobuf.Duration audio_duration */ 2:
                    message.audioDuration = Duration.internalBinaryRead(reader, reader.uint32(), options, message.audioDuration);
                    break;
                case /* repeated PodcastWordProto words */ 3:
                    message.words.push(PodcastWordProto.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PodcastAudioProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string audio_key = 1; */
        if (message.audioKey !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.audioKey);
        /* google.protobuf.Duration audio_duration = 2; */
        if (message.audioDuration)
            Duration.internalBinaryWrite(message.audioDuration, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated PodcastWordProto words = 3; */
        for (let i = 0; i < message.words.length; i++)
            PodcastWordProto.internalBinaryWrite(message.words[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PodcastAudioProto
 */
export const PodcastAudioProto = new PodcastAudioProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PodcastWordProto$Type extends MessageType<PodcastWordProto> {
    constructor() {
        super("PodcastWordProto", [
            { no: 1, name: "word", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "start_millis", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "end_millis", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "separator", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PodcastWordProto>): PodcastWordProto {
        const message = { word: "", startMillis: 0, endMillis: 0, separator: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PodcastWordProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PodcastWordProto): PodcastWordProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string word */ 1:
                    message.word = reader.string();
                    break;
                case /* int32 start_millis */ 2:
                    message.startMillis = reader.int32();
                    break;
                case /* int32 end_millis */ 3:
                    message.endMillis = reader.int32();
                    break;
                case /* string separator */ 4:
                    message.separator = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PodcastWordProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string word = 1; */
        if (message.word !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.word);
        /* int32 start_millis = 2; */
        if (message.startMillis !== 0)
            writer.tag(2, WireType.Varint).int32(message.startMillis);
        /* int32 end_millis = 3; */
        if (message.endMillis !== 0)
            writer.tag(3, WireType.Varint).int32(message.endMillis);
        /* string separator = 4; */
        if (message.separator !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.separator);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PodcastWordProto
 */
export const PodcastWordProto = new PodcastWordProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PodcastVisualsProto$Type extends MessageType<PodcastVisualsProto> {
    constructor() {
        super("PodcastVisualsProto", [
            { no: 1, name: "thumbnail_key", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "visuals", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PodcastVisualProto }
        ]);
    }
    create(value?: PartialMessage<PodcastVisualsProto>): PodcastVisualsProto {
        const message = { thumbnailKey: "", visuals: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PodcastVisualsProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PodcastVisualsProto): PodcastVisualsProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string thumbnail_key */ 1:
                    message.thumbnailKey = reader.string();
                    break;
                case /* repeated PodcastVisualProto visuals */ 2:
                    message.visuals.push(PodcastVisualProto.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PodcastVisualsProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string thumbnail_key = 1; */
        if (message.thumbnailKey !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.thumbnailKey);
        /* repeated PodcastVisualProto visuals = 2; */
        for (let i = 0; i < message.visuals.length; i++)
            PodcastVisualProto.internalBinaryWrite(message.visuals[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PodcastVisualsProto
 */
export const PodcastVisualsProto = new PodcastVisualsProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PodcastVisualProto$Type extends MessageType<PodcastVisualProto> {
    constructor() {
        super("PodcastVisualProto", [
            { no: 1, name: "timestamp_millis", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "image_key", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PodcastVisualProto>): PodcastVisualProto {
        const message = { timestampMillis: 0, imageKey: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PodcastVisualProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PodcastVisualProto): PodcastVisualProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 timestamp_millis */ 1:
                    message.timestampMillis = reader.int32();
                    break;
                case /* string image_key */ 2:
                    message.imageKey = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PodcastVisualProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 timestamp_millis = 1; */
        if (message.timestampMillis !== 0)
            writer.tag(1, WireType.Varint).int32(message.timestampMillis);
        /* string image_key = 2; */
        if (message.imageKey !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.imageKey);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PodcastVisualProto
 */
export const PodcastVisualProto = new PodcastVisualProto$Type();
