/* eslint-disable */
// @generated by protobuf-ts 2.9.1 with parameter eslint_disable,long_type_string,ts_nocheck
// @generated from protobuf file "PodcastProto.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "./google/protobuf/timestamp";
import { Duration } from "./google/protobuf/duration";
/**
 * @generated from protobuf message PodcastStreamApiRequestProto
 */
export interface PodcastStreamApiRequestProto {
    /**
     * @generated from protobuf field: string encoded_user_auth = 1;
     */
    encodedUserAuth: string;
    /**
     * @generated from protobuf oneof: request
     */
    request: {
        oneofKind: "create";
        /**
         * @generated from protobuf field: CreatePodcastRequestProto create = 2;
         */
        create: CreatePodcastRequestProto;
    } | {
        oneofKind: "generate";
        /**
         * @generated from protobuf field: GeneratePodcastRequestProto generate = 3;
         */
        generate: GeneratePodcastRequestProto;
    } | {
        oneofKind: "get";
        /**
         * @generated from protobuf field: GetPodcastRequestProto get = 4;
         */
        get: GetPodcastRequestProto;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message PodcastStreamApiResponseHeaderProto
 */
export interface PodcastStreamApiResponseHeaderProto {
    /**
     * If present the token was refreshed and the client should use this new one
     * from now onwards.
     *
     * @generated from protobuf field: string refreshed_encoded_user_auth = 1;
     */
    refreshedEncodedUserAuth: string;
    /**
     * @generated from protobuf oneof: header
     */
    header: {
        oneofKind: "createHeader";
        /**
         * @generated from protobuf field: CreatePodcastResponseHeaderProto create_header = 2;
         */
        createHeader: CreatePodcastResponseHeaderProto;
    } | {
        oneofKind: "generate";
        /**
         * @generated from protobuf field: GeneratePodcastResponseHeaderProto generate = 3;
         */
        generate: GeneratePodcastResponseHeaderProto;
    } | {
        oneofKind: "get";
        /**
         * @generated from protobuf field: GetPodcastResponseHeaderProto get = 4;
         */
        get: GetPodcastResponseHeaderProto;
    } | {
        oneofKind: undefined;
    };
    /**
     * @generated from protobuf field: map<string, google.protobuf.Duration> latencies = 100;
     */
    latencies: {
        [key: string]: Duration;
    };
}
/**
 * @generated from protobuf message PodcastStreamApiResponseDeltaProto
 */
export interface PodcastStreamApiResponseDeltaProto {
    /**
     * @generated from protobuf oneof: response_delta
     */
    responseDelta: {
        oneofKind: "createDelta";
        /**
         * @generated from protobuf field: CreatePodcastResponseDeltaProto create_delta = 1;
         */
        createDelta: CreatePodcastResponseDeltaProto;
    } | {
        oneofKind: "generateDelta";
        /**
         * @generated from protobuf field: GeneratePodcastResponseDeltaProto generate_delta = 2;
         */
        generateDelta: GeneratePodcastResponseDeltaProto;
    } | {
        oneofKind: "getDelta";
        /**
         * @generated from protobuf field: GetPodcastResponseDeltaProto get_delta = 3;
         */
        getDelta: GetPodcastResponseDeltaProto;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message CreatePodcastRequestProto
 */
export interface CreatePodcastRequestProto {
    /**
     * @generated from protobuf field: string prompt = 1;
     */
    prompt: string;
}
/**
 * @generated from protobuf message CreatePodcastResponseHeaderProto
 */
export interface CreatePodcastResponseHeaderProto {
    /**
     * @generated from protobuf field: string podcast_id = 1;
     */
    podcastId: string;
}
/**
 * @generated from protobuf message CreatePodcastResponseDeltaProto
 */
export interface CreatePodcastResponseDeltaProto {
    /**
     * @generated from protobuf oneof: type
     */
    type: {
        oneofKind: "error";
        /**
         * @generated from protobuf field: PodcastErrorProto error = 1;
         */
        error: PodcastErrorProto; // This is the last delta message
    } | {
        oneofKind: "answer";
        /**
         * @generated from protobuf field: PodcastPromptAnswerProto answer = 2;
         */
        answer: PodcastPromptAnswerProto;
    } | {
        oneofKind: "point";
        /**
         * @generated from protobuf field: PodcastPointProto point = 3;
         */
        point: PodcastPointProto;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message GeneratePodcastRequestProto
 */
export interface GeneratePodcastRequestProto {
    /**
     * @generated from protobuf field: string podcast_id = 1;
     */
    podcastId: string;
    /**
     * @generated from protobuf field: repeated string point_ids = 2;
     */
    pointIds: string[];
}
/**
 * @generated from protobuf message GeneratePodcastResponseHeaderProto
 */
export interface GeneratePodcastResponseHeaderProto {
}
/**
 * @generated from protobuf message GeneratePodcastResponseDeltaProto
 */
export interface GeneratePodcastResponseDeltaProto {
    /**
     * @generated from protobuf oneof: type
     */
    type: {
        oneofKind: "card";
        /**
         * @generated from protobuf field: PodcastCardProto card = 1;
         */
        card: PodcastCardProto;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message GetPodcastRequestProto
 */
export interface GetPodcastRequestProto {
    /**
     * @generated from protobuf field: string podcast_id = 1;
     */
    podcastId: string;
}
/**
 * @generated from protobuf message GetPodcastResponseHeaderProto
 */
export interface GetPodcastResponseHeaderProto {
    /**
     * @generated from protobuf field: PodcastProto podcast = 1;
     */
    podcast?: PodcastProto;
}
/**
 * @generated from protobuf message GetPodcastResponseDeltaProto
 */
export interface GetPodcastResponseDeltaProto {
}
/**
 * @generated from protobuf message PodcastProto
 */
export interface PodcastProto {
    /**
     * @generated from protobuf field: google.protobuf.Timestamp updated_at = 1;
     */
    updatedAt?: Timestamp;
    /**
     * @generated from protobuf field: PodcastThumbnailProto thumbnail = 2;
     */
    thumbnail?: PodcastThumbnailProto;
    /**
     * @generated from protobuf field: PodcastAudioProto audio = 3;
     */
    audio?: PodcastAudioProto;
    /**
     * @generated from protobuf field: PodcastVisualsProto visuals = 4;
     */
    visuals?: PodcastVisualsProto;
    /**
     * @generated from protobuf field: PodcastTranscriptProto transcript = 5;
     */
    transcript?: PodcastTranscriptProto;
    /**
     * @generated from protobuf field: PodcastCardsProto cards = 6;
     */
    cards?: PodcastCardsProto;
}
/**
 * @generated from protobuf message FirestorePodcastProto
 */
export interface FirestorePodcastProto {
    /**
     * @generated from protobuf field: google.protobuf.Timestamp updated_at = 1;
     */
    updatedAt?: Timestamp;
    /**
     * @generated from protobuf field: PodcastThumbnailProto thumbnail = 2;
     */
    thumbnail?: PodcastThumbnailProto;
}
/**
 * @generated from protobuf message PodcastPointProto
 */
export interface PodcastPointProto {
    /**
     * @generated from protobuf field: string point_id = 1;
     */
    pointId: string;
    /**
     * @generated from protobuf field: string title = 2;
     */
    title: string;
    /**
     * @generated from protobuf field: string title_emoji = 3;
     */
    titleEmoji: string;
    /**
     * @generated from protobuf field: string outline = 4;
     */
    outline: string;
}
/**
 * @generated from protobuf message PodcastThumbnailProto
 */
export interface PodcastThumbnailProto {
    /**
     * @generated from protobuf field: PodcastStatusProto status = 1;
     */
    status: PodcastStatusProto;
    /**
     * @generated from protobuf field: string display_status = 2;
     */
    displayStatus: string;
    /**
     * @generated from protobuf field: string title = 3;
     */
    title: string;
    /**
     * @generated from protobuf field: PodcastBadgeProto badge = 4;
     */
    badge: PodcastBadgeProto;
    /**
     * @generated from protobuf field: string path = 5;
     */
    path: string;
    /**
     * @generated from protobuf field: google.protobuf.Duration duration = 6;
     */
    duration?: Duration;
}
/**
 * @generated from protobuf message PodcastAudioProto
 */
export interface PodcastAudioProto {
    /**
     * @generated from protobuf field: string path = 1;
     */
    path: string;
    /**
     * @generated from protobuf field: google.protobuf.Duration duration = 2;
     */
    duration?: Duration;
}
/**
 * @generated from protobuf message PodcastCardsProto
 */
export interface PodcastCardsProto {
    /**
     * @generated from protobuf field: bool is_ready = 1;
     */
    isReady: boolean;
    /**
     * @generated from protobuf field: repeated PodcastCardProto cards = 2;
     */
    cards: PodcastCardProto[];
}
/**
 * @generated from protobuf message PodcastCardProto
 */
export interface PodcastCardProto {
    /**
     * @generated from protobuf field: string card_id = 1;
     */
    cardId: string;
    /**
     * @generated from protobuf field: bool is_ready = 2;
     */
    isReady: boolean;
    /**
     * @generated from protobuf oneof: type
     */
    type: {
        oneofKind: "knowledge";
        /**
         * @generated from protobuf field: PodcastKnowledgeCardProto knowledge = 10;
         */
        knowledge: PodcastKnowledgeCardProto;
    } | {
        oneofKind: "multipleChoice";
        /**
         * @generated from protobuf field: PodcastMultipleChoiceCardProto multiple_choice = 11;
         */
        multipleChoice: PodcastMultipleChoiceCardProto;
    } | {
        oneofKind: "poll";
        /**
         * @generated from protobuf field: PodcastPollCardProto poll = 12;
         */
        poll: PodcastPollCardProto;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message PodcastErrorProto
 */
export interface PodcastErrorProto {
    /**
     * @generated from protobuf field: string message = 1;
     */
    message: string;
}
/**
 * @generated from protobuf message PodcastPromptAnswerProto
 */
export interface PodcastPromptAnswerProto {
    /**
     * @generated from protobuf field: string text = 1;
     */
    text: string;
}
/**
 * @generated from protobuf message PodcastVisualsProto
 */
export interface PodcastVisualsProto {
    /**
     * @generated from protobuf field: repeated PodcastVisualProto visuals = 1;
     */
    visuals: PodcastVisualProto[];
}
/**
 * @generated from protobuf message PodcastVisualProto
 */
export interface PodcastVisualProto {
    /**
     * @generated from protobuf field: int32 timestamp_millis = 1;
     */
    timestampMillis: number;
    /**
     * @generated from protobuf field: string image_path = 2;
     */
    imagePath: string;
    /**
     * @generated from protobuf field: PodcastVisualAnimationProto animation = 4;
     */
    animation?: PodcastVisualAnimationProto;
    /**
     * @generated from protobuf field: PodcastVisualTransitionProto transition = 3;
     */
    transition: PodcastVisualTransitionProto;
}
/**
 * @generated from protobuf message PodcastVisualAnimationProto
 */
export interface PodcastVisualAnimationProto {
    /**
     * @generated from protobuf field: int32 duration_millis = 1;
     */
    durationMillis: number;
    /**
     * @generated from protobuf field: float start_scale = 2;
     */
    startScale: number;
    /**
     * @generated from protobuf field: float end_scale = 3;
     */
    endScale: number;
}
/**
 * @generated from protobuf message PodcastTranscriptProto
 */
export interface PodcastTranscriptProto {
    /**
     * @generated from protobuf field: repeated PodcastTranscriptEntryProto entries = 1;
     */
    entries: PodcastTranscriptEntryProto[];
}
/**
 * @generated from protobuf message PodcastTranscriptEntryProto
 */
export interface PodcastTranscriptEntryProto {
    /**
     * @generated from protobuf field: PodcastHostProto host = 1;
     */
    host: PodcastHostProto;
    /**
     * @generated from protobuf field: repeated PodcastWordProto words = 2;
     */
    words: PodcastWordProto[];
}
/**
 * @generated from protobuf message PodcastWordProto
 */
export interface PodcastWordProto {
    /**
     * @generated from protobuf field: string word = 1;
     */
    word: string;
    /**
     * @generated from protobuf field: int32 start_millis = 2;
     */
    startMillis: number;
    /**
     * @generated from protobuf field: int32 end_millis = 3;
     */
    endMillis: number;
    /**
     * @generated from protobuf field: string separator = 4;
     */
    separator: string;
}
/**
 * No user input assumed
 *
 * @generated from protobuf message PodcastKnowledgeCardProto
 */
export interface PodcastKnowledgeCardProto {
    /**
     * @generated from protobuf field: string title = 1;
     */
    title: string;
    /**
     * @generated from protobuf field: PodcastCardHeroProto hero = 2;
     */
    hero?: PodcastCardHeroProto;
    /**
     * @generated from protobuf field: string text = 3;
     */
    text: string;
    /**
     * @generated from protobuf field: string explanation = 4;
     */
    explanation: string;
}
/**
 * 2: True/False, 3: A/B/C or 4: 1/2/3/4 user input
 *
 * @generated from protobuf message PodcastMultipleChoiceCardProto
 */
export interface PodcastMultipleChoiceCardProto {
    /**
     * @generated from protobuf field: string title = 1;
     */
    title: string;
    /**
     * @generated from protobuf field: PodcastCardHeroProto hero = 2;
     */
    hero?: PodcastCardHeroProto;
    /**
     * @generated from protobuf field: string question = 3;
     */
    question: string;
    /**
     * @generated from protobuf field: repeated PodcastMultipleChoiceOptionProto options = 4;
     */
    options: PodcastMultipleChoiceOptionProto[];
    /**
     * @generated from protobuf field: int32 correct_answer_number = 5;
     */
    correctAnswerNumber: number;
    /**
     * Number of hints is the number of possible wrong answers.
     *
     * @generated from protobuf field: repeated string hints = 6;
     */
    hints: string[];
    /**
     * @generated from protobuf field: string explanation = 7;
     */
    explanation: string;
}
/**
 * 2, 3 or 4 options to vote for
 *
 * @generated from protobuf message PodcastPollCardProto
 */
export interface PodcastPollCardProto {
    /**
     * @generated from protobuf field: string title = 1;
     */
    title: string;
    /**
     * @generated from protobuf field: PodcastCardHeroProto hero = 2;
     */
    hero?: PodcastCardHeroProto;
    /**
     * @generated from protobuf field: string question = 3;
     */
    question: string;
    /**
     * @generated from protobuf field: repeated PodcastPollOptionProto options = 4;
     */
    options: PodcastPollOptionProto[]; // commentary
}
/**
 * @generated from protobuf message PodcastCardHeroProto
 */
export interface PodcastCardHeroProto {
    /**
     * @generated from protobuf field: string emoji = 1;
     */
    emoji: string;
    /**
     * @generated from protobuf field: string lottie_url = 2;
     */
    lottieUrl: string;
}
/**
 * @generated from protobuf message PodcastMultipleChoiceOptionProto
 */
export interface PodcastMultipleChoiceOptionProto {
    /**
     * Could be a label like True/False or a short sentence
     *
     * @generated from protobuf field: string text = 1;
     */
    text: string;
}
/**
 * @generated from protobuf message PodcastPollOptionProto
 */
export interface PodcastPollOptionProto {
    /**
     * @generated from protobuf field: string text = 1;
     */
    text: string;
}
/**
 * @generated from protobuf enum PodcastStatusProto
 */
export enum PodcastStatusProto {
    /**
     * @generated from protobuf enum value: PODCAST_STATUS_PROTO_UNDEFINED = 0;
     */
    UNDEFINED = 0,
    /**
     * @generated from protobuf enum value: PODCAST_STATUS_PROTO_GENERATING = 1;
     */
    GENERATING = 1,
    /**
     * @generated from protobuf enum value: PODCAST_STATUS_PROTO_READY = 2;
     */
    READY = 2,
    /**
     * @generated from protobuf enum value: PODCAST_STATUS_PROTO_FAILED = 3;
     */
    FAILED = 3
}
/**
 * @generated from protobuf enum PodcastBadgeProto
 */
export enum PodcastBadgeProto {
    /**
     * @generated from protobuf enum value: PODCAST_BADGE_PROTO_UNDEFINED = 0;
     */
    UNDEFINED = 0,
    /**
     * @generated from protobuf enum value: PODCAST_BADGE_PROTO_NONE = 1;
     */
    NONE = 1,
    /**
     * @generated from protobuf enum value: PODCAST_BADGE_PROTO_LISTEN = 2;
     */
    LISTEN = 2,
    /**
     * @generated from protobuf enum value: PODCAST_BADGE_PROTO_POLL = 3;
     */
    POLL = 3
}
/**
 * @generated from protobuf enum PodcastVisualTransitionProto
 */
export enum PodcastVisualTransitionProto {
    /**
     * @generated from protobuf enum value: PODCAST_VISUAL_TRANSITION_PROTO_UNDEFINED = 0;
     */
    UNDEFINED = 0,
    /**
     * @generated from protobuf enum value: PODCAST_VISUAL_TRANSITION_PROTO_DISSOLVE = 1;
     */
    DISSOLVE = 1,
    /**
     * @generated from protobuf enum value: PODCAST_VISUAL_TRANSITION_PROTO_SWIPE = 2;
     */
    SWIPE = 2,
    /**
     * @generated from protobuf enum value: PODCAST_VISUAL_TRANSITION_PROTO_BAR_SWIPE = 3;
     */
    BAR_SWIPE = 3,
    /**
     * @generated from protobuf enum value: PODCAST_VISUAL_TRANSITION_PROTO_PAGE_CURL = 4;
     */
    PAGE_CURL = 4
}
/**
 * @generated from protobuf enum PodcastHostProto
 */
export enum PodcastHostProto {
    /**
     * @generated from protobuf enum value: PODCAST_HOST_PROTO_UNKNOWN = 0;
     */
    UNKNOWN = 0,
    /**
     * @generated from protobuf enum value: PODCAST_HOST_PROTO_MALE = 1;
     */
    MALE = 1,
    /**
     * @generated from protobuf enum value: PODCAST_HOST_PROTO_FEMALE = 2;
     */
    FEMALE = 2
}
// @generated message type with reflection information, may provide speed optimized methods
class PodcastStreamApiRequestProto$Type extends MessageType<PodcastStreamApiRequestProto> {
    constructor() {
        super("PodcastStreamApiRequestProto", [
            { no: 1, name: "encoded_user_auth", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "create", kind: "message", oneof: "request", T: () => CreatePodcastRequestProto },
            { no: 3, name: "generate", kind: "message", oneof: "request", T: () => GeneratePodcastRequestProto },
            { no: 4, name: "get", kind: "message", oneof: "request", T: () => GetPodcastRequestProto }
        ]);
    }
    create(value?: PartialMessage<PodcastStreamApiRequestProto>): PodcastStreamApiRequestProto {
        const message = { encodedUserAuth: "", request: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PodcastStreamApiRequestProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PodcastStreamApiRequestProto): PodcastStreamApiRequestProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string encoded_user_auth */ 1:
                    message.encodedUserAuth = reader.string();
                    break;
                case /* CreatePodcastRequestProto create */ 2:
                    message.request = {
                        oneofKind: "create",
                        create: CreatePodcastRequestProto.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).create)
                    };
                    break;
                case /* GeneratePodcastRequestProto generate */ 3:
                    message.request = {
                        oneofKind: "generate",
                        generate: GeneratePodcastRequestProto.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).generate)
                    };
                    break;
                case /* GetPodcastRequestProto get */ 4:
                    message.request = {
                        oneofKind: "get",
                        get: GetPodcastRequestProto.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).get)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PodcastStreamApiRequestProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string encoded_user_auth = 1; */
        if (message.encodedUserAuth !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.encodedUserAuth);
        /* CreatePodcastRequestProto create = 2; */
        if (message.request.oneofKind === "create")
            CreatePodcastRequestProto.internalBinaryWrite(message.request.create, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* GeneratePodcastRequestProto generate = 3; */
        if (message.request.oneofKind === "generate")
            GeneratePodcastRequestProto.internalBinaryWrite(message.request.generate, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* GetPodcastRequestProto get = 4; */
        if (message.request.oneofKind === "get")
            GetPodcastRequestProto.internalBinaryWrite(message.request.get, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PodcastStreamApiRequestProto
 */
export const PodcastStreamApiRequestProto = new PodcastStreamApiRequestProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PodcastStreamApiResponseHeaderProto$Type extends MessageType<PodcastStreamApiResponseHeaderProto> {
    constructor() {
        super("PodcastStreamApiResponseHeaderProto", [
            { no: 1, name: "refreshed_encoded_user_auth", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "create_header", kind: "message", oneof: "header", T: () => CreatePodcastResponseHeaderProto },
            { no: 3, name: "generate", kind: "message", oneof: "header", T: () => GeneratePodcastResponseHeaderProto },
            { no: 4, name: "get", kind: "message", oneof: "header", T: () => GetPodcastResponseHeaderProto },
            { no: 100, name: "latencies", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => Duration } }
        ]);
    }
    create(value?: PartialMessage<PodcastStreamApiResponseHeaderProto>): PodcastStreamApiResponseHeaderProto {
        const message = { refreshedEncodedUserAuth: "", header: { oneofKind: undefined }, latencies: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PodcastStreamApiResponseHeaderProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PodcastStreamApiResponseHeaderProto): PodcastStreamApiResponseHeaderProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string refreshed_encoded_user_auth */ 1:
                    message.refreshedEncodedUserAuth = reader.string();
                    break;
                case /* CreatePodcastResponseHeaderProto create_header */ 2:
                    message.header = {
                        oneofKind: "createHeader",
                        createHeader: CreatePodcastResponseHeaderProto.internalBinaryRead(reader, reader.uint32(), options, (message.header as any).createHeader)
                    };
                    break;
                case /* GeneratePodcastResponseHeaderProto generate */ 3:
                    message.header = {
                        oneofKind: "generate",
                        generate: GeneratePodcastResponseHeaderProto.internalBinaryRead(reader, reader.uint32(), options, (message.header as any).generate)
                    };
                    break;
                case /* GetPodcastResponseHeaderProto get */ 4:
                    message.header = {
                        oneofKind: "get",
                        get: GetPodcastResponseHeaderProto.internalBinaryRead(reader, reader.uint32(), options, (message.header as any).get)
                    };
                    break;
                case /* map<string, google.protobuf.Duration> latencies */ 100:
                    this.binaryReadMap100(message.latencies, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap100(map: PodcastStreamApiResponseHeaderProto["latencies"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof PodcastStreamApiResponseHeaderProto["latencies"] | undefined, val: PodcastStreamApiResponseHeaderProto["latencies"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = Duration.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field PodcastStreamApiResponseHeaderProto.latencies");
            }
        }
        map[key ?? ""] = val ?? Duration.create();
    }
    internalBinaryWrite(message: PodcastStreamApiResponseHeaderProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string refreshed_encoded_user_auth = 1; */
        if (message.refreshedEncodedUserAuth !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.refreshedEncodedUserAuth);
        /* CreatePodcastResponseHeaderProto create_header = 2; */
        if (message.header.oneofKind === "createHeader")
            CreatePodcastResponseHeaderProto.internalBinaryWrite(message.header.createHeader, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* GeneratePodcastResponseHeaderProto generate = 3; */
        if (message.header.oneofKind === "generate")
            GeneratePodcastResponseHeaderProto.internalBinaryWrite(message.header.generate, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* GetPodcastResponseHeaderProto get = 4; */
        if (message.header.oneofKind === "get")
            GetPodcastResponseHeaderProto.internalBinaryWrite(message.header.get, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* map<string, google.protobuf.Duration> latencies = 100; */
        for (let k of Object.keys(message.latencies)) {
            writer.tag(100, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            Duration.internalBinaryWrite(message.latencies[k], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PodcastStreamApiResponseHeaderProto
 */
export const PodcastStreamApiResponseHeaderProto = new PodcastStreamApiResponseHeaderProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PodcastStreamApiResponseDeltaProto$Type extends MessageType<PodcastStreamApiResponseDeltaProto> {
    constructor() {
        super("PodcastStreamApiResponseDeltaProto", [
            { no: 1, name: "create_delta", kind: "message", oneof: "responseDelta", T: () => CreatePodcastResponseDeltaProto },
            { no: 2, name: "generate_delta", kind: "message", oneof: "responseDelta", T: () => GeneratePodcastResponseDeltaProto },
            { no: 3, name: "get_delta", kind: "message", oneof: "responseDelta", T: () => GetPodcastResponseDeltaProto }
        ]);
    }
    create(value?: PartialMessage<PodcastStreamApiResponseDeltaProto>): PodcastStreamApiResponseDeltaProto {
        const message = { responseDelta: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PodcastStreamApiResponseDeltaProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PodcastStreamApiResponseDeltaProto): PodcastStreamApiResponseDeltaProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* CreatePodcastResponseDeltaProto create_delta */ 1:
                    message.responseDelta = {
                        oneofKind: "createDelta",
                        createDelta: CreatePodcastResponseDeltaProto.internalBinaryRead(reader, reader.uint32(), options, (message.responseDelta as any).createDelta)
                    };
                    break;
                case /* GeneratePodcastResponseDeltaProto generate_delta */ 2:
                    message.responseDelta = {
                        oneofKind: "generateDelta",
                        generateDelta: GeneratePodcastResponseDeltaProto.internalBinaryRead(reader, reader.uint32(), options, (message.responseDelta as any).generateDelta)
                    };
                    break;
                case /* GetPodcastResponseDeltaProto get_delta */ 3:
                    message.responseDelta = {
                        oneofKind: "getDelta",
                        getDelta: GetPodcastResponseDeltaProto.internalBinaryRead(reader, reader.uint32(), options, (message.responseDelta as any).getDelta)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PodcastStreamApiResponseDeltaProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* CreatePodcastResponseDeltaProto create_delta = 1; */
        if (message.responseDelta.oneofKind === "createDelta")
            CreatePodcastResponseDeltaProto.internalBinaryWrite(message.responseDelta.createDelta, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* GeneratePodcastResponseDeltaProto generate_delta = 2; */
        if (message.responseDelta.oneofKind === "generateDelta")
            GeneratePodcastResponseDeltaProto.internalBinaryWrite(message.responseDelta.generateDelta, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* GetPodcastResponseDeltaProto get_delta = 3; */
        if (message.responseDelta.oneofKind === "getDelta")
            GetPodcastResponseDeltaProto.internalBinaryWrite(message.responseDelta.getDelta, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PodcastStreamApiResponseDeltaProto
 */
export const PodcastStreamApiResponseDeltaProto = new PodcastStreamApiResponseDeltaProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreatePodcastRequestProto$Type extends MessageType<CreatePodcastRequestProto> {
    constructor() {
        super("CreatePodcastRequestProto", [
            { no: 1, name: "prompt", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreatePodcastRequestProto>): CreatePodcastRequestProto {
        const message = { prompt: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreatePodcastRequestProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreatePodcastRequestProto): CreatePodcastRequestProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string prompt */ 1:
                    message.prompt = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreatePodcastRequestProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string prompt = 1; */
        if (message.prompt !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.prompt);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CreatePodcastRequestProto
 */
export const CreatePodcastRequestProto = new CreatePodcastRequestProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreatePodcastResponseHeaderProto$Type extends MessageType<CreatePodcastResponseHeaderProto> {
    constructor() {
        super("CreatePodcastResponseHeaderProto", [
            { no: 1, name: "podcast_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreatePodcastResponseHeaderProto>): CreatePodcastResponseHeaderProto {
        const message = { podcastId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreatePodcastResponseHeaderProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreatePodcastResponseHeaderProto): CreatePodcastResponseHeaderProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string podcast_id */ 1:
                    message.podcastId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreatePodcastResponseHeaderProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string podcast_id = 1; */
        if (message.podcastId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.podcastId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CreatePodcastResponseHeaderProto
 */
export const CreatePodcastResponseHeaderProto = new CreatePodcastResponseHeaderProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreatePodcastResponseDeltaProto$Type extends MessageType<CreatePodcastResponseDeltaProto> {
    constructor() {
        super("CreatePodcastResponseDeltaProto", [
            { no: 1, name: "error", kind: "message", oneof: "type", T: () => PodcastErrorProto },
            { no: 2, name: "answer", kind: "message", oneof: "type", T: () => PodcastPromptAnswerProto },
            { no: 3, name: "point", kind: "message", oneof: "type", T: () => PodcastPointProto }
        ]);
    }
    create(value?: PartialMessage<CreatePodcastResponseDeltaProto>): CreatePodcastResponseDeltaProto {
        const message = { type: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreatePodcastResponseDeltaProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreatePodcastResponseDeltaProto): CreatePodcastResponseDeltaProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* PodcastErrorProto error */ 1:
                    message.type = {
                        oneofKind: "error",
                        error: PodcastErrorProto.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).error)
                    };
                    break;
                case /* PodcastPromptAnswerProto answer */ 2:
                    message.type = {
                        oneofKind: "answer",
                        answer: PodcastPromptAnswerProto.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).answer)
                    };
                    break;
                case /* PodcastPointProto point */ 3:
                    message.type = {
                        oneofKind: "point",
                        point: PodcastPointProto.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).point)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreatePodcastResponseDeltaProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* PodcastErrorProto error = 1; */
        if (message.type.oneofKind === "error")
            PodcastErrorProto.internalBinaryWrite(message.type.error, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* PodcastPromptAnswerProto answer = 2; */
        if (message.type.oneofKind === "answer")
            PodcastPromptAnswerProto.internalBinaryWrite(message.type.answer, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* PodcastPointProto point = 3; */
        if (message.type.oneofKind === "point")
            PodcastPointProto.internalBinaryWrite(message.type.point, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CreatePodcastResponseDeltaProto
 */
export const CreatePodcastResponseDeltaProto = new CreatePodcastResponseDeltaProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GeneratePodcastRequestProto$Type extends MessageType<GeneratePodcastRequestProto> {
    constructor() {
        super("GeneratePodcastRequestProto", [
            { no: 1, name: "podcast_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "point_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GeneratePodcastRequestProto>): GeneratePodcastRequestProto {
        const message = { podcastId: "", pointIds: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GeneratePodcastRequestProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GeneratePodcastRequestProto): GeneratePodcastRequestProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string podcast_id */ 1:
                    message.podcastId = reader.string();
                    break;
                case /* repeated string point_ids */ 2:
                    message.pointIds.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GeneratePodcastRequestProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string podcast_id = 1; */
        if (message.podcastId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.podcastId);
        /* repeated string point_ids = 2; */
        for (let i = 0; i < message.pointIds.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.pointIds[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GeneratePodcastRequestProto
 */
export const GeneratePodcastRequestProto = new GeneratePodcastRequestProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GeneratePodcastResponseHeaderProto$Type extends MessageType<GeneratePodcastResponseHeaderProto> {
    constructor() {
        super("GeneratePodcastResponseHeaderProto", []);
    }
    create(value?: PartialMessage<GeneratePodcastResponseHeaderProto>): GeneratePodcastResponseHeaderProto {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GeneratePodcastResponseHeaderProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GeneratePodcastResponseHeaderProto): GeneratePodcastResponseHeaderProto {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GeneratePodcastResponseHeaderProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GeneratePodcastResponseHeaderProto
 */
export const GeneratePodcastResponseHeaderProto = new GeneratePodcastResponseHeaderProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GeneratePodcastResponseDeltaProto$Type extends MessageType<GeneratePodcastResponseDeltaProto> {
    constructor() {
        super("GeneratePodcastResponseDeltaProto", [
            { no: 1, name: "card", kind: "message", oneof: "type", T: () => PodcastCardProto }
        ]);
    }
    create(value?: PartialMessage<GeneratePodcastResponseDeltaProto>): GeneratePodcastResponseDeltaProto {
        const message = { type: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GeneratePodcastResponseDeltaProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GeneratePodcastResponseDeltaProto): GeneratePodcastResponseDeltaProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* PodcastCardProto card */ 1:
                    message.type = {
                        oneofKind: "card",
                        card: PodcastCardProto.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).card)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GeneratePodcastResponseDeltaProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* PodcastCardProto card = 1; */
        if (message.type.oneofKind === "card")
            PodcastCardProto.internalBinaryWrite(message.type.card, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GeneratePodcastResponseDeltaProto
 */
export const GeneratePodcastResponseDeltaProto = new GeneratePodcastResponseDeltaProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetPodcastRequestProto$Type extends MessageType<GetPodcastRequestProto> {
    constructor() {
        super("GetPodcastRequestProto", [
            { no: 1, name: "podcast_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetPodcastRequestProto>): GetPodcastRequestProto {
        const message = { podcastId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetPodcastRequestProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetPodcastRequestProto): GetPodcastRequestProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string podcast_id */ 1:
                    message.podcastId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetPodcastRequestProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string podcast_id = 1; */
        if (message.podcastId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.podcastId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetPodcastRequestProto
 */
export const GetPodcastRequestProto = new GetPodcastRequestProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetPodcastResponseHeaderProto$Type extends MessageType<GetPodcastResponseHeaderProto> {
    constructor() {
        super("GetPodcastResponseHeaderProto", [
            { no: 1, name: "podcast", kind: "message", T: () => PodcastProto }
        ]);
    }
    create(value?: PartialMessage<GetPodcastResponseHeaderProto>): GetPodcastResponseHeaderProto {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetPodcastResponseHeaderProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetPodcastResponseHeaderProto): GetPodcastResponseHeaderProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* PodcastProto podcast */ 1:
                    message.podcast = PodcastProto.internalBinaryRead(reader, reader.uint32(), options, message.podcast);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetPodcastResponseHeaderProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* PodcastProto podcast = 1; */
        if (message.podcast)
            PodcastProto.internalBinaryWrite(message.podcast, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetPodcastResponseHeaderProto
 */
export const GetPodcastResponseHeaderProto = new GetPodcastResponseHeaderProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetPodcastResponseDeltaProto$Type extends MessageType<GetPodcastResponseDeltaProto> {
    constructor() {
        super("GetPodcastResponseDeltaProto", []);
    }
    create(value?: PartialMessage<GetPodcastResponseDeltaProto>): GetPodcastResponseDeltaProto {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetPodcastResponseDeltaProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetPodcastResponseDeltaProto): GetPodcastResponseDeltaProto {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetPodcastResponseDeltaProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetPodcastResponseDeltaProto
 */
export const GetPodcastResponseDeltaProto = new GetPodcastResponseDeltaProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PodcastProto$Type extends MessageType<PodcastProto> {
    constructor() {
        super("PodcastProto", [
            { no: 1, name: "updated_at", kind: "message", T: () => Timestamp },
            { no: 2, name: "thumbnail", kind: "message", T: () => PodcastThumbnailProto },
            { no: 3, name: "audio", kind: "message", T: () => PodcastAudioProto },
            { no: 4, name: "visuals", kind: "message", T: () => PodcastVisualsProto },
            { no: 5, name: "transcript", kind: "message", T: () => PodcastTranscriptProto },
            { no: 6, name: "cards", kind: "message", T: () => PodcastCardsProto }
        ]);
    }
    create(value?: PartialMessage<PodcastProto>): PodcastProto {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PodcastProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PodcastProto): PodcastProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Timestamp updated_at */ 1:
                    message.updatedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.updatedAt);
                    break;
                case /* PodcastThumbnailProto thumbnail */ 2:
                    message.thumbnail = PodcastThumbnailProto.internalBinaryRead(reader, reader.uint32(), options, message.thumbnail);
                    break;
                case /* PodcastAudioProto audio */ 3:
                    message.audio = PodcastAudioProto.internalBinaryRead(reader, reader.uint32(), options, message.audio);
                    break;
                case /* PodcastVisualsProto visuals */ 4:
                    message.visuals = PodcastVisualsProto.internalBinaryRead(reader, reader.uint32(), options, message.visuals);
                    break;
                case /* PodcastTranscriptProto transcript */ 5:
                    message.transcript = PodcastTranscriptProto.internalBinaryRead(reader, reader.uint32(), options, message.transcript);
                    break;
                case /* PodcastCardsProto cards */ 6:
                    message.cards = PodcastCardsProto.internalBinaryRead(reader, reader.uint32(), options, message.cards);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PodcastProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.Timestamp updated_at = 1; */
        if (message.updatedAt)
            Timestamp.internalBinaryWrite(message.updatedAt, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* PodcastThumbnailProto thumbnail = 2; */
        if (message.thumbnail)
            PodcastThumbnailProto.internalBinaryWrite(message.thumbnail, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* PodcastAudioProto audio = 3; */
        if (message.audio)
            PodcastAudioProto.internalBinaryWrite(message.audio, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* PodcastVisualsProto visuals = 4; */
        if (message.visuals)
            PodcastVisualsProto.internalBinaryWrite(message.visuals, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* PodcastTranscriptProto transcript = 5; */
        if (message.transcript)
            PodcastTranscriptProto.internalBinaryWrite(message.transcript, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* PodcastCardsProto cards = 6; */
        if (message.cards)
            PodcastCardsProto.internalBinaryWrite(message.cards, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PodcastProto
 */
export const PodcastProto = new PodcastProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FirestorePodcastProto$Type extends MessageType<FirestorePodcastProto> {
    constructor() {
        super("FirestorePodcastProto", [
            { no: 1, name: "updated_at", kind: "message", T: () => Timestamp },
            { no: 2, name: "thumbnail", kind: "message", T: () => PodcastThumbnailProto }
        ]);
    }
    create(value?: PartialMessage<FirestorePodcastProto>): FirestorePodcastProto {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FirestorePodcastProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FirestorePodcastProto): FirestorePodcastProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Timestamp updated_at */ 1:
                    message.updatedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.updatedAt);
                    break;
                case /* PodcastThumbnailProto thumbnail */ 2:
                    message.thumbnail = PodcastThumbnailProto.internalBinaryRead(reader, reader.uint32(), options, message.thumbnail);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FirestorePodcastProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.Timestamp updated_at = 1; */
        if (message.updatedAt)
            Timestamp.internalBinaryWrite(message.updatedAt, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* PodcastThumbnailProto thumbnail = 2; */
        if (message.thumbnail)
            PodcastThumbnailProto.internalBinaryWrite(message.thumbnail, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message FirestorePodcastProto
 */
export const FirestorePodcastProto = new FirestorePodcastProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PodcastPointProto$Type extends MessageType<PodcastPointProto> {
    constructor() {
        super("PodcastPointProto", [
            { no: 1, name: "point_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "title_emoji", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "outline", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PodcastPointProto>): PodcastPointProto {
        const message = { pointId: "", title: "", titleEmoji: "", outline: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PodcastPointProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PodcastPointProto): PodcastPointProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string point_id */ 1:
                    message.pointId = reader.string();
                    break;
                case /* string title */ 2:
                    message.title = reader.string();
                    break;
                case /* string title_emoji */ 3:
                    message.titleEmoji = reader.string();
                    break;
                case /* string outline */ 4:
                    message.outline = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PodcastPointProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string point_id = 1; */
        if (message.pointId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.pointId);
        /* string title = 2; */
        if (message.title !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.title);
        /* string title_emoji = 3; */
        if (message.titleEmoji !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.titleEmoji);
        /* string outline = 4; */
        if (message.outline !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.outline);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PodcastPointProto
 */
export const PodcastPointProto = new PodcastPointProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PodcastThumbnailProto$Type extends MessageType<PodcastThumbnailProto> {
    constructor() {
        super("PodcastThumbnailProto", [
            { no: 1, name: "status", kind: "enum", T: () => ["PodcastStatusProto", PodcastStatusProto, "PODCAST_STATUS_PROTO_"] },
            { no: 2, name: "display_status", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "badge", kind: "enum", T: () => ["PodcastBadgeProto", PodcastBadgeProto, "PODCAST_BADGE_PROTO_"] },
            { no: 5, name: "path", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "duration", kind: "message", T: () => Duration }
        ]);
    }
    create(value?: PartialMessage<PodcastThumbnailProto>): PodcastThumbnailProto {
        const message = { status: 0, displayStatus: "", title: "", badge: 0, path: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PodcastThumbnailProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PodcastThumbnailProto): PodcastThumbnailProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* PodcastStatusProto status */ 1:
                    message.status = reader.int32();
                    break;
                case /* string display_status */ 2:
                    message.displayStatus = reader.string();
                    break;
                case /* string title */ 3:
                    message.title = reader.string();
                    break;
                case /* PodcastBadgeProto badge */ 4:
                    message.badge = reader.int32();
                    break;
                case /* string path */ 5:
                    message.path = reader.string();
                    break;
                case /* google.protobuf.Duration duration */ 6:
                    message.duration = Duration.internalBinaryRead(reader, reader.uint32(), options, message.duration);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PodcastThumbnailProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* PodcastStatusProto status = 1; */
        if (message.status !== 0)
            writer.tag(1, WireType.Varint).int32(message.status);
        /* string display_status = 2; */
        if (message.displayStatus !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.displayStatus);
        /* string title = 3; */
        if (message.title !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.title);
        /* PodcastBadgeProto badge = 4; */
        if (message.badge !== 0)
            writer.tag(4, WireType.Varint).int32(message.badge);
        /* string path = 5; */
        if (message.path !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.path);
        /* google.protobuf.Duration duration = 6; */
        if (message.duration)
            Duration.internalBinaryWrite(message.duration, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PodcastThumbnailProto
 */
export const PodcastThumbnailProto = new PodcastThumbnailProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PodcastAudioProto$Type extends MessageType<PodcastAudioProto> {
    constructor() {
        super("PodcastAudioProto", [
            { no: 1, name: "path", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "duration", kind: "message", T: () => Duration }
        ]);
    }
    create(value?: PartialMessage<PodcastAudioProto>): PodcastAudioProto {
        const message = { path: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PodcastAudioProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PodcastAudioProto): PodcastAudioProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string path */ 1:
                    message.path = reader.string();
                    break;
                case /* google.protobuf.Duration duration */ 2:
                    message.duration = Duration.internalBinaryRead(reader, reader.uint32(), options, message.duration);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PodcastAudioProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string path = 1; */
        if (message.path !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.path);
        /* google.protobuf.Duration duration = 2; */
        if (message.duration)
            Duration.internalBinaryWrite(message.duration, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PodcastAudioProto
 */
export const PodcastAudioProto = new PodcastAudioProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PodcastCardsProto$Type extends MessageType<PodcastCardsProto> {
    constructor() {
        super("PodcastCardsProto", [
            { no: 1, name: "is_ready", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "cards", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PodcastCardProto }
        ]);
    }
    create(value?: PartialMessage<PodcastCardsProto>): PodcastCardsProto {
        const message = { isReady: false, cards: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PodcastCardsProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PodcastCardsProto): PodcastCardsProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool is_ready */ 1:
                    message.isReady = reader.bool();
                    break;
                case /* repeated PodcastCardProto cards */ 2:
                    message.cards.push(PodcastCardProto.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PodcastCardsProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool is_ready = 1; */
        if (message.isReady !== false)
            writer.tag(1, WireType.Varint).bool(message.isReady);
        /* repeated PodcastCardProto cards = 2; */
        for (let i = 0; i < message.cards.length; i++)
            PodcastCardProto.internalBinaryWrite(message.cards[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PodcastCardsProto
 */
export const PodcastCardsProto = new PodcastCardsProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PodcastCardProto$Type extends MessageType<PodcastCardProto> {
    constructor() {
        super("PodcastCardProto", [
            { no: 1, name: "card_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "is_ready", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "knowledge", kind: "message", oneof: "type", T: () => PodcastKnowledgeCardProto },
            { no: 11, name: "multiple_choice", kind: "message", oneof: "type", T: () => PodcastMultipleChoiceCardProto },
            { no: 12, name: "poll", kind: "message", oneof: "type", T: () => PodcastPollCardProto }
        ]);
    }
    create(value?: PartialMessage<PodcastCardProto>): PodcastCardProto {
        const message = { cardId: "", isReady: false, type: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PodcastCardProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PodcastCardProto): PodcastCardProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string card_id */ 1:
                    message.cardId = reader.string();
                    break;
                case /* bool is_ready */ 2:
                    message.isReady = reader.bool();
                    break;
                case /* PodcastKnowledgeCardProto knowledge */ 10:
                    message.type = {
                        oneofKind: "knowledge",
                        knowledge: PodcastKnowledgeCardProto.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).knowledge)
                    };
                    break;
                case /* PodcastMultipleChoiceCardProto multiple_choice */ 11:
                    message.type = {
                        oneofKind: "multipleChoice",
                        multipleChoice: PodcastMultipleChoiceCardProto.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).multipleChoice)
                    };
                    break;
                case /* PodcastPollCardProto poll */ 12:
                    message.type = {
                        oneofKind: "poll",
                        poll: PodcastPollCardProto.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).poll)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PodcastCardProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string card_id = 1; */
        if (message.cardId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.cardId);
        /* bool is_ready = 2; */
        if (message.isReady !== false)
            writer.tag(2, WireType.Varint).bool(message.isReady);
        /* PodcastKnowledgeCardProto knowledge = 10; */
        if (message.type.oneofKind === "knowledge")
            PodcastKnowledgeCardProto.internalBinaryWrite(message.type.knowledge, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* PodcastMultipleChoiceCardProto multiple_choice = 11; */
        if (message.type.oneofKind === "multipleChoice")
            PodcastMultipleChoiceCardProto.internalBinaryWrite(message.type.multipleChoice, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* PodcastPollCardProto poll = 12; */
        if (message.type.oneofKind === "poll")
            PodcastPollCardProto.internalBinaryWrite(message.type.poll, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PodcastCardProto
 */
export const PodcastCardProto = new PodcastCardProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PodcastErrorProto$Type extends MessageType<PodcastErrorProto> {
    constructor() {
        super("PodcastErrorProto", [
            { no: 1, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PodcastErrorProto>): PodcastErrorProto {
        const message = { message: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PodcastErrorProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PodcastErrorProto): PodcastErrorProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string message */ 1:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PodcastErrorProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string message = 1; */
        if (message.message !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PodcastErrorProto
 */
export const PodcastErrorProto = new PodcastErrorProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PodcastPromptAnswerProto$Type extends MessageType<PodcastPromptAnswerProto> {
    constructor() {
        super("PodcastPromptAnswerProto", [
            { no: 1, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PodcastPromptAnswerProto>): PodcastPromptAnswerProto {
        const message = { text: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PodcastPromptAnswerProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PodcastPromptAnswerProto): PodcastPromptAnswerProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string text */ 1:
                    message.text = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PodcastPromptAnswerProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string text = 1; */
        if (message.text !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.text);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PodcastPromptAnswerProto
 */
export const PodcastPromptAnswerProto = new PodcastPromptAnswerProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PodcastVisualsProto$Type extends MessageType<PodcastVisualsProto> {
    constructor() {
        super("PodcastVisualsProto", [
            { no: 1, name: "visuals", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PodcastVisualProto }
        ]);
    }
    create(value?: PartialMessage<PodcastVisualsProto>): PodcastVisualsProto {
        const message = { visuals: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PodcastVisualsProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PodcastVisualsProto): PodcastVisualsProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated PodcastVisualProto visuals */ 1:
                    message.visuals.push(PodcastVisualProto.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PodcastVisualsProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated PodcastVisualProto visuals = 1; */
        for (let i = 0; i < message.visuals.length; i++)
            PodcastVisualProto.internalBinaryWrite(message.visuals[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PodcastVisualsProto
 */
export const PodcastVisualsProto = new PodcastVisualsProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PodcastVisualProto$Type extends MessageType<PodcastVisualProto> {
    constructor() {
        super("PodcastVisualProto", [
            { no: 1, name: "timestamp_millis", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "image_path", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "animation", kind: "message", T: () => PodcastVisualAnimationProto },
            { no: 3, name: "transition", kind: "enum", T: () => ["PodcastVisualTransitionProto", PodcastVisualTransitionProto, "PODCAST_VISUAL_TRANSITION_PROTO_"] }
        ]);
    }
    create(value?: PartialMessage<PodcastVisualProto>): PodcastVisualProto {
        const message = { timestampMillis: 0, imagePath: "", transition: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PodcastVisualProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PodcastVisualProto): PodcastVisualProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 timestamp_millis */ 1:
                    message.timestampMillis = reader.int32();
                    break;
                case /* string image_path */ 2:
                    message.imagePath = reader.string();
                    break;
                case /* PodcastVisualAnimationProto animation */ 4:
                    message.animation = PodcastVisualAnimationProto.internalBinaryRead(reader, reader.uint32(), options, message.animation);
                    break;
                case /* PodcastVisualTransitionProto transition */ 3:
                    message.transition = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PodcastVisualProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 timestamp_millis = 1; */
        if (message.timestampMillis !== 0)
            writer.tag(1, WireType.Varint).int32(message.timestampMillis);
        /* string image_path = 2; */
        if (message.imagePath !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.imagePath);
        /* PodcastVisualAnimationProto animation = 4; */
        if (message.animation)
            PodcastVisualAnimationProto.internalBinaryWrite(message.animation, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* PodcastVisualTransitionProto transition = 3; */
        if (message.transition !== 0)
            writer.tag(3, WireType.Varint).int32(message.transition);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PodcastVisualProto
 */
export const PodcastVisualProto = new PodcastVisualProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PodcastVisualAnimationProto$Type extends MessageType<PodcastVisualAnimationProto> {
    constructor() {
        super("PodcastVisualAnimationProto", [
            { no: 1, name: "duration_millis", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "start_scale", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 3, name: "end_scale", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<PodcastVisualAnimationProto>): PodcastVisualAnimationProto {
        const message = { durationMillis: 0, startScale: 0, endScale: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PodcastVisualAnimationProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PodcastVisualAnimationProto): PodcastVisualAnimationProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 duration_millis */ 1:
                    message.durationMillis = reader.int32();
                    break;
                case /* float start_scale */ 2:
                    message.startScale = reader.float();
                    break;
                case /* float end_scale */ 3:
                    message.endScale = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PodcastVisualAnimationProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 duration_millis = 1; */
        if (message.durationMillis !== 0)
            writer.tag(1, WireType.Varint).int32(message.durationMillis);
        /* float start_scale = 2; */
        if (message.startScale !== 0)
            writer.tag(2, WireType.Bit32).float(message.startScale);
        /* float end_scale = 3; */
        if (message.endScale !== 0)
            writer.tag(3, WireType.Bit32).float(message.endScale);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PodcastVisualAnimationProto
 */
export const PodcastVisualAnimationProto = new PodcastVisualAnimationProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PodcastTranscriptProto$Type extends MessageType<PodcastTranscriptProto> {
    constructor() {
        super("PodcastTranscriptProto", [
            { no: 1, name: "entries", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PodcastTranscriptEntryProto }
        ]);
    }
    create(value?: PartialMessage<PodcastTranscriptProto>): PodcastTranscriptProto {
        const message = { entries: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PodcastTranscriptProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PodcastTranscriptProto): PodcastTranscriptProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated PodcastTranscriptEntryProto entries */ 1:
                    message.entries.push(PodcastTranscriptEntryProto.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PodcastTranscriptProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated PodcastTranscriptEntryProto entries = 1; */
        for (let i = 0; i < message.entries.length; i++)
            PodcastTranscriptEntryProto.internalBinaryWrite(message.entries[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PodcastTranscriptProto
 */
export const PodcastTranscriptProto = new PodcastTranscriptProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PodcastTranscriptEntryProto$Type extends MessageType<PodcastTranscriptEntryProto> {
    constructor() {
        super("PodcastTranscriptEntryProto", [
            { no: 1, name: "host", kind: "enum", T: () => ["PodcastHostProto", PodcastHostProto, "PODCAST_HOST_PROTO_"] },
            { no: 2, name: "words", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PodcastWordProto }
        ]);
    }
    create(value?: PartialMessage<PodcastTranscriptEntryProto>): PodcastTranscriptEntryProto {
        const message = { host: 0, words: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PodcastTranscriptEntryProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PodcastTranscriptEntryProto): PodcastTranscriptEntryProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* PodcastHostProto host */ 1:
                    message.host = reader.int32();
                    break;
                case /* repeated PodcastWordProto words */ 2:
                    message.words.push(PodcastWordProto.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PodcastTranscriptEntryProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* PodcastHostProto host = 1; */
        if (message.host !== 0)
            writer.tag(1, WireType.Varint).int32(message.host);
        /* repeated PodcastWordProto words = 2; */
        for (let i = 0; i < message.words.length; i++)
            PodcastWordProto.internalBinaryWrite(message.words[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PodcastTranscriptEntryProto
 */
export const PodcastTranscriptEntryProto = new PodcastTranscriptEntryProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PodcastWordProto$Type extends MessageType<PodcastWordProto> {
    constructor() {
        super("PodcastWordProto", [
            { no: 1, name: "word", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "start_millis", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "end_millis", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "separator", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PodcastWordProto>): PodcastWordProto {
        const message = { word: "", startMillis: 0, endMillis: 0, separator: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PodcastWordProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PodcastWordProto): PodcastWordProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string word */ 1:
                    message.word = reader.string();
                    break;
                case /* int32 start_millis */ 2:
                    message.startMillis = reader.int32();
                    break;
                case /* int32 end_millis */ 3:
                    message.endMillis = reader.int32();
                    break;
                case /* string separator */ 4:
                    message.separator = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PodcastWordProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string word = 1; */
        if (message.word !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.word);
        /* int32 start_millis = 2; */
        if (message.startMillis !== 0)
            writer.tag(2, WireType.Varint).int32(message.startMillis);
        /* int32 end_millis = 3; */
        if (message.endMillis !== 0)
            writer.tag(3, WireType.Varint).int32(message.endMillis);
        /* string separator = 4; */
        if (message.separator !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.separator);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PodcastWordProto
 */
export const PodcastWordProto = new PodcastWordProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PodcastKnowledgeCardProto$Type extends MessageType<PodcastKnowledgeCardProto> {
    constructor() {
        super("PodcastKnowledgeCardProto", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "hero", kind: "message", T: () => PodcastCardHeroProto },
            { no: 3, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "explanation", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PodcastKnowledgeCardProto>): PodcastKnowledgeCardProto {
        const message = { title: "", text: "", explanation: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PodcastKnowledgeCardProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PodcastKnowledgeCardProto): PodcastKnowledgeCardProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* PodcastCardHeroProto hero */ 2:
                    message.hero = PodcastCardHeroProto.internalBinaryRead(reader, reader.uint32(), options, message.hero);
                    break;
                case /* string text */ 3:
                    message.text = reader.string();
                    break;
                case /* string explanation */ 4:
                    message.explanation = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PodcastKnowledgeCardProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* PodcastCardHeroProto hero = 2; */
        if (message.hero)
            PodcastCardHeroProto.internalBinaryWrite(message.hero, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string text = 3; */
        if (message.text !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.text);
        /* string explanation = 4; */
        if (message.explanation !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.explanation);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PodcastKnowledgeCardProto
 */
export const PodcastKnowledgeCardProto = new PodcastKnowledgeCardProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PodcastMultipleChoiceCardProto$Type extends MessageType<PodcastMultipleChoiceCardProto> {
    constructor() {
        super("PodcastMultipleChoiceCardProto", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "hero", kind: "message", T: () => PodcastCardHeroProto },
            { no: 3, name: "question", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "options", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PodcastMultipleChoiceOptionProto },
            { no: 5, name: "correct_answer_number", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "hints", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "explanation", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PodcastMultipleChoiceCardProto>): PodcastMultipleChoiceCardProto {
        const message = { title: "", question: "", options: [], correctAnswerNumber: 0, hints: [], explanation: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PodcastMultipleChoiceCardProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PodcastMultipleChoiceCardProto): PodcastMultipleChoiceCardProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* PodcastCardHeroProto hero */ 2:
                    message.hero = PodcastCardHeroProto.internalBinaryRead(reader, reader.uint32(), options, message.hero);
                    break;
                case /* string question */ 3:
                    message.question = reader.string();
                    break;
                case /* repeated PodcastMultipleChoiceOptionProto options */ 4:
                    message.options.push(PodcastMultipleChoiceOptionProto.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int32 correct_answer_number */ 5:
                    message.correctAnswerNumber = reader.int32();
                    break;
                case /* repeated string hints */ 6:
                    message.hints.push(reader.string());
                    break;
                case /* string explanation */ 7:
                    message.explanation = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PodcastMultipleChoiceCardProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* PodcastCardHeroProto hero = 2; */
        if (message.hero)
            PodcastCardHeroProto.internalBinaryWrite(message.hero, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string question = 3; */
        if (message.question !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.question);
        /* repeated PodcastMultipleChoiceOptionProto options = 4; */
        for (let i = 0; i < message.options.length; i++)
            PodcastMultipleChoiceOptionProto.internalBinaryWrite(message.options[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* int32 correct_answer_number = 5; */
        if (message.correctAnswerNumber !== 0)
            writer.tag(5, WireType.Varint).int32(message.correctAnswerNumber);
        /* repeated string hints = 6; */
        for (let i = 0; i < message.hints.length; i++)
            writer.tag(6, WireType.LengthDelimited).string(message.hints[i]);
        /* string explanation = 7; */
        if (message.explanation !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.explanation);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PodcastMultipleChoiceCardProto
 */
export const PodcastMultipleChoiceCardProto = new PodcastMultipleChoiceCardProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PodcastPollCardProto$Type extends MessageType<PodcastPollCardProto> {
    constructor() {
        super("PodcastPollCardProto", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "hero", kind: "message", T: () => PodcastCardHeroProto },
            { no: 3, name: "question", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "options", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PodcastPollOptionProto }
        ]);
    }
    create(value?: PartialMessage<PodcastPollCardProto>): PodcastPollCardProto {
        const message = { title: "", question: "", options: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PodcastPollCardProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PodcastPollCardProto): PodcastPollCardProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* PodcastCardHeroProto hero */ 2:
                    message.hero = PodcastCardHeroProto.internalBinaryRead(reader, reader.uint32(), options, message.hero);
                    break;
                case /* string question */ 3:
                    message.question = reader.string();
                    break;
                case /* repeated PodcastPollOptionProto options */ 4:
                    message.options.push(PodcastPollOptionProto.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PodcastPollCardProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* PodcastCardHeroProto hero = 2; */
        if (message.hero)
            PodcastCardHeroProto.internalBinaryWrite(message.hero, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string question = 3; */
        if (message.question !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.question);
        /* repeated PodcastPollOptionProto options = 4; */
        for (let i = 0; i < message.options.length; i++)
            PodcastPollOptionProto.internalBinaryWrite(message.options[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PodcastPollCardProto
 */
export const PodcastPollCardProto = new PodcastPollCardProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PodcastCardHeroProto$Type extends MessageType<PodcastCardHeroProto> {
    constructor() {
        super("PodcastCardHeroProto", [
            { no: 1, name: "emoji", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "lottie_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PodcastCardHeroProto>): PodcastCardHeroProto {
        const message = { emoji: "", lottieUrl: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PodcastCardHeroProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PodcastCardHeroProto): PodcastCardHeroProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string emoji */ 1:
                    message.emoji = reader.string();
                    break;
                case /* string lottie_url */ 2:
                    message.lottieUrl = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PodcastCardHeroProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string emoji = 1; */
        if (message.emoji !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.emoji);
        /* string lottie_url = 2; */
        if (message.lottieUrl !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.lottieUrl);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PodcastCardHeroProto
 */
export const PodcastCardHeroProto = new PodcastCardHeroProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PodcastMultipleChoiceOptionProto$Type extends MessageType<PodcastMultipleChoiceOptionProto> {
    constructor() {
        super("PodcastMultipleChoiceOptionProto", [
            { no: 1, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PodcastMultipleChoiceOptionProto>): PodcastMultipleChoiceOptionProto {
        const message = { text: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PodcastMultipleChoiceOptionProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PodcastMultipleChoiceOptionProto): PodcastMultipleChoiceOptionProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string text */ 1:
                    message.text = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PodcastMultipleChoiceOptionProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string text = 1; */
        if (message.text !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.text);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PodcastMultipleChoiceOptionProto
 */
export const PodcastMultipleChoiceOptionProto = new PodcastMultipleChoiceOptionProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PodcastPollOptionProto$Type extends MessageType<PodcastPollOptionProto> {
    constructor() {
        super("PodcastPollOptionProto", [
            { no: 1, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PodcastPollOptionProto>): PodcastPollOptionProto {
        const message = { text: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PodcastPollOptionProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PodcastPollOptionProto): PodcastPollOptionProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string text */ 1:
                    message.text = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PodcastPollOptionProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string text = 1; */
        if (message.text !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.text);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PodcastPollOptionProto
 */
export const PodcastPollOptionProto = new PodcastPollOptionProto$Type();
