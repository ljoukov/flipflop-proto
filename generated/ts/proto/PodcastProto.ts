/* eslint-disable */
// @generated by protobuf-ts 2.9.1 with parameter eslint_disable,long_type_string,ts_nocheck
// @generated from protobuf file "PodcastProto.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "./google/protobuf/timestamp";
/**
 * @generated from protobuf message PodcastEpisodeProto
 */
export interface PodcastEpisodeProto {
    /**
     * @generated from protobuf field: string episode_id = 1;
     */
    episodeId: string;
    /**
     * @generated from protobuf field: PodcastEpisodeState state = 2;
     */
    state: PodcastEpisodeState;
    /**
     * @generated from protobuf field: string title = 3;
     */
    title: string;
    /**
     * @generated from protobuf field: string text = 4;
     */
    text: string;
    /**
     * @generated from protobuf field: repeated string raw_refs = 5;
     */
    rawRefs: string[];
}
/**
 * @generated from protobuf message PodcastProto
 */
export interface PodcastProto {
    /**
     * @generated from protobuf field: string podcast_id = 1;
     */
    podcastId: string;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp created_at = 2;
     */
    createdAt?: Timestamp;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp updated_at = 3;
     */
    updatedAt?: Timestamp;
    /**
     * @generated from protobuf field: string title = 4;
     */
    title: string;
    /**
     * @generated from protobuf field: string subtitle = 5;
     */
    subtitle: string;
    /**
     * @generated from protobuf field: string about = 6;
     */
    about: string;
    /**
     * @generated from protobuf field: repeated PodcastEpisodeProto episodes = 7;
     */
    episodes: PodcastEpisodeProto[];
}
/**
 * @generated from protobuf enum PodcastEpisodeState
 */
export enum PodcastEpisodeState {
    /**
     * @generated from protobuf enum value: PODCAST_EPISODE_STATE_UNKNOWN = 0;
     */
    UNKNOWN = 0,
    /**
     * @generated from protobuf enum value: PODCAST_EPISODE_STATE_DRAFT = 1;
     */
    DRAFT = 1,
    /**
     * @generated from protobuf enum value: PODCAST_EPISODE_STATE_PUBLISHED = 2;
     */
    PUBLISHED = 2,
    /**
     * @generated from protobuf enum value: PODCAST_EPISODE_STATE_ARCHIVED = 3;
     */
    ARCHIVED = 3
}
// @generated message type with reflection information, may provide speed optimized methods
class PodcastEpisodeProto$Type extends MessageType<PodcastEpisodeProto> {
    constructor() {
        super("PodcastEpisodeProto", [
            { no: 1, name: "episode_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "state", kind: "enum", T: () => ["PodcastEpisodeState", PodcastEpisodeState, "PODCAST_EPISODE_STATE_"] },
            { no: 3, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "raw_refs", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PodcastEpisodeProto>): PodcastEpisodeProto {
        const message = { episodeId: "", state: 0, title: "", text: "", rawRefs: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PodcastEpisodeProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PodcastEpisodeProto): PodcastEpisodeProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string episode_id */ 1:
                    message.episodeId = reader.string();
                    break;
                case /* PodcastEpisodeState state */ 2:
                    message.state = reader.int32();
                    break;
                case /* string title */ 3:
                    message.title = reader.string();
                    break;
                case /* string text */ 4:
                    message.text = reader.string();
                    break;
                case /* repeated string raw_refs */ 5:
                    message.rawRefs.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PodcastEpisodeProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string episode_id = 1; */
        if (message.episodeId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.episodeId);
        /* PodcastEpisodeState state = 2; */
        if (message.state !== 0)
            writer.tag(2, WireType.Varint).int32(message.state);
        /* string title = 3; */
        if (message.title !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.title);
        /* string text = 4; */
        if (message.text !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.text);
        /* repeated string raw_refs = 5; */
        for (let i = 0; i < message.rawRefs.length; i++)
            writer.tag(5, WireType.LengthDelimited).string(message.rawRefs[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PodcastEpisodeProto
 */
export const PodcastEpisodeProto = new PodcastEpisodeProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PodcastProto$Type extends MessageType<PodcastProto> {
    constructor() {
        super("PodcastProto", [
            { no: 1, name: "podcast_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "created_at", kind: "message", T: () => Timestamp },
            { no: 3, name: "updated_at", kind: "message", T: () => Timestamp },
            { no: 4, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "subtitle", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "about", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "episodes", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PodcastEpisodeProto }
        ]);
    }
    create(value?: PartialMessage<PodcastProto>): PodcastProto {
        const message = { podcastId: "", title: "", subtitle: "", about: "", episodes: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PodcastProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PodcastProto): PodcastProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string podcast_id */ 1:
                    message.podcastId = reader.string();
                    break;
                case /* google.protobuf.Timestamp created_at */ 2:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* google.protobuf.Timestamp updated_at */ 3:
                    message.updatedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.updatedAt);
                    break;
                case /* string title */ 4:
                    message.title = reader.string();
                    break;
                case /* string subtitle */ 5:
                    message.subtitle = reader.string();
                    break;
                case /* string about */ 6:
                    message.about = reader.string();
                    break;
                case /* repeated PodcastEpisodeProto episodes */ 7:
                    message.episodes.push(PodcastEpisodeProto.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PodcastProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string podcast_id = 1; */
        if (message.podcastId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.podcastId);
        /* google.protobuf.Timestamp created_at = 2; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp updated_at = 3; */
        if (message.updatedAt)
            Timestamp.internalBinaryWrite(message.updatedAt, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* string title = 4; */
        if (message.title !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.title);
        /* string subtitle = 5; */
        if (message.subtitle !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.subtitle);
        /* string about = 6; */
        if (message.about !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.about);
        /* repeated PodcastEpisodeProto episodes = 7; */
        for (let i = 0; i < message.episodes.length; i++)
            PodcastEpisodeProto.internalBinaryWrite(message.episodes[i], writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PodcastProto
 */
export const PodcastProto = new PodcastProto$Type();
