/* eslint-disable */
// @generated by protobuf-ts 2.9.4 with parameter eslint_disable,long_type_string,ts_nocheck
// @generated from protobuf file "PodcastProto.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "./google/protobuf/timestamp";
import { Duration } from "./google/protobuf/duration";
/**
 * @generated from protobuf message PodcastRequestAuthProto
 */
export interface PodcastRequestAuthProto {
    /**
     * @generated from protobuf field: string firebase_id_token = 1;
     */
    firebaseIdToken: string;
    /**
     * @generated from protobuf field: string appcheck_token = 2;
     */
    appcheckToken: string;
    /**
     * @generated from protobuf field: bool is_anonomous = 3;
     */
    isAnonomous: boolean;
    /**
     * @generated from protobuf field: repeated PodcastAppStoreTransactionProto appstore_current_entitlements = 4;
     */
    appstoreCurrentEntitlements: PodcastAppStoreTransactionProto[];
}
/**
 * @generated from protobuf message PodcastSubscriptionStatusProto
 */
export interface PodcastSubscriptionStatusProto {
    /**
     * @generated from protobuf field: bool is_subscriber = 1;
     */
    isSubscriber: boolean;
    /**
     * @generated from protobuf field: PodcastSubscriptionSourceProto source = 2;
     */
    source: PodcastSubscriptionSourceProto;
}
/**
 * @generated from protobuf message PodcastStreamApiRequestProto
 */
export interface PodcastStreamApiRequestProto {
    /**
     * @generated from protobuf field: PodcastRequestAuthProto request_auth = 1;
     */
    requestAuth?: PodcastRequestAuthProto;
    /**
     * @generated from protobuf oneof: request
     */
    request: {
        oneofKind: "create";
        /**
         * @generated from protobuf field: CreatePodcastRequestProto create = 10;
         */
        create: CreatePodcastRequestProto;
    } | {
        oneofKind: "generate";
        /**
         * @generated from protobuf field: GeneratePodcastRequestProto generate = 11;
         */
        generate: GeneratePodcastRequestProto;
    } | {
        oneofKind: "podcast";
        /**
         * @generated from protobuf field: GetPodcastRequestProto podcast = 12;
         */
        podcast: GetPodcastRequestProto;
    } | {
        oneofKind: "story";
        /**
         * @generated from protobuf field: GetPodcastStoryRequestProto story = 13;
         */
        story: GetPodcastStoryRequestProto;
    } | {
        oneofKind: "suggestionPoints";
        /**
         * @generated from protobuf field: GetPodcastSuggestionPointsProto suggestion_points = 14;
         */
        suggestionPoints: GetPodcastSuggestionPointsProto;
    } | {
        oneofKind: "home";
        /**
         * @generated from protobuf field: GetPodcastHomeRequestProto home = 15;
         */
        home: GetPodcastHomeRequestProto;
    } | {
        oneofKind: "deleteAccount";
        /**
         * @generated from protobuf field: DeleteAccountRequestProto delete_account = 16;
         */
        deleteAccount: DeleteAccountRequestProto;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message PodcastStreamApiResponseHeaderProto
 */
export interface PodcastStreamApiResponseHeaderProto {
    /**
     * @generated from protobuf oneof: header
     */
    header: {
        oneofKind: "createHeader";
        /**
         * @generated from protobuf field: CreatePodcastResponseHeaderProto create_header = 10;
         */
        createHeader: CreatePodcastResponseHeaderProto;
    } | {
        oneofKind: "generateHeader";
        /**
         * @generated from protobuf field: GeneratePodcastResponseHeaderProto generate_header = 11;
         */
        generateHeader: GeneratePodcastResponseHeaderProto;
    } | {
        oneofKind: "podcastHeader";
        /**
         * @generated from protobuf field: GetPodcastResponseHeaderProto podcast_header = 12;
         */
        podcastHeader: GetPodcastResponseHeaderProto;
    } | {
        oneofKind: "storyHeader";
        /**
         * @generated from protobuf field: GetPodcastStoryResponseHeaderProto story_header = 13;
         */
        storyHeader: GetPodcastStoryResponseHeaderProto;
    } | {
        oneofKind: "suggestionPointsHeader";
        /**
         * @generated from protobuf field: GetPodcastSuggestionPointsResponseHeaderProto suggestion_points_header = 14;
         */
        suggestionPointsHeader: GetPodcastSuggestionPointsResponseHeaderProto;
    } | {
        oneofKind: "homeHeader";
        /**
         * @generated from protobuf field: GetPodcastHomeResponseHeaderProto home_header = 15;
         */
        homeHeader: GetPodcastHomeResponseHeaderProto;
    } | {
        oneofKind: "deleteAccountHeader";
        /**
         * @generated from protobuf field: DeleteAccountResponseHeaderProto delete_account_header = 16;
         */
        deleteAccountHeader: DeleteAccountResponseHeaderProto;
    } | {
        oneofKind: undefined;
    };
    /**
     * @generated from protobuf field: map<string, google.protobuf.Duration> latencies = 100;
     */
    latencies: {
        [key: string]: Duration;
    };
}
/**
 * @generated from protobuf message PodcastStreamApiResponseDeltaProto
 */
export interface PodcastStreamApiResponseDeltaProto {
    /**
     * @generated from protobuf oneof: response_delta
     */
    responseDelta: {
        oneofKind: "createDelta";
        /**
         * @generated from protobuf field: CreatePodcastResponseDeltaProto create_delta = 10;
         */
        createDelta: CreatePodcastResponseDeltaProto;
    } | {
        oneofKind: "generateDelta";
        /**
         * @generated from protobuf field: GeneratePodcastResponseDeltaProto generate_delta = 11;
         */
        generateDelta: GeneratePodcastResponseDeltaProto;
    } | {
        oneofKind: "podcastDelta";
        /**
         * @generated from protobuf field: GetPodcastResponseDeltaProto podcast_delta = 12;
         */
        podcastDelta: GetPodcastResponseDeltaProto;
    } | {
        oneofKind: "storyDelta";
        /**
         * @generated from protobuf field: GetPodcastStoryResponseDeltaProto story_delta = 13;
         */
        storyDelta: GetPodcastStoryResponseDeltaProto;
    } | {
        oneofKind: "suggestionPointsDelta";
        /**
         * @generated from protobuf field: GetPodcastSuggestionPointsResponseDeltaProto suggestion_points_delta = 14;
         */
        suggestionPointsDelta: GetPodcastSuggestionPointsResponseDeltaProto;
    } | {
        oneofKind: "homeDelta";
        /**
         * @generated from protobuf field: GetPodcastHomeResponseDeltaProto home_delta = 15;
         */
        homeDelta: GetPodcastHomeResponseDeltaProto;
    } | {
        oneofKind: "deleteAccountDelta";
        /**
         * @generated from protobuf field: DeleteAccountResponseDeltaProto delete_account_delta = 16;
         */
        deleteAccountDelta: DeleteAccountResponseDeltaProto;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message CreatePodcastRequestProto
 */
export interface CreatePodcastRequestProto {
    /**
     * @generated from protobuf field: string prompt = 1;
     */
    prompt: string;
}
/**
 * @generated from protobuf message CreatePodcastResponseHeaderProto
 */
export interface CreatePodcastResponseHeaderProto {
    /**
     * @generated from protobuf field: string podcast_id = 1;
     */
    podcastId: string;
}
/**
 * @generated from protobuf message CreatePodcastResponseDeltaProto
 */
export interface CreatePodcastResponseDeltaProto {
    /**
     * @generated from protobuf oneof: type
     */
    type: {
        oneofKind: "error";
        /**
         * @generated from protobuf field: PodcastErrorProto error = 1;
         */
        error: PodcastErrorProto; // This is the last delta message
    } | {
        oneofKind: "answer";
        /**
         * @generated from protobuf field: PodcastPromptAnswerProto answer = 2;
         */
        answer: PodcastPromptAnswerProto;
    } | {
        oneofKind: "point";
        /**
         * @generated from protobuf field: PodcastPointProto point = 3;
         */
        point: PodcastPointProto;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message GeneratePodcastRequestProto
 */
export interface GeneratePodcastRequestProto {
    /**
     * @generated from protobuf oneof: type
     */
    type: {
        oneofKind: "points";
        /**
         * @generated from protobuf field: GeneratePodcastFromPointsProto points = 1;
         */
        points: GeneratePodcastFromPointsProto;
    } | {
        oneofKind: "suggestion";
        /**
         * @generated from protobuf field: GeneratePodcastFromSuggestionProto suggestion = 2;
         */
        suggestion: GeneratePodcastFromSuggestionProto;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message GeneratePodcastFromPointsProto
 */
export interface GeneratePodcastFromPointsProto {
    /**
     * @generated from protobuf field: string podcast_id = 1;
     */
    podcastId: string;
    /**
     * @generated from protobuf field: repeated string point_ids = 2;
     */
    pointIds: string[];
}
/**
 * @generated from protobuf message GeneratePodcastFromSuggestionProto
 */
export interface GeneratePodcastFromSuggestionProto {
    /**
     * @generated from protobuf field: string podcast_id = 1;
     */
    podcastId: string;
    /**
     * @generated from protobuf field: repeated string point_ids = 2;
     */
    pointIds: string[];
}
/**
 * @generated from protobuf message GeneratePodcastResponseHeaderProto
 */
export interface GeneratePodcastResponseHeaderProto {
}
/**
 * @generated from protobuf message GeneratePodcastResponseDeltaProto
 */
export interface GeneratePodcastResponseDeltaProto {
    /**
     * @generated from protobuf oneof: type
     */
    type: {
        oneofKind: "card";
        /**
         * @generated from protobuf field: PodcastCardProto card = 1;
         */
        card: PodcastCardProto;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message GetPodcastRequestProto
 */
export interface GetPodcastRequestProto {
    /**
     * @generated from protobuf field: string podcast_id = 1;
     */
    podcastId: string;
}
/**
 * @generated from protobuf message GetPodcastResponseHeaderProto
 */
export interface GetPodcastResponseHeaderProto {
    /**
     * @generated from protobuf field: PodcastProto podcast = 1;
     */
    podcast?: PodcastProto;
    /**
     * @generated from protobuf field: PodcastCardsProto cards = 2;
     */
    cards?: PodcastCardsProto;
}
/**
 * @generated from protobuf message GetPodcastResponseDeltaProto
 */
export interface GetPodcastResponseDeltaProto {
}
/**
 * @generated from protobuf message GetPodcastStoryRequestProto
 */
export interface GetPodcastStoryRequestProto {
    /**
     * @generated from protobuf field: string story_id = 1;
     */
    storyId: string;
}
/**
 * @generated from protobuf message GetPodcastStoryResponseHeaderProto
 */
export interface GetPodcastStoryResponseHeaderProto {
}
/**
 * @generated from protobuf message GetPodcastStoryResponseDeltaProto
 */
export interface GetPodcastStoryResponseDeltaProto {
    /**
     * @generated from protobuf oneof: type
     */
    type: {
        oneofKind: "header";
        /**
         * @generated from protobuf field: PodcastStoryHeaderProto header = 1;
         */
        header: PodcastStoryHeaderProto;
    } | {
        oneofKind: "slide";
        /**
         * @generated from protobuf field: PodcastStorySlideProto slide = 2;
         */
        slide: PodcastStorySlideProto;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message GetPodcastSuggestionPointsProto
 */
export interface GetPodcastSuggestionPointsProto {
    /**
     * @generated from protobuf field: string podcast_id = 1;
     */
    podcastId: string;
}
/**
 * @generated from protobuf message GetPodcastSuggestionPointsResponseHeaderProto
 */
export interface GetPodcastSuggestionPointsResponseHeaderProto {
}
/**
 * @generated from protobuf message GetPodcastSuggestionPointsResponseDeltaProto
 */
export interface GetPodcastSuggestionPointsResponseDeltaProto {
    /**
     * @generated from protobuf oneof: type
     */
    type: {
        oneofKind: "point";
        /**
         * @generated from protobuf field: PodcastPointProto point = 1;
         */
        point: PodcastPointProto;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message GetPodcastHomeRequestProto
 */
export interface GetPodcastHomeRequestProto {
}
/**
 * @generated from protobuf message GetPodcastHomeResponseHeaderProto
 */
export interface GetPodcastHomeResponseHeaderProto {
    /**
     * @generated from protobuf field: PodcastSubscriptionStatusProto subscription_status = 1;
     */
    subscriptionStatus?: PodcastSubscriptionStatusProto;
    /**
     * @generated from protobuf field: string firestore_suggestions_path = 2;
     */
    firestoreSuggestionsPath: string;
}
/**
 * @generated from protobuf message GetPodcastHomeResponseDeltaProto
 */
export interface GetPodcastHomeResponseDeltaProto {
}
/**
 * @generated from protobuf message DeleteAccountRequestProto
 */
export interface DeleteAccountRequestProto {
}
/**
 * @generated from protobuf message DeleteAccountResponseHeaderProto
 */
export interface DeleteAccountResponseHeaderProto {
}
/**
 * @generated from protobuf message DeleteAccountResponseDeltaProto
 */
export interface DeleteAccountResponseDeltaProto {
}
/**
 * @generated from protobuf message PodcastProto
 */
export interface PodcastProto {
    /**
     * @generated from protobuf field: google.protobuf.Timestamp updated_at = 1;
     */
    updatedAt?: Timestamp;
    /**
     * @generated from protobuf field: PodcastThumbnailProto thumbnail = 2;
     */
    thumbnail?: PodcastThumbnailProto;
    /**
     * @generated from protobuf field: PodcastAudioProto audio = 3;
     */
    audio?: PodcastAudioProto;
    /**
     * @generated from protobuf field: PodcastVisualsProto visuals = 4;
     */
    visuals?: PodcastVisualsProto;
    /**
     * @generated from protobuf field: PodcastTranscriptProto transcript = 5;
     */
    transcript?: PodcastTranscriptProto;
    /**
     * @generated from protobuf field: PodcastCardsProto cards = 6;
     */
    cards?: PodcastCardsProto;
    /**
     * @generated from protobuf field: PodcastKeyPointsProto key_points = 7;
     */
    keyPoints?: PodcastKeyPointsProto;
    /**
     * @generated from protobuf field: PodcastFollowupsProto followups = 8;
     */
    followups?: PodcastFollowupsProto;
    /**
     * @generated from protobuf field: PodcastCompletionProto completion = 9;
     */
    completion?: PodcastCompletionProto;
}
/**
 * @generated from protobuf message FirestorePodcastSuggestionsProto
 */
export interface FirestorePodcastSuggestionsProto {
    /**
     * @generated from protobuf field: google.protobuf.Timestamp updated_at = 1;
     */
    updatedAt?: Timestamp;
    /**
     * @generated from protobuf field: YourPodcastsShelfProto your_podcasts_shelf = 2;
     */
    yourPodcastsShelf?: YourPodcastsShelfProto;
    /**
     * @generated from protobuf field: PodcastSuggestionsProto suggestions = 3;
     */
    suggestions?: PodcastSuggestionsProto;
    /**
     * @generated from protobuf field: PodcastSuggestionsGenerationStateProto new_suggestions_generation_state = 4;
     */
    newSuggestionsGenerationState?: PodcastSuggestionsGenerationStateProto;
}
/**
 * @generated from protobuf message YourPodcastsShelfProto
 */
export interface YourPodcastsShelfProto {
    /**
     * @generated from protobuf field: map<string, PodcastThumbnailProto> thumbnails = 1;
     */
    thumbnails: {
        [key: string]: PodcastThumbnailProto;
    };
}
/**
 * @generated from protobuf message PodcastPointProto
 */
export interface PodcastPointProto {
    /**
     * @generated from protobuf field: string point_id = 1;
     */
    pointId: string;
    /**
     * @generated from protobuf field: string title = 2;
     */
    title: string;
    /**
     * @generated from protobuf field: string title_emoji = 3;
     */
    titleEmoji: string;
    /**
     * @generated from protobuf field: string outline = 4;
     */
    outline: string;
}
/**
 * @generated from protobuf message PodcastThumbnailProto
 */
export interface PodcastThumbnailProto {
    /**
     * @generated from protobuf field: string podcast_id = 1;
     */
    podcastId: string;
    /**
     * @generated from protobuf field: PodcastStatusProto status = 2;
     */
    status: PodcastStatusProto;
    /**
     * @generated from protobuf field: string display_status = 3;
     */
    displayStatus: string;
    /**
     * @generated from protobuf field: string title = 4;
     */
    title: string;
    /**
     * @generated from protobuf field: string long_title = 9;
     */
    longTitle: string; // used for large suggested thumbnails
    /**
     * @generated from protobuf field: string badge = 5;
     */
    badge: string; // May be empty or Q&A, Debate, ...
    /**
     * @generated from protobuf field: repeated string tags = 10;
     */
    tags: string[]; // "breath", "stretch", "focus", ...
    /**
     * @generated from protobuf field: PodcastTypeProto type = 11;
     */
    type: PodcastTypeProto;
    /**
     * @generated from protobuf field: string path = 6;
     */
    path: string;
    /**
     * @generated from protobuf field: google.protobuf.Duration duration = 7;
     */
    duration?: Duration;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp updated_at = 8;
     */
    updatedAt?: Timestamp;
}
/**
 * @generated from protobuf message PodcastAudioProto
 */
export interface PodcastAudioProto {
    /**
     * @generated from protobuf field: string path = 1;
     */
    path: string;
    /**
     * @generated from protobuf field: google.protobuf.Duration duration = 2;
     */
    duration?: Duration;
}
/**
 * @generated from protobuf message PodcastCardsProto
 */
export interface PodcastCardsProto {
    /**
     * @generated from protobuf field: bool is_ready = 1;
     */
    isReady: boolean;
    /**
     * @generated from protobuf field: repeated PodcastCardProto cards = 2;
     */
    cards: PodcastCardProto[];
}
/**
 * @generated from protobuf message PodcastCardProto
 */
export interface PodcastCardProto {
    /**
     * @generated from protobuf field: string card_id = 1;
     */
    cardId: string;
    /**
     * @generated from protobuf field: bool is_ready = 2;
     */
    isReady: boolean;
    /**
     * @generated from protobuf oneof: type
     */
    type: {
        oneofKind: "knowledge";
        /**
         * @generated from protobuf field: PodcastKnowledgeCardProto knowledge = 10;
         */
        knowledge: PodcastKnowledgeCardProto;
    } | {
        oneofKind: "multipleChoice";
        /**
         * @generated from protobuf field: PodcastMultipleChoiceCardProto multiple_choice = 11;
         */
        multipleChoice: PodcastMultipleChoiceCardProto;
    } | {
        oneofKind: "poll";
        /**
         * @generated from protobuf field: PodcastPollCardProto poll = 12;
         */
        poll: PodcastPollCardProto;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message PodcastErrorProto
 */
export interface PodcastErrorProto {
    /**
     * @generated from protobuf field: string message = 1;
     */
    message: string;
}
/**
 * @generated from protobuf message PodcastPromptAnswerProto
 */
export interface PodcastPromptAnswerProto {
    /**
     * @generated from protobuf field: string text = 1;
     */
    text: string;
}
/**
 * @generated from protobuf message PodcastVisualsProto
 */
export interface PodcastVisualsProto {
    /**
     * @generated from protobuf field: repeated PodcastVisualProto visuals = 1;
     */
    visuals: PodcastVisualProto[];
}
/**
 * @generated from protobuf message PodcastVisualProto
 */
export interface PodcastVisualProto {
    /**
     * @generated from protobuf field: int32 timestamp_millis = 1;
     */
    timestampMillis: number;
    /**
     * @generated from protobuf field: string image_path = 2;
     */
    imagePath: string;
    /**
     * @generated from protobuf field: PodcastVisualAnimationProto animation = 4;
     */
    animation?: PodcastVisualAnimationProto;
    /**
     * @generated from protobuf field: PodcastVisualTransitionProto transition = 3;
     */
    transition: PodcastVisualTransitionProto;
}
/**
 * @generated from protobuf message PodcastVisualAnimationProto
 */
export interface PodcastVisualAnimationProto {
    /**
     * @generated from protobuf field: int32 duration_millis = 1;
     */
    durationMillis: number;
    /**
     * @generated from protobuf field: float start_scale = 2;
     */
    startScale: number;
    /**
     * @generated from protobuf field: float end_scale = 3;
     */
    endScale: number;
}
/**
 * @generated from protobuf message PodcastTranscriptProto
 */
export interface PodcastTranscriptProto {
    /**
     * @generated from protobuf field: repeated PodcastTranscriptEntryProto entries = 1;
     */
    entries: PodcastTranscriptEntryProto[];
}
/**
 * @generated from protobuf message PodcastTranscriptEntryProto
 */
export interface PodcastTranscriptEntryProto {
    /**
     * @generated from protobuf field: PodcastHostProto host = 1;
     */
    host: PodcastHostProto;
    /**
     * @generated from protobuf field: repeated PodcastWordProto words = 2;
     */
    words: PodcastWordProto[];
}
/**
 * @generated from protobuf message PodcastWordProto
 */
export interface PodcastWordProto {
    /**
     * @generated from protobuf field: string word = 1;
     */
    word: string;
    /**
     * @generated from protobuf field: int32 start_millis = 2;
     */
    startMillis: number;
    /**
     * @generated from protobuf field: int32 end_millis = 3;
     */
    endMillis: number;
    /**
     * @generated from protobuf field: string separator = 4;
     */
    separator: string;
}
/**
 * No user input assumed
 *
 * @generated from protobuf message PodcastKnowledgeCardProto
 */
export interface PodcastKnowledgeCardProto {
    /**
     * @generated from protobuf field: string title = 1;
     */
    title: string;
    /**
     * @generated from protobuf field: PodcastCardHeroProto hero = 2;
     */
    hero?: PodcastCardHeroProto;
    /**
     * @generated from protobuf field: string text = 3;
     */
    text: string;
    /**
     * @generated from protobuf field: string explanation = 4;
     */
    explanation: string;
}
/**
 * 2: True/False, 3: A/B/C or 4: 1/2/3/4 user input
 *
 * @generated from protobuf message PodcastMultipleChoiceCardProto
 */
export interface PodcastMultipleChoiceCardProto {
    /**
     * @generated from protobuf field: string title = 1;
     */
    title: string;
    /**
     * @generated from protobuf field: PodcastCardHeroProto hero = 2;
     */
    hero?: PodcastCardHeroProto;
    /**
     * @generated from protobuf field: string question = 3;
     */
    question: string;
    /**
     * @generated from protobuf field: repeated PodcastMultipleChoiceOptionProto options = 4;
     */
    options: PodcastMultipleChoiceOptionProto[];
    /**
     * @generated from protobuf field: int32 correct_answer_number = 5;
     */
    correctAnswerNumber: number;
    /**
     * Number of hints is the number of possible wrong answers.
     *
     * @generated from protobuf field: repeated string hints = 6;
     */
    hints: string[];
    /**
     * @generated from protobuf field: string explanation = 7;
     */
    explanation: string;
}
/**
 * 2, 3 or 4 options to vote for
 *
 * @generated from protobuf message PodcastPollCardProto
 */
export interface PodcastPollCardProto {
    /**
     * @generated from protobuf field: string title = 1;
     */
    title: string;
    /**
     * @generated from protobuf field: PodcastCardHeroProto hero = 2;
     */
    hero?: PodcastCardHeroProto;
    /**
     * @generated from protobuf field: string question = 3;
     */
    question: string;
    /**
     * @generated from protobuf field: repeated PodcastPollOptionProto options = 4;
     */
    options: PodcastPollOptionProto[]; // commentary
}
/**
 * @generated from protobuf message PodcastCardHeroProto
 */
export interface PodcastCardHeroProto {
    /**
     * @generated from protobuf field: string emoji = 1;
     */
    emoji: string;
    /**
     * @generated from protobuf field: string lottie_url = 2;
     */
    lottieUrl: string;
}
/**
 * @generated from protobuf message PodcastMultipleChoiceOptionProto
 */
export interface PodcastMultipleChoiceOptionProto {
    /**
     * Could be a label like True/False or a short sentence
     *
     * @generated from protobuf field: string text = 1;
     */
    text: string;
}
/**
 * @generated from protobuf message PodcastPollOptionProto
 */
export interface PodcastPollOptionProto {
    /**
     * @generated from protobuf field: string text = 1;
     */
    text: string;
}
/**
 * @generated from protobuf message PodcastKeyPointsProto
 */
export interface PodcastKeyPointsProto {
    /**
     * @generated from protobuf field: string label = 1;
     */
    label: string;
    /**
     * @generated from protobuf field: repeated PodcastKeyPointProto key_points = 2;
     */
    keyPoints: PodcastKeyPointProto[];
}
/**
 * @generated from protobuf message PodcastFollowupsProto
 */
export interface PodcastFollowupsProto {
    /**
     * @generated from protobuf field: string label = 1;
     */
    label: string;
    /**
     * @generated from protobuf field: repeated PodcastFollowupProto followups = 2;
     */
    followups: PodcastFollowupProto[];
}
/**
 * @generated from protobuf message PodcastFollowupProto
 */
export interface PodcastFollowupProto {
    /**
     * @generated from protobuf field: string followup_id = 1;
     */
    followupId: string;
    /**
     * @generated from protobuf field: string emoji = 2;
     */
    emoji: string;
    /**
     * @generated from protobuf field: string outline = 3;
     */
    outline: string;
}
/**
 * @generated from protobuf message PodcastKeyPointProto
 */
export interface PodcastKeyPointProto {
    /**
     * @generated from protobuf field: string key_point_id = 1;
     */
    keyPointId: string;
    /**
     * @generated from protobuf field: string title = 2;
     */
    title: string;
    /**
     * @generated from protobuf field: string title_emoji = 3;
     */
    titleEmoji: string;
    /**
     * @generated from protobuf field: string outline = 4;
     */
    outline: string;
}
/**
 * @generated from protobuf message PodcastCompletionProto
 */
export interface PodcastCompletionProto {
    /**
     * @generated from protobuf field: string action = 1;
     */
    action: string; // "Mark Complete"
    /**
     * @generated from protobuf field: string encouragement = 2;
     */
    encouragement: string; // "Excellent!"
    /**
     * @generated from protobuf field: string emoji = 3;
     */
    emoji: string; // "⚡", "💎"
    /**
     * @generated from protobuf field: string lottie_url = 4;
     */
    lottieUrl: string;
}
/**
 * @generated from protobuf message PodcastSuggestionsProto
 */
export interface PodcastSuggestionsProto {
    /**
     * @generated from protobuf field: string suggestions_id = 1;
     */
    suggestionsId: string;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp created_at = 2;
     */
    createdAt?: Timestamp;
    /**
     * @generated from protobuf field: repeated PodcastSuggestionsSectionProto sections = 3;
     */
    sections: PodcastSuggestionsSectionProto[];
    /**
     * @generated from protobuf field: PodcastRoutineProto routine = 4;
     */
    routine?: PodcastRoutineProto;
}
/**
 * @generated from protobuf message PodcastSuggestionsGenerationStateProto
 */
export interface PodcastSuggestionsGenerationStateProto {
    /**
     * @generated from protobuf field: string suggestions_id = 1;
     */
    suggestionsId: string;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp updated_at = 2;
     */
    updatedAt?: Timestamp;
    /**
     * @generated from protobuf field: PodcastSuggestionsStateProto state = 3;
     */
    state: PodcastSuggestionsStateProto;
    /**
     * @generated from protobuf field: string display_state = 4;
     */
    displayState: string;
}
/**
 * @generated from protobuf message PodcastSuggestionsSectionProto
 */
export interface PodcastSuggestionsSectionProto {
    /**
     * @generated from protobuf field: string section_id = 1;
     */
    sectionId: string;
    /**
     * @generated from protobuf field: string section_title = 2;
     */
    sectionTitle: string;
    /**
     * @generated from protobuf field: PodcastThumbnailProto banner_suggestion = 3;
     */
    bannerSuggestion?: PodcastThumbnailProto;
    /**
     * @generated from protobuf field: PodcastThumbnailProto footer_suggestion = 4;
     */
    footerSuggestion?: PodcastThumbnailProto;
    /**
     * @generated from protobuf field: PodcastStoryThumbnailProto story1 = 5;
     */
    story1?: PodcastStoryThumbnailProto;
    /**
     * @generated from protobuf field: PodcastStoryThumbnailProto story2 = 6;
     */
    story2?: PodcastStoryThumbnailProto;
}
/**
 * @generated from protobuf message PodcastStoryThumbnailProto
 */
export interface PodcastStoryThumbnailProto {
    /**
     * @generated from protobuf field: string story_id = 1;
     */
    storyId: string;
    /**
     * @generated from protobuf field: string title = 2;
     */
    title: string;
    /**
     * @generated from protobuf field: string thumbnail_path = 3;
     */
    thumbnailPath: string;
}
/**
 * @generated from protobuf message PodcastStoryHeaderProto
 */
export interface PodcastStoryHeaderProto {
    /**
     * @generated from protobuf field: string badge = 1;
     */
    badge: string;
}
/**
 * @generated from protobuf message PodcastStorySlideProto
 */
export interface PodcastStorySlideProto {
    /**
     * @generated from protobuf field: string slide_id = 1;
     */
    slideId: string;
    /**
     * @generated from protobuf field: bool is_text_ready = 2;
     */
    isTextReady: boolean;
    /**
     * @generated from protobuf field: string title = 3;
     */
    title: string;
    /**
     * @generated from protobuf field: string image_path = 4;
     */
    imagePath: string;
    /**
     * @generated from protobuf field: string text = 5;
     */
    text: string;
}
/**
 * @generated from protobuf message PodcastRoutineProto
 */
export interface PodcastRoutineProto {
    /**
     * @generated from protobuf field: string routine_id = 2;
     */
    routineId: string;
    /**
     * @generated from protobuf field: string title = 3;
     */
    title: string;
    /**
     * @generated from protobuf field: repeated PodcastRoutineSegmentProto segments = 1;
     */
    segments: PodcastRoutineSegmentProto[];
}
/**
 * @generated from protobuf message PodcastRoutineSegmentProto
 */
export interface PodcastRoutineSegmentProto {
    /**
     * @generated from protobuf field: string segment_id = 1;
     */
    segmentId: string;
    /**
     * @generated from protobuf field: string title = 2;
     */
    title: string;
    /**
     * @generated from protobuf field: repeated PodcastRoutineStepProto steps = 3;
     */
    steps: PodcastRoutineStepProto[];
}
/**
 * @generated from protobuf message PodcastRoutineStepProto
 */
export interface PodcastRoutineStepProto {
    /**
     * @generated from protobuf field: PodcastThumbnailProto thumbnail = 5;
     */
    thumbnail?: PodcastThumbnailProto;
}
/**
 * @generated from protobuf message PodcastAppStoreTransactionProto
 */
export interface PodcastAppStoreTransactionProto {
    /**
     * @generated from protobuf field: string transaction_jws = 1;
     */
    transactionJws: string;
    /**
     * @generated from protobuf field: string renewal_info_jws = 2;
     */
    renewalInfoJws: string;
}
/**
 * @generated from protobuf message PodcastUserProgressProto
 */
export interface PodcastUserProgressProto {
    /**
     * @generated from protobuf field: map<string, PodcastRoutineProgressProto> routine_progress = 1;
     */
    routineProgress: {
        [key: string]: PodcastRoutineProgressProto;
    };
}
/**
 * @generated from protobuf message PodcastRoutineProgressProto
 */
export interface PodcastRoutineProgressProto {
    /**
     * @generated from protobuf field: map<string, PodcastRoutineStepProgressProto> step_progress = 1;
     */
    stepProgress: {
        [key: string]: PodcastRoutineStepProgressProto;
    };
}
/**
 * @generated from protobuf message PodcastRoutineStepProgressProto
 */
export interface PodcastRoutineStepProgressProto {
    /**
     * @generated from protobuf field: google.protobuf.Timestamp completed_at = 1;
     */
    completedAt?: Timestamp;
    /**
     * @generated from protobuf field: bool completed = 2;
     */
    completed: boolean;
}
/**
 * @generated from protobuf enum PodcastSubscriptionSourceProto
 */
export enum PodcastSubscriptionSourceProto {
    /**
     * @generated from protobuf enum value: PODCAST_SUBSCRIPTION_SOURCE_PROTO_UNDEFINED = 0;
     */
    UNDEFINED = 0,
    /**
     * @generated from protobuf enum value: PODCAST_SUBSCRIPTION_SOURCE_PROTO_PLATFORM_SUBSCRIPTION = 1;
     */
    PLATFORM_SUBSCRIPTION = 1,
    /**
     * @generated from protobuf enum value: PODCAST_SUBSCRIPTION_SOURCE_PROTO_EXTERNAL_SUBSCRIPTION = 2;
     */
    EXTERNAL_SUBSCRIPTION = 2
}
/**
 * @generated from protobuf enum PodcastStatusProto
 */
export enum PodcastStatusProto {
    /**
     * @generated from protobuf enum value: PODCAST_STATUS_PROTO_UNDEFINED = 0;
     */
    UNDEFINED = 0,
    /**
     * @generated from protobuf enum value: PODCAST_STATUS_PROTO_GENERATING = 1;
     */
    GENERATING = 1,
    /**
     * @generated from protobuf enum value: PODCAST_STATUS_PROTO_READY = 2;
     */
    READY = 2,
    /**
     * @generated from protobuf enum value: PODCAST_STATUS_PROTO_FAILED = 3;
     */
    FAILED = 3
}
/**
 * @generated from protobuf enum PodcastTypeProto
 */
export enum PodcastTypeProto {
    /**
     * @generated from protobuf enum value: PODCAST_TYPE_PROTO_UNDEFINED = 0;
     */
    UNDEFINED = 0,
    /**
     * @generated from protobuf enum value: PODCAST_TYPE_PROTO_EXPLAINER = 1;
     */
    EXPLAINER = 1,
    /**
     * @generated from protobuf enum value: PODCAST_TYPE_PROTO_EXERCISE = 2;
     */
    EXERCISE = 2,
    /**
     * @generated from protobuf enum value: PODCAST_TYPE_PROTO_MEDITATION = 3;
     */
    MEDITATION = 3
}
/**
 * @generated from protobuf enum PodcastVisualTransitionProto
 */
export enum PodcastVisualTransitionProto {
    /**
     * @generated from protobuf enum value: PODCAST_VISUAL_TRANSITION_PROTO_UNDEFINED = 0;
     */
    UNDEFINED = 0,
    /**
     * @generated from protobuf enum value: PODCAST_VISUAL_TRANSITION_PROTO_DISSOLVE = 1;
     */
    DISSOLVE = 1,
    /**
     * @generated from protobuf enum value: PODCAST_VISUAL_TRANSITION_PROTO_SWIPE = 2;
     */
    SWIPE = 2,
    /**
     * @generated from protobuf enum value: PODCAST_VISUAL_TRANSITION_PROTO_BAR_SWIPE = 3;
     */
    BAR_SWIPE = 3,
    /**
     * @generated from protobuf enum value: PODCAST_VISUAL_TRANSITION_PROTO_PAGE_CURL = 4;
     */
    PAGE_CURL = 4
}
/**
 * @generated from protobuf enum PodcastHostProto
 */
export enum PodcastHostProto {
    /**
     * @generated from protobuf enum value: PODCAST_HOST_PROTO_UNKNOWN = 0;
     */
    UNKNOWN = 0,
    /**
     * @generated from protobuf enum value: PODCAST_HOST_PROTO_MALE = 1;
     */
    MALE = 1,
    /**
     * @generated from protobuf enum value: PODCAST_HOST_PROTO_FEMALE = 2;
     */
    FEMALE = 2
}
/**
 * @generated from protobuf enum PodcastSuggestionsStateProto
 */
export enum PodcastSuggestionsStateProto {
    /**
     * @generated from protobuf enum value: PODCAST_SUGGESTIONS_STATE_PROTO_UNDEFINED = 0;
     */
    UNDEFINED = 0,
    /**
     * @generated from protobuf enum value: PODCAST_SUGGESTIONS_STATE_PROTO_GENERATING = 1;
     */
    GENERATING = 1,
    /**
     * @generated from protobuf enum value: PODCAST_SUGGESTIONS_STATE_PROTO_READY = 2;
     */
    READY = 2,
    /**
     * @generated from protobuf enum value: PODCAST_SUGGESTIONS_STATE_PROTO_FAILED = 3;
     */
    FAILED = 3
}
// @generated message type with reflection information, may provide speed optimized methods
class PodcastRequestAuthProto$Type extends MessageType<PodcastRequestAuthProto> {
    constructor() {
        super("PodcastRequestAuthProto", [
            { no: 1, name: "firebase_id_token", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "appcheck_token", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "is_anonomous", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "appstore_current_entitlements", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PodcastAppStoreTransactionProto }
        ]);
    }
    create(value?: PartialMessage<PodcastRequestAuthProto>): PodcastRequestAuthProto {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.firebaseIdToken = "";
        message.appcheckToken = "";
        message.isAnonomous = false;
        message.appstoreCurrentEntitlements = [];
        if (value !== undefined)
            reflectionMergePartial<PodcastRequestAuthProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PodcastRequestAuthProto): PodcastRequestAuthProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string firebase_id_token */ 1:
                    message.firebaseIdToken = reader.string();
                    break;
                case /* string appcheck_token */ 2:
                    message.appcheckToken = reader.string();
                    break;
                case /* bool is_anonomous */ 3:
                    message.isAnonomous = reader.bool();
                    break;
                case /* repeated PodcastAppStoreTransactionProto appstore_current_entitlements */ 4:
                    message.appstoreCurrentEntitlements.push(PodcastAppStoreTransactionProto.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PodcastRequestAuthProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string firebase_id_token = 1; */
        if (message.firebaseIdToken !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.firebaseIdToken);
        /* string appcheck_token = 2; */
        if (message.appcheckToken !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.appcheckToken);
        /* bool is_anonomous = 3; */
        if (message.isAnonomous !== false)
            writer.tag(3, WireType.Varint).bool(message.isAnonomous);
        /* repeated PodcastAppStoreTransactionProto appstore_current_entitlements = 4; */
        for (let i = 0; i < message.appstoreCurrentEntitlements.length; i++)
            PodcastAppStoreTransactionProto.internalBinaryWrite(message.appstoreCurrentEntitlements[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PodcastRequestAuthProto
 */
export const PodcastRequestAuthProto = new PodcastRequestAuthProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PodcastSubscriptionStatusProto$Type extends MessageType<PodcastSubscriptionStatusProto> {
    constructor() {
        super("PodcastSubscriptionStatusProto", [
            { no: 1, name: "is_subscriber", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "source", kind: "enum", T: () => ["PodcastSubscriptionSourceProto", PodcastSubscriptionSourceProto, "PODCAST_SUBSCRIPTION_SOURCE_PROTO_"] }
        ]);
    }
    create(value?: PartialMessage<PodcastSubscriptionStatusProto>): PodcastSubscriptionStatusProto {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.isSubscriber = false;
        message.source = 0;
        if (value !== undefined)
            reflectionMergePartial<PodcastSubscriptionStatusProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PodcastSubscriptionStatusProto): PodcastSubscriptionStatusProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool is_subscriber */ 1:
                    message.isSubscriber = reader.bool();
                    break;
                case /* PodcastSubscriptionSourceProto source */ 2:
                    message.source = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PodcastSubscriptionStatusProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool is_subscriber = 1; */
        if (message.isSubscriber !== false)
            writer.tag(1, WireType.Varint).bool(message.isSubscriber);
        /* PodcastSubscriptionSourceProto source = 2; */
        if (message.source !== 0)
            writer.tag(2, WireType.Varint).int32(message.source);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PodcastSubscriptionStatusProto
 */
export const PodcastSubscriptionStatusProto = new PodcastSubscriptionStatusProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PodcastStreamApiRequestProto$Type extends MessageType<PodcastStreamApiRequestProto> {
    constructor() {
        super("PodcastStreamApiRequestProto", [
            { no: 1, name: "request_auth", kind: "message", T: () => PodcastRequestAuthProto },
            { no: 10, name: "create", kind: "message", oneof: "request", T: () => CreatePodcastRequestProto },
            { no: 11, name: "generate", kind: "message", oneof: "request", T: () => GeneratePodcastRequestProto },
            { no: 12, name: "podcast", kind: "message", oneof: "request", T: () => GetPodcastRequestProto },
            { no: 13, name: "story", kind: "message", oneof: "request", T: () => GetPodcastStoryRequestProto },
            { no: 14, name: "suggestion_points", kind: "message", oneof: "request", T: () => GetPodcastSuggestionPointsProto },
            { no: 15, name: "home", kind: "message", oneof: "request", T: () => GetPodcastHomeRequestProto },
            { no: 16, name: "delete_account", kind: "message", oneof: "request", T: () => DeleteAccountRequestProto }
        ]);
    }
    create(value?: PartialMessage<PodcastStreamApiRequestProto>): PodcastStreamApiRequestProto {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.request = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<PodcastStreamApiRequestProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PodcastStreamApiRequestProto): PodcastStreamApiRequestProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* PodcastRequestAuthProto request_auth */ 1:
                    message.requestAuth = PodcastRequestAuthProto.internalBinaryRead(reader, reader.uint32(), options, message.requestAuth);
                    break;
                case /* CreatePodcastRequestProto create */ 10:
                    message.request = {
                        oneofKind: "create",
                        create: CreatePodcastRequestProto.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).create)
                    };
                    break;
                case /* GeneratePodcastRequestProto generate */ 11:
                    message.request = {
                        oneofKind: "generate",
                        generate: GeneratePodcastRequestProto.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).generate)
                    };
                    break;
                case /* GetPodcastRequestProto podcast */ 12:
                    message.request = {
                        oneofKind: "podcast",
                        podcast: GetPodcastRequestProto.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).podcast)
                    };
                    break;
                case /* GetPodcastStoryRequestProto story */ 13:
                    message.request = {
                        oneofKind: "story",
                        story: GetPodcastStoryRequestProto.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).story)
                    };
                    break;
                case /* GetPodcastSuggestionPointsProto suggestion_points */ 14:
                    message.request = {
                        oneofKind: "suggestionPoints",
                        suggestionPoints: GetPodcastSuggestionPointsProto.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).suggestionPoints)
                    };
                    break;
                case /* GetPodcastHomeRequestProto home */ 15:
                    message.request = {
                        oneofKind: "home",
                        home: GetPodcastHomeRequestProto.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).home)
                    };
                    break;
                case /* DeleteAccountRequestProto delete_account */ 16:
                    message.request = {
                        oneofKind: "deleteAccount",
                        deleteAccount: DeleteAccountRequestProto.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).deleteAccount)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PodcastStreamApiRequestProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* PodcastRequestAuthProto request_auth = 1; */
        if (message.requestAuth)
            PodcastRequestAuthProto.internalBinaryWrite(message.requestAuth, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* CreatePodcastRequestProto create = 10; */
        if (message.request.oneofKind === "create")
            CreatePodcastRequestProto.internalBinaryWrite(message.request.create, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* GeneratePodcastRequestProto generate = 11; */
        if (message.request.oneofKind === "generate")
            GeneratePodcastRequestProto.internalBinaryWrite(message.request.generate, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* GetPodcastRequestProto podcast = 12; */
        if (message.request.oneofKind === "podcast")
            GetPodcastRequestProto.internalBinaryWrite(message.request.podcast, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* GetPodcastStoryRequestProto story = 13; */
        if (message.request.oneofKind === "story")
            GetPodcastStoryRequestProto.internalBinaryWrite(message.request.story, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* GetPodcastSuggestionPointsProto suggestion_points = 14; */
        if (message.request.oneofKind === "suggestionPoints")
            GetPodcastSuggestionPointsProto.internalBinaryWrite(message.request.suggestionPoints, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* GetPodcastHomeRequestProto home = 15; */
        if (message.request.oneofKind === "home")
            GetPodcastHomeRequestProto.internalBinaryWrite(message.request.home, writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        /* DeleteAccountRequestProto delete_account = 16; */
        if (message.request.oneofKind === "deleteAccount")
            DeleteAccountRequestProto.internalBinaryWrite(message.request.deleteAccount, writer.tag(16, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PodcastStreamApiRequestProto
 */
export const PodcastStreamApiRequestProto = new PodcastStreamApiRequestProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PodcastStreamApiResponseHeaderProto$Type extends MessageType<PodcastStreamApiResponseHeaderProto> {
    constructor() {
        super("PodcastStreamApiResponseHeaderProto", [
            { no: 10, name: "create_header", kind: "message", oneof: "header", T: () => CreatePodcastResponseHeaderProto },
            { no: 11, name: "generate_header", kind: "message", oneof: "header", T: () => GeneratePodcastResponseHeaderProto },
            { no: 12, name: "podcast_header", kind: "message", oneof: "header", T: () => GetPodcastResponseHeaderProto },
            { no: 13, name: "story_header", kind: "message", oneof: "header", T: () => GetPodcastStoryResponseHeaderProto },
            { no: 14, name: "suggestion_points_header", kind: "message", oneof: "header", T: () => GetPodcastSuggestionPointsResponseHeaderProto },
            { no: 15, name: "home_header", kind: "message", oneof: "header", T: () => GetPodcastHomeResponseHeaderProto },
            { no: 16, name: "delete_account_header", kind: "message", oneof: "header", T: () => DeleteAccountResponseHeaderProto },
            { no: 100, name: "latencies", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => Duration } }
        ]);
    }
    create(value?: PartialMessage<PodcastStreamApiResponseHeaderProto>): PodcastStreamApiResponseHeaderProto {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.header = { oneofKind: undefined };
        message.latencies = {};
        if (value !== undefined)
            reflectionMergePartial<PodcastStreamApiResponseHeaderProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PodcastStreamApiResponseHeaderProto): PodcastStreamApiResponseHeaderProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* CreatePodcastResponseHeaderProto create_header */ 10:
                    message.header = {
                        oneofKind: "createHeader",
                        createHeader: CreatePodcastResponseHeaderProto.internalBinaryRead(reader, reader.uint32(), options, (message.header as any).createHeader)
                    };
                    break;
                case /* GeneratePodcastResponseHeaderProto generate_header */ 11:
                    message.header = {
                        oneofKind: "generateHeader",
                        generateHeader: GeneratePodcastResponseHeaderProto.internalBinaryRead(reader, reader.uint32(), options, (message.header as any).generateHeader)
                    };
                    break;
                case /* GetPodcastResponseHeaderProto podcast_header */ 12:
                    message.header = {
                        oneofKind: "podcastHeader",
                        podcastHeader: GetPodcastResponseHeaderProto.internalBinaryRead(reader, reader.uint32(), options, (message.header as any).podcastHeader)
                    };
                    break;
                case /* GetPodcastStoryResponseHeaderProto story_header */ 13:
                    message.header = {
                        oneofKind: "storyHeader",
                        storyHeader: GetPodcastStoryResponseHeaderProto.internalBinaryRead(reader, reader.uint32(), options, (message.header as any).storyHeader)
                    };
                    break;
                case /* GetPodcastSuggestionPointsResponseHeaderProto suggestion_points_header */ 14:
                    message.header = {
                        oneofKind: "suggestionPointsHeader",
                        suggestionPointsHeader: GetPodcastSuggestionPointsResponseHeaderProto.internalBinaryRead(reader, reader.uint32(), options, (message.header as any).suggestionPointsHeader)
                    };
                    break;
                case /* GetPodcastHomeResponseHeaderProto home_header */ 15:
                    message.header = {
                        oneofKind: "homeHeader",
                        homeHeader: GetPodcastHomeResponseHeaderProto.internalBinaryRead(reader, reader.uint32(), options, (message.header as any).homeHeader)
                    };
                    break;
                case /* DeleteAccountResponseHeaderProto delete_account_header */ 16:
                    message.header = {
                        oneofKind: "deleteAccountHeader",
                        deleteAccountHeader: DeleteAccountResponseHeaderProto.internalBinaryRead(reader, reader.uint32(), options, (message.header as any).deleteAccountHeader)
                    };
                    break;
                case /* map<string, google.protobuf.Duration> latencies */ 100:
                    this.binaryReadMap100(message.latencies, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap100(map: PodcastStreamApiResponseHeaderProto["latencies"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof PodcastStreamApiResponseHeaderProto["latencies"] | undefined, val: PodcastStreamApiResponseHeaderProto["latencies"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = Duration.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field PodcastStreamApiResponseHeaderProto.latencies");
            }
        }
        map[key ?? ""] = val ?? Duration.create();
    }
    internalBinaryWrite(message: PodcastStreamApiResponseHeaderProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* CreatePodcastResponseHeaderProto create_header = 10; */
        if (message.header.oneofKind === "createHeader")
            CreatePodcastResponseHeaderProto.internalBinaryWrite(message.header.createHeader, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* GeneratePodcastResponseHeaderProto generate_header = 11; */
        if (message.header.oneofKind === "generateHeader")
            GeneratePodcastResponseHeaderProto.internalBinaryWrite(message.header.generateHeader, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* GetPodcastResponseHeaderProto podcast_header = 12; */
        if (message.header.oneofKind === "podcastHeader")
            GetPodcastResponseHeaderProto.internalBinaryWrite(message.header.podcastHeader, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* GetPodcastStoryResponseHeaderProto story_header = 13; */
        if (message.header.oneofKind === "storyHeader")
            GetPodcastStoryResponseHeaderProto.internalBinaryWrite(message.header.storyHeader, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* GetPodcastSuggestionPointsResponseHeaderProto suggestion_points_header = 14; */
        if (message.header.oneofKind === "suggestionPointsHeader")
            GetPodcastSuggestionPointsResponseHeaderProto.internalBinaryWrite(message.header.suggestionPointsHeader, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* GetPodcastHomeResponseHeaderProto home_header = 15; */
        if (message.header.oneofKind === "homeHeader")
            GetPodcastHomeResponseHeaderProto.internalBinaryWrite(message.header.homeHeader, writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        /* DeleteAccountResponseHeaderProto delete_account_header = 16; */
        if (message.header.oneofKind === "deleteAccountHeader")
            DeleteAccountResponseHeaderProto.internalBinaryWrite(message.header.deleteAccountHeader, writer.tag(16, WireType.LengthDelimited).fork(), options).join();
        /* map<string, google.protobuf.Duration> latencies = 100; */
        for (let k of globalThis.Object.keys(message.latencies)) {
            writer.tag(100, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            Duration.internalBinaryWrite(message.latencies[k], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PodcastStreamApiResponseHeaderProto
 */
export const PodcastStreamApiResponseHeaderProto = new PodcastStreamApiResponseHeaderProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PodcastStreamApiResponseDeltaProto$Type extends MessageType<PodcastStreamApiResponseDeltaProto> {
    constructor() {
        super("PodcastStreamApiResponseDeltaProto", [
            { no: 10, name: "create_delta", kind: "message", oneof: "responseDelta", T: () => CreatePodcastResponseDeltaProto },
            { no: 11, name: "generate_delta", kind: "message", oneof: "responseDelta", T: () => GeneratePodcastResponseDeltaProto },
            { no: 12, name: "podcast_delta", kind: "message", oneof: "responseDelta", T: () => GetPodcastResponseDeltaProto },
            { no: 13, name: "story_delta", kind: "message", oneof: "responseDelta", T: () => GetPodcastStoryResponseDeltaProto },
            { no: 14, name: "suggestion_points_delta", kind: "message", oneof: "responseDelta", T: () => GetPodcastSuggestionPointsResponseDeltaProto },
            { no: 15, name: "home_delta", kind: "message", oneof: "responseDelta", T: () => GetPodcastHomeResponseDeltaProto },
            { no: 16, name: "delete_account_delta", kind: "message", oneof: "responseDelta", T: () => DeleteAccountResponseDeltaProto }
        ]);
    }
    create(value?: PartialMessage<PodcastStreamApiResponseDeltaProto>): PodcastStreamApiResponseDeltaProto {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.responseDelta = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<PodcastStreamApiResponseDeltaProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PodcastStreamApiResponseDeltaProto): PodcastStreamApiResponseDeltaProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* CreatePodcastResponseDeltaProto create_delta */ 10:
                    message.responseDelta = {
                        oneofKind: "createDelta",
                        createDelta: CreatePodcastResponseDeltaProto.internalBinaryRead(reader, reader.uint32(), options, (message.responseDelta as any).createDelta)
                    };
                    break;
                case /* GeneratePodcastResponseDeltaProto generate_delta */ 11:
                    message.responseDelta = {
                        oneofKind: "generateDelta",
                        generateDelta: GeneratePodcastResponseDeltaProto.internalBinaryRead(reader, reader.uint32(), options, (message.responseDelta as any).generateDelta)
                    };
                    break;
                case /* GetPodcastResponseDeltaProto podcast_delta */ 12:
                    message.responseDelta = {
                        oneofKind: "podcastDelta",
                        podcastDelta: GetPodcastResponseDeltaProto.internalBinaryRead(reader, reader.uint32(), options, (message.responseDelta as any).podcastDelta)
                    };
                    break;
                case /* GetPodcastStoryResponseDeltaProto story_delta */ 13:
                    message.responseDelta = {
                        oneofKind: "storyDelta",
                        storyDelta: GetPodcastStoryResponseDeltaProto.internalBinaryRead(reader, reader.uint32(), options, (message.responseDelta as any).storyDelta)
                    };
                    break;
                case /* GetPodcastSuggestionPointsResponseDeltaProto suggestion_points_delta */ 14:
                    message.responseDelta = {
                        oneofKind: "suggestionPointsDelta",
                        suggestionPointsDelta: GetPodcastSuggestionPointsResponseDeltaProto.internalBinaryRead(reader, reader.uint32(), options, (message.responseDelta as any).suggestionPointsDelta)
                    };
                    break;
                case /* GetPodcastHomeResponseDeltaProto home_delta */ 15:
                    message.responseDelta = {
                        oneofKind: "homeDelta",
                        homeDelta: GetPodcastHomeResponseDeltaProto.internalBinaryRead(reader, reader.uint32(), options, (message.responseDelta as any).homeDelta)
                    };
                    break;
                case /* DeleteAccountResponseDeltaProto delete_account_delta */ 16:
                    message.responseDelta = {
                        oneofKind: "deleteAccountDelta",
                        deleteAccountDelta: DeleteAccountResponseDeltaProto.internalBinaryRead(reader, reader.uint32(), options, (message.responseDelta as any).deleteAccountDelta)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PodcastStreamApiResponseDeltaProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* CreatePodcastResponseDeltaProto create_delta = 10; */
        if (message.responseDelta.oneofKind === "createDelta")
            CreatePodcastResponseDeltaProto.internalBinaryWrite(message.responseDelta.createDelta, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* GeneratePodcastResponseDeltaProto generate_delta = 11; */
        if (message.responseDelta.oneofKind === "generateDelta")
            GeneratePodcastResponseDeltaProto.internalBinaryWrite(message.responseDelta.generateDelta, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* GetPodcastResponseDeltaProto podcast_delta = 12; */
        if (message.responseDelta.oneofKind === "podcastDelta")
            GetPodcastResponseDeltaProto.internalBinaryWrite(message.responseDelta.podcastDelta, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* GetPodcastStoryResponseDeltaProto story_delta = 13; */
        if (message.responseDelta.oneofKind === "storyDelta")
            GetPodcastStoryResponseDeltaProto.internalBinaryWrite(message.responseDelta.storyDelta, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* GetPodcastSuggestionPointsResponseDeltaProto suggestion_points_delta = 14; */
        if (message.responseDelta.oneofKind === "suggestionPointsDelta")
            GetPodcastSuggestionPointsResponseDeltaProto.internalBinaryWrite(message.responseDelta.suggestionPointsDelta, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* GetPodcastHomeResponseDeltaProto home_delta = 15; */
        if (message.responseDelta.oneofKind === "homeDelta")
            GetPodcastHomeResponseDeltaProto.internalBinaryWrite(message.responseDelta.homeDelta, writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        /* DeleteAccountResponseDeltaProto delete_account_delta = 16; */
        if (message.responseDelta.oneofKind === "deleteAccountDelta")
            DeleteAccountResponseDeltaProto.internalBinaryWrite(message.responseDelta.deleteAccountDelta, writer.tag(16, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PodcastStreamApiResponseDeltaProto
 */
export const PodcastStreamApiResponseDeltaProto = new PodcastStreamApiResponseDeltaProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreatePodcastRequestProto$Type extends MessageType<CreatePodcastRequestProto> {
    constructor() {
        super("CreatePodcastRequestProto", [
            { no: 1, name: "prompt", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreatePodcastRequestProto>): CreatePodcastRequestProto {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.prompt = "";
        if (value !== undefined)
            reflectionMergePartial<CreatePodcastRequestProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreatePodcastRequestProto): CreatePodcastRequestProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string prompt */ 1:
                    message.prompt = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreatePodcastRequestProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string prompt = 1; */
        if (message.prompt !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.prompt);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CreatePodcastRequestProto
 */
export const CreatePodcastRequestProto = new CreatePodcastRequestProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreatePodcastResponseHeaderProto$Type extends MessageType<CreatePodcastResponseHeaderProto> {
    constructor() {
        super("CreatePodcastResponseHeaderProto", [
            { no: 1, name: "podcast_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreatePodcastResponseHeaderProto>): CreatePodcastResponseHeaderProto {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.podcastId = "";
        if (value !== undefined)
            reflectionMergePartial<CreatePodcastResponseHeaderProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreatePodcastResponseHeaderProto): CreatePodcastResponseHeaderProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string podcast_id */ 1:
                    message.podcastId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreatePodcastResponseHeaderProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string podcast_id = 1; */
        if (message.podcastId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.podcastId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CreatePodcastResponseHeaderProto
 */
export const CreatePodcastResponseHeaderProto = new CreatePodcastResponseHeaderProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreatePodcastResponseDeltaProto$Type extends MessageType<CreatePodcastResponseDeltaProto> {
    constructor() {
        super("CreatePodcastResponseDeltaProto", [
            { no: 1, name: "error", kind: "message", oneof: "type", T: () => PodcastErrorProto },
            { no: 2, name: "answer", kind: "message", oneof: "type", T: () => PodcastPromptAnswerProto },
            { no: 3, name: "point", kind: "message", oneof: "type", T: () => PodcastPointProto }
        ]);
    }
    create(value?: PartialMessage<CreatePodcastResponseDeltaProto>): CreatePodcastResponseDeltaProto {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.type = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<CreatePodcastResponseDeltaProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreatePodcastResponseDeltaProto): CreatePodcastResponseDeltaProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* PodcastErrorProto error */ 1:
                    message.type = {
                        oneofKind: "error",
                        error: PodcastErrorProto.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).error)
                    };
                    break;
                case /* PodcastPromptAnswerProto answer */ 2:
                    message.type = {
                        oneofKind: "answer",
                        answer: PodcastPromptAnswerProto.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).answer)
                    };
                    break;
                case /* PodcastPointProto point */ 3:
                    message.type = {
                        oneofKind: "point",
                        point: PodcastPointProto.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).point)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreatePodcastResponseDeltaProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* PodcastErrorProto error = 1; */
        if (message.type.oneofKind === "error")
            PodcastErrorProto.internalBinaryWrite(message.type.error, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* PodcastPromptAnswerProto answer = 2; */
        if (message.type.oneofKind === "answer")
            PodcastPromptAnswerProto.internalBinaryWrite(message.type.answer, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* PodcastPointProto point = 3; */
        if (message.type.oneofKind === "point")
            PodcastPointProto.internalBinaryWrite(message.type.point, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CreatePodcastResponseDeltaProto
 */
export const CreatePodcastResponseDeltaProto = new CreatePodcastResponseDeltaProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GeneratePodcastRequestProto$Type extends MessageType<GeneratePodcastRequestProto> {
    constructor() {
        super("GeneratePodcastRequestProto", [
            { no: 1, name: "points", kind: "message", oneof: "type", T: () => GeneratePodcastFromPointsProto },
            { no: 2, name: "suggestion", kind: "message", oneof: "type", T: () => GeneratePodcastFromSuggestionProto }
        ]);
    }
    create(value?: PartialMessage<GeneratePodcastRequestProto>): GeneratePodcastRequestProto {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.type = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<GeneratePodcastRequestProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GeneratePodcastRequestProto): GeneratePodcastRequestProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* GeneratePodcastFromPointsProto points */ 1:
                    message.type = {
                        oneofKind: "points",
                        points: GeneratePodcastFromPointsProto.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).points)
                    };
                    break;
                case /* GeneratePodcastFromSuggestionProto suggestion */ 2:
                    message.type = {
                        oneofKind: "suggestion",
                        suggestion: GeneratePodcastFromSuggestionProto.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).suggestion)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GeneratePodcastRequestProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* GeneratePodcastFromPointsProto points = 1; */
        if (message.type.oneofKind === "points")
            GeneratePodcastFromPointsProto.internalBinaryWrite(message.type.points, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* GeneratePodcastFromSuggestionProto suggestion = 2; */
        if (message.type.oneofKind === "suggestion")
            GeneratePodcastFromSuggestionProto.internalBinaryWrite(message.type.suggestion, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GeneratePodcastRequestProto
 */
export const GeneratePodcastRequestProto = new GeneratePodcastRequestProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GeneratePodcastFromPointsProto$Type extends MessageType<GeneratePodcastFromPointsProto> {
    constructor() {
        super("GeneratePodcastFromPointsProto", [
            { no: 1, name: "podcast_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "point_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GeneratePodcastFromPointsProto>): GeneratePodcastFromPointsProto {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.podcastId = "";
        message.pointIds = [];
        if (value !== undefined)
            reflectionMergePartial<GeneratePodcastFromPointsProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GeneratePodcastFromPointsProto): GeneratePodcastFromPointsProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string podcast_id */ 1:
                    message.podcastId = reader.string();
                    break;
                case /* repeated string point_ids */ 2:
                    message.pointIds.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GeneratePodcastFromPointsProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string podcast_id = 1; */
        if (message.podcastId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.podcastId);
        /* repeated string point_ids = 2; */
        for (let i = 0; i < message.pointIds.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.pointIds[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GeneratePodcastFromPointsProto
 */
export const GeneratePodcastFromPointsProto = new GeneratePodcastFromPointsProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GeneratePodcastFromSuggestionProto$Type extends MessageType<GeneratePodcastFromSuggestionProto> {
    constructor() {
        super("GeneratePodcastFromSuggestionProto", [
            { no: 1, name: "podcast_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "point_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GeneratePodcastFromSuggestionProto>): GeneratePodcastFromSuggestionProto {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.podcastId = "";
        message.pointIds = [];
        if (value !== undefined)
            reflectionMergePartial<GeneratePodcastFromSuggestionProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GeneratePodcastFromSuggestionProto): GeneratePodcastFromSuggestionProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string podcast_id */ 1:
                    message.podcastId = reader.string();
                    break;
                case /* repeated string point_ids */ 2:
                    message.pointIds.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GeneratePodcastFromSuggestionProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string podcast_id = 1; */
        if (message.podcastId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.podcastId);
        /* repeated string point_ids = 2; */
        for (let i = 0; i < message.pointIds.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.pointIds[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GeneratePodcastFromSuggestionProto
 */
export const GeneratePodcastFromSuggestionProto = new GeneratePodcastFromSuggestionProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GeneratePodcastResponseHeaderProto$Type extends MessageType<GeneratePodcastResponseHeaderProto> {
    constructor() {
        super("GeneratePodcastResponseHeaderProto", []);
    }
    create(value?: PartialMessage<GeneratePodcastResponseHeaderProto>): GeneratePodcastResponseHeaderProto {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GeneratePodcastResponseHeaderProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GeneratePodcastResponseHeaderProto): GeneratePodcastResponseHeaderProto {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GeneratePodcastResponseHeaderProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GeneratePodcastResponseHeaderProto
 */
export const GeneratePodcastResponseHeaderProto = new GeneratePodcastResponseHeaderProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GeneratePodcastResponseDeltaProto$Type extends MessageType<GeneratePodcastResponseDeltaProto> {
    constructor() {
        super("GeneratePodcastResponseDeltaProto", [
            { no: 1, name: "card", kind: "message", oneof: "type", T: () => PodcastCardProto }
        ]);
    }
    create(value?: PartialMessage<GeneratePodcastResponseDeltaProto>): GeneratePodcastResponseDeltaProto {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.type = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<GeneratePodcastResponseDeltaProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GeneratePodcastResponseDeltaProto): GeneratePodcastResponseDeltaProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* PodcastCardProto card */ 1:
                    message.type = {
                        oneofKind: "card",
                        card: PodcastCardProto.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).card)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GeneratePodcastResponseDeltaProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* PodcastCardProto card = 1; */
        if (message.type.oneofKind === "card")
            PodcastCardProto.internalBinaryWrite(message.type.card, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GeneratePodcastResponseDeltaProto
 */
export const GeneratePodcastResponseDeltaProto = new GeneratePodcastResponseDeltaProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetPodcastRequestProto$Type extends MessageType<GetPodcastRequestProto> {
    constructor() {
        super("GetPodcastRequestProto", [
            { no: 1, name: "podcast_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetPodcastRequestProto>): GetPodcastRequestProto {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.podcastId = "";
        if (value !== undefined)
            reflectionMergePartial<GetPodcastRequestProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetPodcastRequestProto): GetPodcastRequestProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string podcast_id */ 1:
                    message.podcastId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetPodcastRequestProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string podcast_id = 1; */
        if (message.podcastId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.podcastId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetPodcastRequestProto
 */
export const GetPodcastRequestProto = new GetPodcastRequestProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetPodcastResponseHeaderProto$Type extends MessageType<GetPodcastResponseHeaderProto> {
    constructor() {
        super("GetPodcastResponseHeaderProto", [
            { no: 1, name: "podcast", kind: "message", T: () => PodcastProto },
            { no: 2, name: "cards", kind: "message", T: () => PodcastCardsProto }
        ]);
    }
    create(value?: PartialMessage<GetPodcastResponseHeaderProto>): GetPodcastResponseHeaderProto {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetPodcastResponseHeaderProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetPodcastResponseHeaderProto): GetPodcastResponseHeaderProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* PodcastProto podcast */ 1:
                    message.podcast = PodcastProto.internalBinaryRead(reader, reader.uint32(), options, message.podcast);
                    break;
                case /* PodcastCardsProto cards */ 2:
                    message.cards = PodcastCardsProto.internalBinaryRead(reader, reader.uint32(), options, message.cards);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetPodcastResponseHeaderProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* PodcastProto podcast = 1; */
        if (message.podcast)
            PodcastProto.internalBinaryWrite(message.podcast, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* PodcastCardsProto cards = 2; */
        if (message.cards)
            PodcastCardsProto.internalBinaryWrite(message.cards, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetPodcastResponseHeaderProto
 */
export const GetPodcastResponseHeaderProto = new GetPodcastResponseHeaderProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetPodcastResponseDeltaProto$Type extends MessageType<GetPodcastResponseDeltaProto> {
    constructor() {
        super("GetPodcastResponseDeltaProto", []);
    }
    create(value?: PartialMessage<GetPodcastResponseDeltaProto>): GetPodcastResponseDeltaProto {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetPodcastResponseDeltaProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetPodcastResponseDeltaProto): GetPodcastResponseDeltaProto {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetPodcastResponseDeltaProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetPodcastResponseDeltaProto
 */
export const GetPodcastResponseDeltaProto = new GetPodcastResponseDeltaProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetPodcastStoryRequestProto$Type extends MessageType<GetPodcastStoryRequestProto> {
    constructor() {
        super("GetPodcastStoryRequestProto", [
            { no: 1, name: "story_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetPodcastStoryRequestProto>): GetPodcastStoryRequestProto {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.storyId = "";
        if (value !== undefined)
            reflectionMergePartial<GetPodcastStoryRequestProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetPodcastStoryRequestProto): GetPodcastStoryRequestProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string story_id */ 1:
                    message.storyId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetPodcastStoryRequestProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string story_id = 1; */
        if (message.storyId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.storyId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetPodcastStoryRequestProto
 */
export const GetPodcastStoryRequestProto = new GetPodcastStoryRequestProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetPodcastStoryResponseHeaderProto$Type extends MessageType<GetPodcastStoryResponseHeaderProto> {
    constructor() {
        super("GetPodcastStoryResponseHeaderProto", []);
    }
    create(value?: PartialMessage<GetPodcastStoryResponseHeaderProto>): GetPodcastStoryResponseHeaderProto {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetPodcastStoryResponseHeaderProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetPodcastStoryResponseHeaderProto): GetPodcastStoryResponseHeaderProto {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetPodcastStoryResponseHeaderProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetPodcastStoryResponseHeaderProto
 */
export const GetPodcastStoryResponseHeaderProto = new GetPodcastStoryResponseHeaderProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetPodcastStoryResponseDeltaProto$Type extends MessageType<GetPodcastStoryResponseDeltaProto> {
    constructor() {
        super("GetPodcastStoryResponseDeltaProto", [
            { no: 1, name: "header", kind: "message", oneof: "type", T: () => PodcastStoryHeaderProto },
            { no: 2, name: "slide", kind: "message", oneof: "type", T: () => PodcastStorySlideProto }
        ]);
    }
    create(value?: PartialMessage<GetPodcastStoryResponseDeltaProto>): GetPodcastStoryResponseDeltaProto {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.type = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<GetPodcastStoryResponseDeltaProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetPodcastStoryResponseDeltaProto): GetPodcastStoryResponseDeltaProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* PodcastStoryHeaderProto header */ 1:
                    message.type = {
                        oneofKind: "header",
                        header: PodcastStoryHeaderProto.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).header)
                    };
                    break;
                case /* PodcastStorySlideProto slide */ 2:
                    message.type = {
                        oneofKind: "slide",
                        slide: PodcastStorySlideProto.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).slide)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetPodcastStoryResponseDeltaProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* PodcastStoryHeaderProto header = 1; */
        if (message.type.oneofKind === "header")
            PodcastStoryHeaderProto.internalBinaryWrite(message.type.header, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* PodcastStorySlideProto slide = 2; */
        if (message.type.oneofKind === "slide")
            PodcastStorySlideProto.internalBinaryWrite(message.type.slide, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetPodcastStoryResponseDeltaProto
 */
export const GetPodcastStoryResponseDeltaProto = new GetPodcastStoryResponseDeltaProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetPodcastSuggestionPointsProto$Type extends MessageType<GetPodcastSuggestionPointsProto> {
    constructor() {
        super("GetPodcastSuggestionPointsProto", [
            { no: 1, name: "podcast_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetPodcastSuggestionPointsProto>): GetPodcastSuggestionPointsProto {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.podcastId = "";
        if (value !== undefined)
            reflectionMergePartial<GetPodcastSuggestionPointsProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetPodcastSuggestionPointsProto): GetPodcastSuggestionPointsProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string podcast_id */ 1:
                    message.podcastId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetPodcastSuggestionPointsProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string podcast_id = 1; */
        if (message.podcastId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.podcastId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetPodcastSuggestionPointsProto
 */
export const GetPodcastSuggestionPointsProto = new GetPodcastSuggestionPointsProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetPodcastSuggestionPointsResponseHeaderProto$Type extends MessageType<GetPodcastSuggestionPointsResponseHeaderProto> {
    constructor() {
        super("GetPodcastSuggestionPointsResponseHeaderProto", []);
    }
    create(value?: PartialMessage<GetPodcastSuggestionPointsResponseHeaderProto>): GetPodcastSuggestionPointsResponseHeaderProto {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetPodcastSuggestionPointsResponseHeaderProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetPodcastSuggestionPointsResponseHeaderProto): GetPodcastSuggestionPointsResponseHeaderProto {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetPodcastSuggestionPointsResponseHeaderProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetPodcastSuggestionPointsResponseHeaderProto
 */
export const GetPodcastSuggestionPointsResponseHeaderProto = new GetPodcastSuggestionPointsResponseHeaderProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetPodcastSuggestionPointsResponseDeltaProto$Type extends MessageType<GetPodcastSuggestionPointsResponseDeltaProto> {
    constructor() {
        super("GetPodcastSuggestionPointsResponseDeltaProto", [
            { no: 1, name: "point", kind: "message", oneof: "type", T: () => PodcastPointProto }
        ]);
    }
    create(value?: PartialMessage<GetPodcastSuggestionPointsResponseDeltaProto>): GetPodcastSuggestionPointsResponseDeltaProto {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.type = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<GetPodcastSuggestionPointsResponseDeltaProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetPodcastSuggestionPointsResponseDeltaProto): GetPodcastSuggestionPointsResponseDeltaProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* PodcastPointProto point */ 1:
                    message.type = {
                        oneofKind: "point",
                        point: PodcastPointProto.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).point)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetPodcastSuggestionPointsResponseDeltaProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* PodcastPointProto point = 1; */
        if (message.type.oneofKind === "point")
            PodcastPointProto.internalBinaryWrite(message.type.point, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetPodcastSuggestionPointsResponseDeltaProto
 */
export const GetPodcastSuggestionPointsResponseDeltaProto = new GetPodcastSuggestionPointsResponseDeltaProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetPodcastHomeRequestProto$Type extends MessageType<GetPodcastHomeRequestProto> {
    constructor() {
        super("GetPodcastHomeRequestProto", []);
    }
    create(value?: PartialMessage<GetPodcastHomeRequestProto>): GetPodcastHomeRequestProto {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetPodcastHomeRequestProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetPodcastHomeRequestProto): GetPodcastHomeRequestProto {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetPodcastHomeRequestProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetPodcastHomeRequestProto
 */
export const GetPodcastHomeRequestProto = new GetPodcastHomeRequestProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetPodcastHomeResponseHeaderProto$Type extends MessageType<GetPodcastHomeResponseHeaderProto> {
    constructor() {
        super("GetPodcastHomeResponseHeaderProto", [
            { no: 1, name: "subscription_status", kind: "message", T: () => PodcastSubscriptionStatusProto },
            { no: 2, name: "firestore_suggestions_path", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetPodcastHomeResponseHeaderProto>): GetPodcastHomeResponseHeaderProto {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.firestoreSuggestionsPath = "";
        if (value !== undefined)
            reflectionMergePartial<GetPodcastHomeResponseHeaderProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetPodcastHomeResponseHeaderProto): GetPodcastHomeResponseHeaderProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* PodcastSubscriptionStatusProto subscription_status */ 1:
                    message.subscriptionStatus = PodcastSubscriptionStatusProto.internalBinaryRead(reader, reader.uint32(), options, message.subscriptionStatus);
                    break;
                case /* string firestore_suggestions_path */ 2:
                    message.firestoreSuggestionsPath = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetPodcastHomeResponseHeaderProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* PodcastSubscriptionStatusProto subscription_status = 1; */
        if (message.subscriptionStatus)
            PodcastSubscriptionStatusProto.internalBinaryWrite(message.subscriptionStatus, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string firestore_suggestions_path = 2; */
        if (message.firestoreSuggestionsPath !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.firestoreSuggestionsPath);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetPodcastHomeResponseHeaderProto
 */
export const GetPodcastHomeResponseHeaderProto = new GetPodcastHomeResponseHeaderProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetPodcastHomeResponseDeltaProto$Type extends MessageType<GetPodcastHomeResponseDeltaProto> {
    constructor() {
        super("GetPodcastHomeResponseDeltaProto", []);
    }
    create(value?: PartialMessage<GetPodcastHomeResponseDeltaProto>): GetPodcastHomeResponseDeltaProto {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetPodcastHomeResponseDeltaProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetPodcastHomeResponseDeltaProto): GetPodcastHomeResponseDeltaProto {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetPodcastHomeResponseDeltaProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetPodcastHomeResponseDeltaProto
 */
export const GetPodcastHomeResponseDeltaProto = new GetPodcastHomeResponseDeltaProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteAccountRequestProto$Type extends MessageType<DeleteAccountRequestProto> {
    constructor() {
        super("DeleteAccountRequestProto", []);
    }
    create(value?: PartialMessage<DeleteAccountRequestProto>): DeleteAccountRequestProto {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DeleteAccountRequestProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteAccountRequestProto): DeleteAccountRequestProto {
        return target ?? this.create();
    }
    internalBinaryWrite(message: DeleteAccountRequestProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DeleteAccountRequestProto
 */
export const DeleteAccountRequestProto = new DeleteAccountRequestProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteAccountResponseHeaderProto$Type extends MessageType<DeleteAccountResponseHeaderProto> {
    constructor() {
        super("DeleteAccountResponseHeaderProto", []);
    }
    create(value?: PartialMessage<DeleteAccountResponseHeaderProto>): DeleteAccountResponseHeaderProto {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DeleteAccountResponseHeaderProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteAccountResponseHeaderProto): DeleteAccountResponseHeaderProto {
        return target ?? this.create();
    }
    internalBinaryWrite(message: DeleteAccountResponseHeaderProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DeleteAccountResponseHeaderProto
 */
export const DeleteAccountResponseHeaderProto = new DeleteAccountResponseHeaderProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteAccountResponseDeltaProto$Type extends MessageType<DeleteAccountResponseDeltaProto> {
    constructor() {
        super("DeleteAccountResponseDeltaProto", []);
    }
    create(value?: PartialMessage<DeleteAccountResponseDeltaProto>): DeleteAccountResponseDeltaProto {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DeleteAccountResponseDeltaProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteAccountResponseDeltaProto): DeleteAccountResponseDeltaProto {
        return target ?? this.create();
    }
    internalBinaryWrite(message: DeleteAccountResponseDeltaProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DeleteAccountResponseDeltaProto
 */
export const DeleteAccountResponseDeltaProto = new DeleteAccountResponseDeltaProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PodcastProto$Type extends MessageType<PodcastProto> {
    constructor() {
        super("PodcastProto", [
            { no: 1, name: "updated_at", kind: "message", T: () => Timestamp },
            { no: 2, name: "thumbnail", kind: "message", T: () => PodcastThumbnailProto },
            { no: 3, name: "audio", kind: "message", T: () => PodcastAudioProto },
            { no: 4, name: "visuals", kind: "message", T: () => PodcastVisualsProto },
            { no: 5, name: "transcript", kind: "message", T: () => PodcastTranscriptProto },
            { no: 6, name: "cards", kind: "message", T: () => PodcastCardsProto },
            { no: 7, name: "key_points", kind: "message", T: () => PodcastKeyPointsProto },
            { no: 8, name: "followups", kind: "message", T: () => PodcastFollowupsProto },
            { no: 9, name: "completion", kind: "message", T: () => PodcastCompletionProto }
        ]);
    }
    create(value?: PartialMessage<PodcastProto>): PodcastProto {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<PodcastProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PodcastProto): PodcastProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Timestamp updated_at */ 1:
                    message.updatedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.updatedAt);
                    break;
                case /* PodcastThumbnailProto thumbnail */ 2:
                    message.thumbnail = PodcastThumbnailProto.internalBinaryRead(reader, reader.uint32(), options, message.thumbnail);
                    break;
                case /* PodcastAudioProto audio */ 3:
                    message.audio = PodcastAudioProto.internalBinaryRead(reader, reader.uint32(), options, message.audio);
                    break;
                case /* PodcastVisualsProto visuals */ 4:
                    message.visuals = PodcastVisualsProto.internalBinaryRead(reader, reader.uint32(), options, message.visuals);
                    break;
                case /* PodcastTranscriptProto transcript */ 5:
                    message.transcript = PodcastTranscriptProto.internalBinaryRead(reader, reader.uint32(), options, message.transcript);
                    break;
                case /* PodcastCardsProto cards */ 6:
                    message.cards = PodcastCardsProto.internalBinaryRead(reader, reader.uint32(), options, message.cards);
                    break;
                case /* PodcastKeyPointsProto key_points */ 7:
                    message.keyPoints = PodcastKeyPointsProto.internalBinaryRead(reader, reader.uint32(), options, message.keyPoints);
                    break;
                case /* PodcastFollowupsProto followups */ 8:
                    message.followups = PodcastFollowupsProto.internalBinaryRead(reader, reader.uint32(), options, message.followups);
                    break;
                case /* PodcastCompletionProto completion */ 9:
                    message.completion = PodcastCompletionProto.internalBinaryRead(reader, reader.uint32(), options, message.completion);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PodcastProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.Timestamp updated_at = 1; */
        if (message.updatedAt)
            Timestamp.internalBinaryWrite(message.updatedAt, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* PodcastThumbnailProto thumbnail = 2; */
        if (message.thumbnail)
            PodcastThumbnailProto.internalBinaryWrite(message.thumbnail, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* PodcastAudioProto audio = 3; */
        if (message.audio)
            PodcastAudioProto.internalBinaryWrite(message.audio, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* PodcastVisualsProto visuals = 4; */
        if (message.visuals)
            PodcastVisualsProto.internalBinaryWrite(message.visuals, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* PodcastTranscriptProto transcript = 5; */
        if (message.transcript)
            PodcastTranscriptProto.internalBinaryWrite(message.transcript, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* PodcastCardsProto cards = 6; */
        if (message.cards)
            PodcastCardsProto.internalBinaryWrite(message.cards, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* PodcastKeyPointsProto key_points = 7; */
        if (message.keyPoints)
            PodcastKeyPointsProto.internalBinaryWrite(message.keyPoints, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* PodcastFollowupsProto followups = 8; */
        if (message.followups)
            PodcastFollowupsProto.internalBinaryWrite(message.followups, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* PodcastCompletionProto completion = 9; */
        if (message.completion)
            PodcastCompletionProto.internalBinaryWrite(message.completion, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PodcastProto
 */
export const PodcastProto = new PodcastProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FirestorePodcastSuggestionsProto$Type extends MessageType<FirestorePodcastSuggestionsProto> {
    constructor() {
        super("FirestorePodcastSuggestionsProto", [
            { no: 1, name: "updated_at", kind: "message", T: () => Timestamp },
            { no: 2, name: "your_podcasts_shelf", kind: "message", T: () => YourPodcastsShelfProto },
            { no: 3, name: "suggestions", kind: "message", T: () => PodcastSuggestionsProto },
            { no: 4, name: "new_suggestions_generation_state", kind: "message", T: () => PodcastSuggestionsGenerationStateProto }
        ]);
    }
    create(value?: PartialMessage<FirestorePodcastSuggestionsProto>): FirestorePodcastSuggestionsProto {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<FirestorePodcastSuggestionsProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FirestorePodcastSuggestionsProto): FirestorePodcastSuggestionsProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Timestamp updated_at */ 1:
                    message.updatedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.updatedAt);
                    break;
                case /* YourPodcastsShelfProto your_podcasts_shelf */ 2:
                    message.yourPodcastsShelf = YourPodcastsShelfProto.internalBinaryRead(reader, reader.uint32(), options, message.yourPodcastsShelf);
                    break;
                case /* PodcastSuggestionsProto suggestions */ 3:
                    message.suggestions = PodcastSuggestionsProto.internalBinaryRead(reader, reader.uint32(), options, message.suggestions);
                    break;
                case /* PodcastSuggestionsGenerationStateProto new_suggestions_generation_state */ 4:
                    message.newSuggestionsGenerationState = PodcastSuggestionsGenerationStateProto.internalBinaryRead(reader, reader.uint32(), options, message.newSuggestionsGenerationState);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FirestorePodcastSuggestionsProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.Timestamp updated_at = 1; */
        if (message.updatedAt)
            Timestamp.internalBinaryWrite(message.updatedAt, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* YourPodcastsShelfProto your_podcasts_shelf = 2; */
        if (message.yourPodcastsShelf)
            YourPodcastsShelfProto.internalBinaryWrite(message.yourPodcastsShelf, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* PodcastSuggestionsProto suggestions = 3; */
        if (message.suggestions)
            PodcastSuggestionsProto.internalBinaryWrite(message.suggestions, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* PodcastSuggestionsGenerationStateProto new_suggestions_generation_state = 4; */
        if (message.newSuggestionsGenerationState)
            PodcastSuggestionsGenerationStateProto.internalBinaryWrite(message.newSuggestionsGenerationState, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message FirestorePodcastSuggestionsProto
 */
export const FirestorePodcastSuggestionsProto = new FirestorePodcastSuggestionsProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class YourPodcastsShelfProto$Type extends MessageType<YourPodcastsShelfProto> {
    constructor() {
        super("YourPodcastsShelfProto", [
            { no: 1, name: "thumbnails", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => PodcastThumbnailProto } }
        ]);
    }
    create(value?: PartialMessage<YourPodcastsShelfProto>): YourPodcastsShelfProto {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.thumbnails = {};
        if (value !== undefined)
            reflectionMergePartial<YourPodcastsShelfProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: YourPodcastsShelfProto): YourPodcastsShelfProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<string, PodcastThumbnailProto> thumbnails */ 1:
                    this.binaryReadMap1(message.thumbnails, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap1(map: YourPodcastsShelfProto["thumbnails"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof YourPodcastsShelfProto["thumbnails"] | undefined, val: YourPodcastsShelfProto["thumbnails"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = PodcastThumbnailProto.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field YourPodcastsShelfProto.thumbnails");
            }
        }
        map[key ?? ""] = val ?? PodcastThumbnailProto.create();
    }
    internalBinaryWrite(message: YourPodcastsShelfProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<string, PodcastThumbnailProto> thumbnails = 1; */
        for (let k of globalThis.Object.keys(message.thumbnails)) {
            writer.tag(1, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            PodcastThumbnailProto.internalBinaryWrite(message.thumbnails[k], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message YourPodcastsShelfProto
 */
export const YourPodcastsShelfProto = new YourPodcastsShelfProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PodcastPointProto$Type extends MessageType<PodcastPointProto> {
    constructor() {
        super("PodcastPointProto", [
            { no: 1, name: "point_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "title_emoji", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "outline", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PodcastPointProto>): PodcastPointProto {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.pointId = "";
        message.title = "";
        message.titleEmoji = "";
        message.outline = "";
        if (value !== undefined)
            reflectionMergePartial<PodcastPointProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PodcastPointProto): PodcastPointProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string point_id */ 1:
                    message.pointId = reader.string();
                    break;
                case /* string title */ 2:
                    message.title = reader.string();
                    break;
                case /* string title_emoji */ 3:
                    message.titleEmoji = reader.string();
                    break;
                case /* string outline */ 4:
                    message.outline = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PodcastPointProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string point_id = 1; */
        if (message.pointId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.pointId);
        /* string title = 2; */
        if (message.title !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.title);
        /* string title_emoji = 3; */
        if (message.titleEmoji !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.titleEmoji);
        /* string outline = 4; */
        if (message.outline !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.outline);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PodcastPointProto
 */
export const PodcastPointProto = new PodcastPointProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PodcastThumbnailProto$Type extends MessageType<PodcastThumbnailProto> {
    constructor() {
        super("PodcastThumbnailProto", [
            { no: 1, name: "podcast_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "status", kind: "enum", T: () => ["PodcastStatusProto", PodcastStatusProto, "PODCAST_STATUS_PROTO_"] },
            { no: 3, name: "display_status", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "long_title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "badge", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "tags", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "type", kind: "enum", T: () => ["PodcastTypeProto", PodcastTypeProto, "PODCAST_TYPE_PROTO_"] },
            { no: 6, name: "path", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "duration", kind: "message", T: () => Duration },
            { no: 8, name: "updated_at", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<PodcastThumbnailProto>): PodcastThumbnailProto {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.podcastId = "";
        message.status = 0;
        message.displayStatus = "";
        message.title = "";
        message.longTitle = "";
        message.badge = "";
        message.tags = [];
        message.type = 0;
        message.path = "";
        if (value !== undefined)
            reflectionMergePartial<PodcastThumbnailProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PodcastThumbnailProto): PodcastThumbnailProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string podcast_id */ 1:
                    message.podcastId = reader.string();
                    break;
                case /* PodcastStatusProto status */ 2:
                    message.status = reader.int32();
                    break;
                case /* string display_status */ 3:
                    message.displayStatus = reader.string();
                    break;
                case /* string title */ 4:
                    message.title = reader.string();
                    break;
                case /* string long_title */ 9:
                    message.longTitle = reader.string();
                    break;
                case /* string badge */ 5:
                    message.badge = reader.string();
                    break;
                case /* repeated string tags */ 10:
                    message.tags.push(reader.string());
                    break;
                case /* PodcastTypeProto type */ 11:
                    message.type = reader.int32();
                    break;
                case /* string path */ 6:
                    message.path = reader.string();
                    break;
                case /* google.protobuf.Duration duration */ 7:
                    message.duration = Duration.internalBinaryRead(reader, reader.uint32(), options, message.duration);
                    break;
                case /* google.protobuf.Timestamp updated_at */ 8:
                    message.updatedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.updatedAt);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PodcastThumbnailProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string podcast_id = 1; */
        if (message.podcastId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.podcastId);
        /* PodcastStatusProto status = 2; */
        if (message.status !== 0)
            writer.tag(2, WireType.Varint).int32(message.status);
        /* string display_status = 3; */
        if (message.displayStatus !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.displayStatus);
        /* string title = 4; */
        if (message.title !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.title);
        /* string long_title = 9; */
        if (message.longTitle !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.longTitle);
        /* string badge = 5; */
        if (message.badge !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.badge);
        /* repeated string tags = 10; */
        for (let i = 0; i < message.tags.length; i++)
            writer.tag(10, WireType.LengthDelimited).string(message.tags[i]);
        /* PodcastTypeProto type = 11; */
        if (message.type !== 0)
            writer.tag(11, WireType.Varint).int32(message.type);
        /* string path = 6; */
        if (message.path !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.path);
        /* google.protobuf.Duration duration = 7; */
        if (message.duration)
            Duration.internalBinaryWrite(message.duration, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp updated_at = 8; */
        if (message.updatedAt)
            Timestamp.internalBinaryWrite(message.updatedAt, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PodcastThumbnailProto
 */
export const PodcastThumbnailProto = new PodcastThumbnailProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PodcastAudioProto$Type extends MessageType<PodcastAudioProto> {
    constructor() {
        super("PodcastAudioProto", [
            { no: 1, name: "path", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "duration", kind: "message", T: () => Duration }
        ]);
    }
    create(value?: PartialMessage<PodcastAudioProto>): PodcastAudioProto {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.path = "";
        if (value !== undefined)
            reflectionMergePartial<PodcastAudioProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PodcastAudioProto): PodcastAudioProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string path */ 1:
                    message.path = reader.string();
                    break;
                case /* google.protobuf.Duration duration */ 2:
                    message.duration = Duration.internalBinaryRead(reader, reader.uint32(), options, message.duration);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PodcastAudioProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string path = 1; */
        if (message.path !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.path);
        /* google.protobuf.Duration duration = 2; */
        if (message.duration)
            Duration.internalBinaryWrite(message.duration, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PodcastAudioProto
 */
export const PodcastAudioProto = new PodcastAudioProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PodcastCardsProto$Type extends MessageType<PodcastCardsProto> {
    constructor() {
        super("PodcastCardsProto", [
            { no: 1, name: "is_ready", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "cards", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PodcastCardProto }
        ]);
    }
    create(value?: PartialMessage<PodcastCardsProto>): PodcastCardsProto {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.isReady = false;
        message.cards = [];
        if (value !== undefined)
            reflectionMergePartial<PodcastCardsProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PodcastCardsProto): PodcastCardsProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool is_ready */ 1:
                    message.isReady = reader.bool();
                    break;
                case /* repeated PodcastCardProto cards */ 2:
                    message.cards.push(PodcastCardProto.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PodcastCardsProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool is_ready = 1; */
        if (message.isReady !== false)
            writer.tag(1, WireType.Varint).bool(message.isReady);
        /* repeated PodcastCardProto cards = 2; */
        for (let i = 0; i < message.cards.length; i++)
            PodcastCardProto.internalBinaryWrite(message.cards[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PodcastCardsProto
 */
export const PodcastCardsProto = new PodcastCardsProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PodcastCardProto$Type extends MessageType<PodcastCardProto> {
    constructor() {
        super("PodcastCardProto", [
            { no: 1, name: "card_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "is_ready", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "knowledge", kind: "message", oneof: "type", T: () => PodcastKnowledgeCardProto },
            { no: 11, name: "multiple_choice", kind: "message", oneof: "type", T: () => PodcastMultipleChoiceCardProto },
            { no: 12, name: "poll", kind: "message", oneof: "type", T: () => PodcastPollCardProto }
        ]);
    }
    create(value?: PartialMessage<PodcastCardProto>): PodcastCardProto {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.cardId = "";
        message.isReady = false;
        message.type = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<PodcastCardProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PodcastCardProto): PodcastCardProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string card_id */ 1:
                    message.cardId = reader.string();
                    break;
                case /* bool is_ready */ 2:
                    message.isReady = reader.bool();
                    break;
                case /* PodcastKnowledgeCardProto knowledge */ 10:
                    message.type = {
                        oneofKind: "knowledge",
                        knowledge: PodcastKnowledgeCardProto.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).knowledge)
                    };
                    break;
                case /* PodcastMultipleChoiceCardProto multiple_choice */ 11:
                    message.type = {
                        oneofKind: "multipleChoice",
                        multipleChoice: PodcastMultipleChoiceCardProto.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).multipleChoice)
                    };
                    break;
                case /* PodcastPollCardProto poll */ 12:
                    message.type = {
                        oneofKind: "poll",
                        poll: PodcastPollCardProto.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).poll)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PodcastCardProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string card_id = 1; */
        if (message.cardId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.cardId);
        /* bool is_ready = 2; */
        if (message.isReady !== false)
            writer.tag(2, WireType.Varint).bool(message.isReady);
        /* PodcastKnowledgeCardProto knowledge = 10; */
        if (message.type.oneofKind === "knowledge")
            PodcastKnowledgeCardProto.internalBinaryWrite(message.type.knowledge, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* PodcastMultipleChoiceCardProto multiple_choice = 11; */
        if (message.type.oneofKind === "multipleChoice")
            PodcastMultipleChoiceCardProto.internalBinaryWrite(message.type.multipleChoice, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* PodcastPollCardProto poll = 12; */
        if (message.type.oneofKind === "poll")
            PodcastPollCardProto.internalBinaryWrite(message.type.poll, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PodcastCardProto
 */
export const PodcastCardProto = new PodcastCardProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PodcastErrorProto$Type extends MessageType<PodcastErrorProto> {
    constructor() {
        super("PodcastErrorProto", [
            { no: 1, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PodcastErrorProto>): PodcastErrorProto {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.message = "";
        if (value !== undefined)
            reflectionMergePartial<PodcastErrorProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PodcastErrorProto): PodcastErrorProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string message */ 1:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PodcastErrorProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string message = 1; */
        if (message.message !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PodcastErrorProto
 */
export const PodcastErrorProto = new PodcastErrorProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PodcastPromptAnswerProto$Type extends MessageType<PodcastPromptAnswerProto> {
    constructor() {
        super("PodcastPromptAnswerProto", [
            { no: 1, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PodcastPromptAnswerProto>): PodcastPromptAnswerProto {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.text = "";
        if (value !== undefined)
            reflectionMergePartial<PodcastPromptAnswerProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PodcastPromptAnswerProto): PodcastPromptAnswerProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string text */ 1:
                    message.text = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PodcastPromptAnswerProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string text = 1; */
        if (message.text !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.text);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PodcastPromptAnswerProto
 */
export const PodcastPromptAnswerProto = new PodcastPromptAnswerProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PodcastVisualsProto$Type extends MessageType<PodcastVisualsProto> {
    constructor() {
        super("PodcastVisualsProto", [
            { no: 1, name: "visuals", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PodcastVisualProto }
        ]);
    }
    create(value?: PartialMessage<PodcastVisualsProto>): PodcastVisualsProto {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.visuals = [];
        if (value !== undefined)
            reflectionMergePartial<PodcastVisualsProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PodcastVisualsProto): PodcastVisualsProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated PodcastVisualProto visuals */ 1:
                    message.visuals.push(PodcastVisualProto.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PodcastVisualsProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated PodcastVisualProto visuals = 1; */
        for (let i = 0; i < message.visuals.length; i++)
            PodcastVisualProto.internalBinaryWrite(message.visuals[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PodcastVisualsProto
 */
export const PodcastVisualsProto = new PodcastVisualsProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PodcastVisualProto$Type extends MessageType<PodcastVisualProto> {
    constructor() {
        super("PodcastVisualProto", [
            { no: 1, name: "timestamp_millis", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "image_path", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "animation", kind: "message", T: () => PodcastVisualAnimationProto },
            { no: 3, name: "transition", kind: "enum", T: () => ["PodcastVisualTransitionProto", PodcastVisualTransitionProto, "PODCAST_VISUAL_TRANSITION_PROTO_"] }
        ]);
    }
    create(value?: PartialMessage<PodcastVisualProto>): PodcastVisualProto {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.timestampMillis = 0;
        message.imagePath = "";
        message.transition = 0;
        if (value !== undefined)
            reflectionMergePartial<PodcastVisualProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PodcastVisualProto): PodcastVisualProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 timestamp_millis */ 1:
                    message.timestampMillis = reader.int32();
                    break;
                case /* string image_path */ 2:
                    message.imagePath = reader.string();
                    break;
                case /* PodcastVisualAnimationProto animation */ 4:
                    message.animation = PodcastVisualAnimationProto.internalBinaryRead(reader, reader.uint32(), options, message.animation);
                    break;
                case /* PodcastVisualTransitionProto transition */ 3:
                    message.transition = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PodcastVisualProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 timestamp_millis = 1; */
        if (message.timestampMillis !== 0)
            writer.tag(1, WireType.Varint).int32(message.timestampMillis);
        /* string image_path = 2; */
        if (message.imagePath !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.imagePath);
        /* PodcastVisualAnimationProto animation = 4; */
        if (message.animation)
            PodcastVisualAnimationProto.internalBinaryWrite(message.animation, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* PodcastVisualTransitionProto transition = 3; */
        if (message.transition !== 0)
            writer.tag(3, WireType.Varint).int32(message.transition);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PodcastVisualProto
 */
export const PodcastVisualProto = new PodcastVisualProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PodcastVisualAnimationProto$Type extends MessageType<PodcastVisualAnimationProto> {
    constructor() {
        super("PodcastVisualAnimationProto", [
            { no: 1, name: "duration_millis", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "start_scale", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 3, name: "end_scale", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<PodcastVisualAnimationProto>): PodcastVisualAnimationProto {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.durationMillis = 0;
        message.startScale = 0;
        message.endScale = 0;
        if (value !== undefined)
            reflectionMergePartial<PodcastVisualAnimationProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PodcastVisualAnimationProto): PodcastVisualAnimationProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 duration_millis */ 1:
                    message.durationMillis = reader.int32();
                    break;
                case /* float start_scale */ 2:
                    message.startScale = reader.float();
                    break;
                case /* float end_scale */ 3:
                    message.endScale = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PodcastVisualAnimationProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 duration_millis = 1; */
        if (message.durationMillis !== 0)
            writer.tag(1, WireType.Varint).int32(message.durationMillis);
        /* float start_scale = 2; */
        if (message.startScale !== 0)
            writer.tag(2, WireType.Bit32).float(message.startScale);
        /* float end_scale = 3; */
        if (message.endScale !== 0)
            writer.tag(3, WireType.Bit32).float(message.endScale);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PodcastVisualAnimationProto
 */
export const PodcastVisualAnimationProto = new PodcastVisualAnimationProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PodcastTranscriptProto$Type extends MessageType<PodcastTranscriptProto> {
    constructor() {
        super("PodcastTranscriptProto", [
            { no: 1, name: "entries", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PodcastTranscriptEntryProto }
        ]);
    }
    create(value?: PartialMessage<PodcastTranscriptProto>): PodcastTranscriptProto {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.entries = [];
        if (value !== undefined)
            reflectionMergePartial<PodcastTranscriptProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PodcastTranscriptProto): PodcastTranscriptProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated PodcastTranscriptEntryProto entries */ 1:
                    message.entries.push(PodcastTranscriptEntryProto.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PodcastTranscriptProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated PodcastTranscriptEntryProto entries = 1; */
        for (let i = 0; i < message.entries.length; i++)
            PodcastTranscriptEntryProto.internalBinaryWrite(message.entries[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PodcastTranscriptProto
 */
export const PodcastTranscriptProto = new PodcastTranscriptProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PodcastTranscriptEntryProto$Type extends MessageType<PodcastTranscriptEntryProto> {
    constructor() {
        super("PodcastTranscriptEntryProto", [
            { no: 1, name: "host", kind: "enum", T: () => ["PodcastHostProto", PodcastHostProto, "PODCAST_HOST_PROTO_"] },
            { no: 2, name: "words", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PodcastWordProto }
        ]);
    }
    create(value?: PartialMessage<PodcastTranscriptEntryProto>): PodcastTranscriptEntryProto {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.host = 0;
        message.words = [];
        if (value !== undefined)
            reflectionMergePartial<PodcastTranscriptEntryProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PodcastTranscriptEntryProto): PodcastTranscriptEntryProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* PodcastHostProto host */ 1:
                    message.host = reader.int32();
                    break;
                case /* repeated PodcastWordProto words */ 2:
                    message.words.push(PodcastWordProto.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PodcastTranscriptEntryProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* PodcastHostProto host = 1; */
        if (message.host !== 0)
            writer.tag(1, WireType.Varint).int32(message.host);
        /* repeated PodcastWordProto words = 2; */
        for (let i = 0; i < message.words.length; i++)
            PodcastWordProto.internalBinaryWrite(message.words[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PodcastTranscriptEntryProto
 */
export const PodcastTranscriptEntryProto = new PodcastTranscriptEntryProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PodcastWordProto$Type extends MessageType<PodcastWordProto> {
    constructor() {
        super("PodcastWordProto", [
            { no: 1, name: "word", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "start_millis", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "end_millis", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "separator", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PodcastWordProto>): PodcastWordProto {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.word = "";
        message.startMillis = 0;
        message.endMillis = 0;
        message.separator = "";
        if (value !== undefined)
            reflectionMergePartial<PodcastWordProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PodcastWordProto): PodcastWordProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string word */ 1:
                    message.word = reader.string();
                    break;
                case /* int32 start_millis */ 2:
                    message.startMillis = reader.int32();
                    break;
                case /* int32 end_millis */ 3:
                    message.endMillis = reader.int32();
                    break;
                case /* string separator */ 4:
                    message.separator = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PodcastWordProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string word = 1; */
        if (message.word !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.word);
        /* int32 start_millis = 2; */
        if (message.startMillis !== 0)
            writer.tag(2, WireType.Varint).int32(message.startMillis);
        /* int32 end_millis = 3; */
        if (message.endMillis !== 0)
            writer.tag(3, WireType.Varint).int32(message.endMillis);
        /* string separator = 4; */
        if (message.separator !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.separator);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PodcastWordProto
 */
export const PodcastWordProto = new PodcastWordProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PodcastKnowledgeCardProto$Type extends MessageType<PodcastKnowledgeCardProto> {
    constructor() {
        super("PodcastKnowledgeCardProto", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "hero", kind: "message", T: () => PodcastCardHeroProto },
            { no: 3, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "explanation", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PodcastKnowledgeCardProto>): PodcastKnowledgeCardProto {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.title = "";
        message.text = "";
        message.explanation = "";
        if (value !== undefined)
            reflectionMergePartial<PodcastKnowledgeCardProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PodcastKnowledgeCardProto): PodcastKnowledgeCardProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* PodcastCardHeroProto hero */ 2:
                    message.hero = PodcastCardHeroProto.internalBinaryRead(reader, reader.uint32(), options, message.hero);
                    break;
                case /* string text */ 3:
                    message.text = reader.string();
                    break;
                case /* string explanation */ 4:
                    message.explanation = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PodcastKnowledgeCardProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* PodcastCardHeroProto hero = 2; */
        if (message.hero)
            PodcastCardHeroProto.internalBinaryWrite(message.hero, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string text = 3; */
        if (message.text !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.text);
        /* string explanation = 4; */
        if (message.explanation !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.explanation);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PodcastKnowledgeCardProto
 */
export const PodcastKnowledgeCardProto = new PodcastKnowledgeCardProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PodcastMultipleChoiceCardProto$Type extends MessageType<PodcastMultipleChoiceCardProto> {
    constructor() {
        super("PodcastMultipleChoiceCardProto", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "hero", kind: "message", T: () => PodcastCardHeroProto },
            { no: 3, name: "question", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "options", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PodcastMultipleChoiceOptionProto },
            { no: 5, name: "correct_answer_number", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "hints", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "explanation", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PodcastMultipleChoiceCardProto>): PodcastMultipleChoiceCardProto {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.title = "";
        message.question = "";
        message.options = [];
        message.correctAnswerNumber = 0;
        message.hints = [];
        message.explanation = "";
        if (value !== undefined)
            reflectionMergePartial<PodcastMultipleChoiceCardProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PodcastMultipleChoiceCardProto): PodcastMultipleChoiceCardProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* PodcastCardHeroProto hero */ 2:
                    message.hero = PodcastCardHeroProto.internalBinaryRead(reader, reader.uint32(), options, message.hero);
                    break;
                case /* string question */ 3:
                    message.question = reader.string();
                    break;
                case /* repeated PodcastMultipleChoiceOptionProto options */ 4:
                    message.options.push(PodcastMultipleChoiceOptionProto.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int32 correct_answer_number */ 5:
                    message.correctAnswerNumber = reader.int32();
                    break;
                case /* repeated string hints */ 6:
                    message.hints.push(reader.string());
                    break;
                case /* string explanation */ 7:
                    message.explanation = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PodcastMultipleChoiceCardProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* PodcastCardHeroProto hero = 2; */
        if (message.hero)
            PodcastCardHeroProto.internalBinaryWrite(message.hero, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string question = 3; */
        if (message.question !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.question);
        /* repeated PodcastMultipleChoiceOptionProto options = 4; */
        for (let i = 0; i < message.options.length; i++)
            PodcastMultipleChoiceOptionProto.internalBinaryWrite(message.options[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* int32 correct_answer_number = 5; */
        if (message.correctAnswerNumber !== 0)
            writer.tag(5, WireType.Varint).int32(message.correctAnswerNumber);
        /* repeated string hints = 6; */
        for (let i = 0; i < message.hints.length; i++)
            writer.tag(6, WireType.LengthDelimited).string(message.hints[i]);
        /* string explanation = 7; */
        if (message.explanation !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.explanation);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PodcastMultipleChoiceCardProto
 */
export const PodcastMultipleChoiceCardProto = new PodcastMultipleChoiceCardProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PodcastPollCardProto$Type extends MessageType<PodcastPollCardProto> {
    constructor() {
        super("PodcastPollCardProto", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "hero", kind: "message", T: () => PodcastCardHeroProto },
            { no: 3, name: "question", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "options", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PodcastPollOptionProto }
        ]);
    }
    create(value?: PartialMessage<PodcastPollCardProto>): PodcastPollCardProto {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.title = "";
        message.question = "";
        message.options = [];
        if (value !== undefined)
            reflectionMergePartial<PodcastPollCardProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PodcastPollCardProto): PodcastPollCardProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* PodcastCardHeroProto hero */ 2:
                    message.hero = PodcastCardHeroProto.internalBinaryRead(reader, reader.uint32(), options, message.hero);
                    break;
                case /* string question */ 3:
                    message.question = reader.string();
                    break;
                case /* repeated PodcastPollOptionProto options */ 4:
                    message.options.push(PodcastPollOptionProto.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PodcastPollCardProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* PodcastCardHeroProto hero = 2; */
        if (message.hero)
            PodcastCardHeroProto.internalBinaryWrite(message.hero, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string question = 3; */
        if (message.question !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.question);
        /* repeated PodcastPollOptionProto options = 4; */
        for (let i = 0; i < message.options.length; i++)
            PodcastPollOptionProto.internalBinaryWrite(message.options[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PodcastPollCardProto
 */
export const PodcastPollCardProto = new PodcastPollCardProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PodcastCardHeroProto$Type extends MessageType<PodcastCardHeroProto> {
    constructor() {
        super("PodcastCardHeroProto", [
            { no: 1, name: "emoji", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "lottie_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PodcastCardHeroProto>): PodcastCardHeroProto {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.emoji = "";
        message.lottieUrl = "";
        if (value !== undefined)
            reflectionMergePartial<PodcastCardHeroProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PodcastCardHeroProto): PodcastCardHeroProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string emoji */ 1:
                    message.emoji = reader.string();
                    break;
                case /* string lottie_url */ 2:
                    message.lottieUrl = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PodcastCardHeroProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string emoji = 1; */
        if (message.emoji !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.emoji);
        /* string lottie_url = 2; */
        if (message.lottieUrl !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.lottieUrl);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PodcastCardHeroProto
 */
export const PodcastCardHeroProto = new PodcastCardHeroProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PodcastMultipleChoiceOptionProto$Type extends MessageType<PodcastMultipleChoiceOptionProto> {
    constructor() {
        super("PodcastMultipleChoiceOptionProto", [
            { no: 1, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PodcastMultipleChoiceOptionProto>): PodcastMultipleChoiceOptionProto {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.text = "";
        if (value !== undefined)
            reflectionMergePartial<PodcastMultipleChoiceOptionProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PodcastMultipleChoiceOptionProto): PodcastMultipleChoiceOptionProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string text */ 1:
                    message.text = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PodcastMultipleChoiceOptionProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string text = 1; */
        if (message.text !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.text);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PodcastMultipleChoiceOptionProto
 */
export const PodcastMultipleChoiceOptionProto = new PodcastMultipleChoiceOptionProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PodcastPollOptionProto$Type extends MessageType<PodcastPollOptionProto> {
    constructor() {
        super("PodcastPollOptionProto", [
            { no: 1, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PodcastPollOptionProto>): PodcastPollOptionProto {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.text = "";
        if (value !== undefined)
            reflectionMergePartial<PodcastPollOptionProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PodcastPollOptionProto): PodcastPollOptionProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string text */ 1:
                    message.text = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PodcastPollOptionProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string text = 1; */
        if (message.text !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.text);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PodcastPollOptionProto
 */
export const PodcastPollOptionProto = new PodcastPollOptionProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PodcastKeyPointsProto$Type extends MessageType<PodcastKeyPointsProto> {
    constructor() {
        super("PodcastKeyPointsProto", [
            { no: 1, name: "label", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "key_points", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PodcastKeyPointProto }
        ]);
    }
    create(value?: PartialMessage<PodcastKeyPointsProto>): PodcastKeyPointsProto {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.label = "";
        message.keyPoints = [];
        if (value !== undefined)
            reflectionMergePartial<PodcastKeyPointsProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PodcastKeyPointsProto): PodcastKeyPointsProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string label */ 1:
                    message.label = reader.string();
                    break;
                case /* repeated PodcastKeyPointProto key_points */ 2:
                    message.keyPoints.push(PodcastKeyPointProto.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PodcastKeyPointsProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string label = 1; */
        if (message.label !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.label);
        /* repeated PodcastKeyPointProto key_points = 2; */
        for (let i = 0; i < message.keyPoints.length; i++)
            PodcastKeyPointProto.internalBinaryWrite(message.keyPoints[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PodcastKeyPointsProto
 */
export const PodcastKeyPointsProto = new PodcastKeyPointsProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PodcastFollowupsProto$Type extends MessageType<PodcastFollowupsProto> {
    constructor() {
        super("PodcastFollowupsProto", [
            { no: 1, name: "label", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "followups", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PodcastFollowupProto }
        ]);
    }
    create(value?: PartialMessage<PodcastFollowupsProto>): PodcastFollowupsProto {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.label = "";
        message.followups = [];
        if (value !== undefined)
            reflectionMergePartial<PodcastFollowupsProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PodcastFollowupsProto): PodcastFollowupsProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string label */ 1:
                    message.label = reader.string();
                    break;
                case /* repeated PodcastFollowupProto followups */ 2:
                    message.followups.push(PodcastFollowupProto.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PodcastFollowupsProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string label = 1; */
        if (message.label !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.label);
        /* repeated PodcastFollowupProto followups = 2; */
        for (let i = 0; i < message.followups.length; i++)
            PodcastFollowupProto.internalBinaryWrite(message.followups[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PodcastFollowupsProto
 */
export const PodcastFollowupsProto = new PodcastFollowupsProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PodcastFollowupProto$Type extends MessageType<PodcastFollowupProto> {
    constructor() {
        super("PodcastFollowupProto", [
            { no: 1, name: "followup_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "emoji", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "outline", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PodcastFollowupProto>): PodcastFollowupProto {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.followupId = "";
        message.emoji = "";
        message.outline = "";
        if (value !== undefined)
            reflectionMergePartial<PodcastFollowupProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PodcastFollowupProto): PodcastFollowupProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string followup_id */ 1:
                    message.followupId = reader.string();
                    break;
                case /* string emoji */ 2:
                    message.emoji = reader.string();
                    break;
                case /* string outline */ 3:
                    message.outline = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PodcastFollowupProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string followup_id = 1; */
        if (message.followupId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.followupId);
        /* string emoji = 2; */
        if (message.emoji !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.emoji);
        /* string outline = 3; */
        if (message.outline !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.outline);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PodcastFollowupProto
 */
export const PodcastFollowupProto = new PodcastFollowupProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PodcastKeyPointProto$Type extends MessageType<PodcastKeyPointProto> {
    constructor() {
        super("PodcastKeyPointProto", [
            { no: 1, name: "key_point_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "title_emoji", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "outline", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PodcastKeyPointProto>): PodcastKeyPointProto {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.keyPointId = "";
        message.title = "";
        message.titleEmoji = "";
        message.outline = "";
        if (value !== undefined)
            reflectionMergePartial<PodcastKeyPointProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PodcastKeyPointProto): PodcastKeyPointProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string key_point_id */ 1:
                    message.keyPointId = reader.string();
                    break;
                case /* string title */ 2:
                    message.title = reader.string();
                    break;
                case /* string title_emoji */ 3:
                    message.titleEmoji = reader.string();
                    break;
                case /* string outline */ 4:
                    message.outline = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PodcastKeyPointProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string key_point_id = 1; */
        if (message.keyPointId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.keyPointId);
        /* string title = 2; */
        if (message.title !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.title);
        /* string title_emoji = 3; */
        if (message.titleEmoji !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.titleEmoji);
        /* string outline = 4; */
        if (message.outline !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.outline);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PodcastKeyPointProto
 */
export const PodcastKeyPointProto = new PodcastKeyPointProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PodcastCompletionProto$Type extends MessageType<PodcastCompletionProto> {
    constructor() {
        super("PodcastCompletionProto", [
            { no: 1, name: "action", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "encouragement", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "emoji", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "lottie_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PodcastCompletionProto>): PodcastCompletionProto {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.action = "";
        message.encouragement = "";
        message.emoji = "";
        message.lottieUrl = "";
        if (value !== undefined)
            reflectionMergePartial<PodcastCompletionProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PodcastCompletionProto): PodcastCompletionProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string action */ 1:
                    message.action = reader.string();
                    break;
                case /* string encouragement */ 2:
                    message.encouragement = reader.string();
                    break;
                case /* string emoji */ 3:
                    message.emoji = reader.string();
                    break;
                case /* string lottie_url */ 4:
                    message.lottieUrl = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PodcastCompletionProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string action = 1; */
        if (message.action !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.action);
        /* string encouragement = 2; */
        if (message.encouragement !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.encouragement);
        /* string emoji = 3; */
        if (message.emoji !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.emoji);
        /* string lottie_url = 4; */
        if (message.lottieUrl !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.lottieUrl);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PodcastCompletionProto
 */
export const PodcastCompletionProto = new PodcastCompletionProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PodcastSuggestionsProto$Type extends MessageType<PodcastSuggestionsProto> {
    constructor() {
        super("PodcastSuggestionsProto", [
            { no: 1, name: "suggestions_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "created_at", kind: "message", T: () => Timestamp },
            { no: 3, name: "sections", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PodcastSuggestionsSectionProto },
            { no: 4, name: "routine", kind: "message", T: () => PodcastRoutineProto }
        ]);
    }
    create(value?: PartialMessage<PodcastSuggestionsProto>): PodcastSuggestionsProto {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.suggestionsId = "";
        message.sections = [];
        if (value !== undefined)
            reflectionMergePartial<PodcastSuggestionsProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PodcastSuggestionsProto): PodcastSuggestionsProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string suggestions_id */ 1:
                    message.suggestionsId = reader.string();
                    break;
                case /* google.protobuf.Timestamp created_at */ 2:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* repeated PodcastSuggestionsSectionProto sections */ 3:
                    message.sections.push(PodcastSuggestionsSectionProto.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* PodcastRoutineProto routine */ 4:
                    message.routine = PodcastRoutineProto.internalBinaryRead(reader, reader.uint32(), options, message.routine);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PodcastSuggestionsProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string suggestions_id = 1; */
        if (message.suggestionsId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.suggestionsId);
        /* google.protobuf.Timestamp created_at = 2; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated PodcastSuggestionsSectionProto sections = 3; */
        for (let i = 0; i < message.sections.length; i++)
            PodcastSuggestionsSectionProto.internalBinaryWrite(message.sections[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* PodcastRoutineProto routine = 4; */
        if (message.routine)
            PodcastRoutineProto.internalBinaryWrite(message.routine, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PodcastSuggestionsProto
 */
export const PodcastSuggestionsProto = new PodcastSuggestionsProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PodcastSuggestionsGenerationStateProto$Type extends MessageType<PodcastSuggestionsGenerationStateProto> {
    constructor() {
        super("PodcastSuggestionsGenerationStateProto", [
            { no: 1, name: "suggestions_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "updated_at", kind: "message", T: () => Timestamp },
            { no: 3, name: "state", kind: "enum", T: () => ["PodcastSuggestionsStateProto", PodcastSuggestionsStateProto, "PODCAST_SUGGESTIONS_STATE_PROTO_"] },
            { no: 4, name: "display_state", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PodcastSuggestionsGenerationStateProto>): PodcastSuggestionsGenerationStateProto {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.suggestionsId = "";
        message.state = 0;
        message.displayState = "";
        if (value !== undefined)
            reflectionMergePartial<PodcastSuggestionsGenerationStateProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PodcastSuggestionsGenerationStateProto): PodcastSuggestionsGenerationStateProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string suggestions_id */ 1:
                    message.suggestionsId = reader.string();
                    break;
                case /* google.protobuf.Timestamp updated_at */ 2:
                    message.updatedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.updatedAt);
                    break;
                case /* PodcastSuggestionsStateProto state */ 3:
                    message.state = reader.int32();
                    break;
                case /* string display_state */ 4:
                    message.displayState = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PodcastSuggestionsGenerationStateProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string suggestions_id = 1; */
        if (message.suggestionsId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.suggestionsId);
        /* google.protobuf.Timestamp updated_at = 2; */
        if (message.updatedAt)
            Timestamp.internalBinaryWrite(message.updatedAt, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* PodcastSuggestionsStateProto state = 3; */
        if (message.state !== 0)
            writer.tag(3, WireType.Varint).int32(message.state);
        /* string display_state = 4; */
        if (message.displayState !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.displayState);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PodcastSuggestionsGenerationStateProto
 */
export const PodcastSuggestionsGenerationStateProto = new PodcastSuggestionsGenerationStateProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PodcastSuggestionsSectionProto$Type extends MessageType<PodcastSuggestionsSectionProto> {
    constructor() {
        super("PodcastSuggestionsSectionProto", [
            { no: 1, name: "section_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "section_title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "banner_suggestion", kind: "message", T: () => PodcastThumbnailProto },
            { no: 4, name: "footer_suggestion", kind: "message", T: () => PodcastThumbnailProto },
            { no: 5, name: "story1", kind: "message", T: () => PodcastStoryThumbnailProto },
            { no: 6, name: "story2", kind: "message", T: () => PodcastStoryThumbnailProto }
        ]);
    }
    create(value?: PartialMessage<PodcastSuggestionsSectionProto>): PodcastSuggestionsSectionProto {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.sectionId = "";
        message.sectionTitle = "";
        if (value !== undefined)
            reflectionMergePartial<PodcastSuggestionsSectionProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PodcastSuggestionsSectionProto): PodcastSuggestionsSectionProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string section_id */ 1:
                    message.sectionId = reader.string();
                    break;
                case /* string section_title */ 2:
                    message.sectionTitle = reader.string();
                    break;
                case /* PodcastThumbnailProto banner_suggestion */ 3:
                    message.bannerSuggestion = PodcastThumbnailProto.internalBinaryRead(reader, reader.uint32(), options, message.bannerSuggestion);
                    break;
                case /* PodcastThumbnailProto footer_suggestion */ 4:
                    message.footerSuggestion = PodcastThumbnailProto.internalBinaryRead(reader, reader.uint32(), options, message.footerSuggestion);
                    break;
                case /* PodcastStoryThumbnailProto story1 */ 5:
                    message.story1 = PodcastStoryThumbnailProto.internalBinaryRead(reader, reader.uint32(), options, message.story1);
                    break;
                case /* PodcastStoryThumbnailProto story2 */ 6:
                    message.story2 = PodcastStoryThumbnailProto.internalBinaryRead(reader, reader.uint32(), options, message.story2);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PodcastSuggestionsSectionProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string section_id = 1; */
        if (message.sectionId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.sectionId);
        /* string section_title = 2; */
        if (message.sectionTitle !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.sectionTitle);
        /* PodcastThumbnailProto banner_suggestion = 3; */
        if (message.bannerSuggestion)
            PodcastThumbnailProto.internalBinaryWrite(message.bannerSuggestion, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* PodcastThumbnailProto footer_suggestion = 4; */
        if (message.footerSuggestion)
            PodcastThumbnailProto.internalBinaryWrite(message.footerSuggestion, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* PodcastStoryThumbnailProto story1 = 5; */
        if (message.story1)
            PodcastStoryThumbnailProto.internalBinaryWrite(message.story1, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* PodcastStoryThumbnailProto story2 = 6; */
        if (message.story2)
            PodcastStoryThumbnailProto.internalBinaryWrite(message.story2, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PodcastSuggestionsSectionProto
 */
export const PodcastSuggestionsSectionProto = new PodcastSuggestionsSectionProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PodcastStoryThumbnailProto$Type extends MessageType<PodcastStoryThumbnailProto> {
    constructor() {
        super("PodcastStoryThumbnailProto", [
            { no: 1, name: "story_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "thumbnail_path", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PodcastStoryThumbnailProto>): PodcastStoryThumbnailProto {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.storyId = "";
        message.title = "";
        message.thumbnailPath = "";
        if (value !== undefined)
            reflectionMergePartial<PodcastStoryThumbnailProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PodcastStoryThumbnailProto): PodcastStoryThumbnailProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string story_id */ 1:
                    message.storyId = reader.string();
                    break;
                case /* string title */ 2:
                    message.title = reader.string();
                    break;
                case /* string thumbnail_path */ 3:
                    message.thumbnailPath = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PodcastStoryThumbnailProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string story_id = 1; */
        if (message.storyId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.storyId);
        /* string title = 2; */
        if (message.title !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.title);
        /* string thumbnail_path = 3; */
        if (message.thumbnailPath !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.thumbnailPath);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PodcastStoryThumbnailProto
 */
export const PodcastStoryThumbnailProto = new PodcastStoryThumbnailProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PodcastStoryHeaderProto$Type extends MessageType<PodcastStoryHeaderProto> {
    constructor() {
        super("PodcastStoryHeaderProto", [
            { no: 1, name: "badge", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PodcastStoryHeaderProto>): PodcastStoryHeaderProto {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.badge = "";
        if (value !== undefined)
            reflectionMergePartial<PodcastStoryHeaderProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PodcastStoryHeaderProto): PodcastStoryHeaderProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string badge */ 1:
                    message.badge = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PodcastStoryHeaderProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string badge = 1; */
        if (message.badge !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.badge);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PodcastStoryHeaderProto
 */
export const PodcastStoryHeaderProto = new PodcastStoryHeaderProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PodcastStorySlideProto$Type extends MessageType<PodcastStorySlideProto> {
    constructor() {
        super("PodcastStorySlideProto", [
            { no: 1, name: "slide_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "is_text_ready", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "image_path", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PodcastStorySlideProto>): PodcastStorySlideProto {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.slideId = "";
        message.isTextReady = false;
        message.title = "";
        message.imagePath = "";
        message.text = "";
        if (value !== undefined)
            reflectionMergePartial<PodcastStorySlideProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PodcastStorySlideProto): PodcastStorySlideProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string slide_id */ 1:
                    message.slideId = reader.string();
                    break;
                case /* bool is_text_ready */ 2:
                    message.isTextReady = reader.bool();
                    break;
                case /* string title */ 3:
                    message.title = reader.string();
                    break;
                case /* string image_path */ 4:
                    message.imagePath = reader.string();
                    break;
                case /* string text */ 5:
                    message.text = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PodcastStorySlideProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string slide_id = 1; */
        if (message.slideId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.slideId);
        /* bool is_text_ready = 2; */
        if (message.isTextReady !== false)
            writer.tag(2, WireType.Varint).bool(message.isTextReady);
        /* string title = 3; */
        if (message.title !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.title);
        /* string image_path = 4; */
        if (message.imagePath !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.imagePath);
        /* string text = 5; */
        if (message.text !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.text);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PodcastStorySlideProto
 */
export const PodcastStorySlideProto = new PodcastStorySlideProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PodcastRoutineProto$Type extends MessageType<PodcastRoutineProto> {
    constructor() {
        super("PodcastRoutineProto", [
            { no: 2, name: "routine_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 1, name: "segments", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PodcastRoutineSegmentProto }
        ]);
    }
    create(value?: PartialMessage<PodcastRoutineProto>): PodcastRoutineProto {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.routineId = "";
        message.title = "";
        message.segments = [];
        if (value !== undefined)
            reflectionMergePartial<PodcastRoutineProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PodcastRoutineProto): PodcastRoutineProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string routine_id */ 2:
                    message.routineId = reader.string();
                    break;
                case /* string title */ 3:
                    message.title = reader.string();
                    break;
                case /* repeated PodcastRoutineSegmentProto segments */ 1:
                    message.segments.push(PodcastRoutineSegmentProto.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PodcastRoutineProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string routine_id = 2; */
        if (message.routineId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.routineId);
        /* string title = 3; */
        if (message.title !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.title);
        /* repeated PodcastRoutineSegmentProto segments = 1; */
        for (let i = 0; i < message.segments.length; i++)
            PodcastRoutineSegmentProto.internalBinaryWrite(message.segments[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PodcastRoutineProto
 */
export const PodcastRoutineProto = new PodcastRoutineProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PodcastRoutineSegmentProto$Type extends MessageType<PodcastRoutineSegmentProto> {
    constructor() {
        super("PodcastRoutineSegmentProto", [
            { no: 1, name: "segment_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "steps", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PodcastRoutineStepProto }
        ]);
    }
    create(value?: PartialMessage<PodcastRoutineSegmentProto>): PodcastRoutineSegmentProto {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.segmentId = "";
        message.title = "";
        message.steps = [];
        if (value !== undefined)
            reflectionMergePartial<PodcastRoutineSegmentProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PodcastRoutineSegmentProto): PodcastRoutineSegmentProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string segment_id */ 1:
                    message.segmentId = reader.string();
                    break;
                case /* string title */ 2:
                    message.title = reader.string();
                    break;
                case /* repeated PodcastRoutineStepProto steps */ 3:
                    message.steps.push(PodcastRoutineStepProto.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PodcastRoutineSegmentProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string segment_id = 1; */
        if (message.segmentId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.segmentId);
        /* string title = 2; */
        if (message.title !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.title);
        /* repeated PodcastRoutineStepProto steps = 3; */
        for (let i = 0; i < message.steps.length; i++)
            PodcastRoutineStepProto.internalBinaryWrite(message.steps[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PodcastRoutineSegmentProto
 */
export const PodcastRoutineSegmentProto = new PodcastRoutineSegmentProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PodcastRoutineStepProto$Type extends MessageType<PodcastRoutineStepProto> {
    constructor() {
        super("PodcastRoutineStepProto", [
            { no: 5, name: "thumbnail", kind: "message", T: () => PodcastThumbnailProto }
        ]);
    }
    create(value?: PartialMessage<PodcastRoutineStepProto>): PodcastRoutineStepProto {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<PodcastRoutineStepProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PodcastRoutineStepProto): PodcastRoutineStepProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* PodcastThumbnailProto thumbnail */ 5:
                    message.thumbnail = PodcastThumbnailProto.internalBinaryRead(reader, reader.uint32(), options, message.thumbnail);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PodcastRoutineStepProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* PodcastThumbnailProto thumbnail = 5; */
        if (message.thumbnail)
            PodcastThumbnailProto.internalBinaryWrite(message.thumbnail, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PodcastRoutineStepProto
 */
export const PodcastRoutineStepProto = new PodcastRoutineStepProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PodcastAppStoreTransactionProto$Type extends MessageType<PodcastAppStoreTransactionProto> {
    constructor() {
        super("PodcastAppStoreTransactionProto", [
            { no: 1, name: "transaction_jws", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "renewal_info_jws", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PodcastAppStoreTransactionProto>): PodcastAppStoreTransactionProto {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.transactionJws = "";
        message.renewalInfoJws = "";
        if (value !== undefined)
            reflectionMergePartial<PodcastAppStoreTransactionProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PodcastAppStoreTransactionProto): PodcastAppStoreTransactionProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string transaction_jws */ 1:
                    message.transactionJws = reader.string();
                    break;
                case /* string renewal_info_jws */ 2:
                    message.renewalInfoJws = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PodcastAppStoreTransactionProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string transaction_jws = 1; */
        if (message.transactionJws !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.transactionJws);
        /* string renewal_info_jws = 2; */
        if (message.renewalInfoJws !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.renewalInfoJws);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PodcastAppStoreTransactionProto
 */
export const PodcastAppStoreTransactionProto = new PodcastAppStoreTransactionProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PodcastUserProgressProto$Type extends MessageType<PodcastUserProgressProto> {
    constructor() {
        super("PodcastUserProgressProto", [
            { no: 1, name: "routine_progress", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => PodcastRoutineProgressProto } }
        ]);
    }
    create(value?: PartialMessage<PodcastUserProgressProto>): PodcastUserProgressProto {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.routineProgress = {};
        if (value !== undefined)
            reflectionMergePartial<PodcastUserProgressProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PodcastUserProgressProto): PodcastUserProgressProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<string, PodcastRoutineProgressProto> routine_progress */ 1:
                    this.binaryReadMap1(message.routineProgress, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap1(map: PodcastUserProgressProto["routineProgress"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof PodcastUserProgressProto["routineProgress"] | undefined, val: PodcastUserProgressProto["routineProgress"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = PodcastRoutineProgressProto.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field PodcastUserProgressProto.routine_progress");
            }
        }
        map[key ?? ""] = val ?? PodcastRoutineProgressProto.create();
    }
    internalBinaryWrite(message: PodcastUserProgressProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<string, PodcastRoutineProgressProto> routine_progress = 1; */
        for (let k of globalThis.Object.keys(message.routineProgress)) {
            writer.tag(1, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            PodcastRoutineProgressProto.internalBinaryWrite(message.routineProgress[k], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PodcastUserProgressProto
 */
export const PodcastUserProgressProto = new PodcastUserProgressProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PodcastRoutineProgressProto$Type extends MessageType<PodcastRoutineProgressProto> {
    constructor() {
        super("PodcastRoutineProgressProto", [
            { no: 1, name: "step_progress", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => PodcastRoutineStepProgressProto } }
        ]);
    }
    create(value?: PartialMessage<PodcastRoutineProgressProto>): PodcastRoutineProgressProto {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.stepProgress = {};
        if (value !== undefined)
            reflectionMergePartial<PodcastRoutineProgressProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PodcastRoutineProgressProto): PodcastRoutineProgressProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<string, PodcastRoutineStepProgressProto> step_progress */ 1:
                    this.binaryReadMap1(message.stepProgress, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap1(map: PodcastRoutineProgressProto["stepProgress"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof PodcastRoutineProgressProto["stepProgress"] | undefined, val: PodcastRoutineProgressProto["stepProgress"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = PodcastRoutineStepProgressProto.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field PodcastRoutineProgressProto.step_progress");
            }
        }
        map[key ?? ""] = val ?? PodcastRoutineStepProgressProto.create();
    }
    internalBinaryWrite(message: PodcastRoutineProgressProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<string, PodcastRoutineStepProgressProto> step_progress = 1; */
        for (let k of globalThis.Object.keys(message.stepProgress)) {
            writer.tag(1, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            PodcastRoutineStepProgressProto.internalBinaryWrite(message.stepProgress[k], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PodcastRoutineProgressProto
 */
export const PodcastRoutineProgressProto = new PodcastRoutineProgressProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PodcastRoutineStepProgressProto$Type extends MessageType<PodcastRoutineStepProgressProto> {
    constructor() {
        super("PodcastRoutineStepProgressProto", [
            { no: 1, name: "completed_at", kind: "message", T: () => Timestamp },
            { no: 2, name: "completed", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<PodcastRoutineStepProgressProto>): PodcastRoutineStepProgressProto {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.completed = false;
        if (value !== undefined)
            reflectionMergePartial<PodcastRoutineStepProgressProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PodcastRoutineStepProgressProto): PodcastRoutineStepProgressProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Timestamp completed_at */ 1:
                    message.completedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.completedAt);
                    break;
                case /* bool completed */ 2:
                    message.completed = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PodcastRoutineStepProgressProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.Timestamp completed_at = 1; */
        if (message.completedAt)
            Timestamp.internalBinaryWrite(message.completedAt, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bool completed = 2; */
        if (message.completed !== false)
            writer.tag(2, WireType.Varint).bool(message.completed);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PodcastRoutineStepProgressProto
 */
export const PodcastRoutineStepProgressProto = new PodcastRoutineStepProgressProto$Type();
