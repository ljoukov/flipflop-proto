/* eslint-disable */
// @generated by protobuf-ts 2.8.1 with parameter eslint_disable,long_type_string,ts_nocheck
// @generated from protobuf file "ChatProto.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "./google/protobuf/timestamp";
import { Duration } from "./google/protobuf/duration";
/**
 * @generated from protobuf message ChatApiRequestProto
 */
export interface ChatApiRequestProto {
    /**
     * @generated from protobuf field: string encoded_user_auth = 1;
     */
    encodedUserAuth: string;
    /**
     * @generated from protobuf oneof: request
     */
    request: {
        oneofKind: "getChatBots";
        /**
         * @generated from protobuf field: GetChatBotsRequestProto get_chat_bots = 2;
         */
        getChatBots: GetChatBotsRequestProto;
    } | {
        oneofKind: "listChats";
        /**
         * @generated from protobuf field: ListChatsRequestProto list_chats = 3;
         */
        listChats: ListChatsRequestProto;
    } | {
        oneofKind: "getChatMessages";
        /**
         * @generated from protobuf field: GetChatMessagesRequestProto get_chat_messages = 4;
         */
        getChatMessages: GetChatMessagesRequestProto;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message ChatApiResponseProto
 */
export interface ChatApiResponseProto {
    /**
     * If present the token was refreshed and the client should use this new one from now onwards.
     *
     * @generated from protobuf field: string refreshed_encoded_user_auth = 1;
     */
    refreshedEncodedUserAuth: string;
    /**
     * @generated from protobuf oneof: response
     */
    response: {
        oneofKind: "getChatBots";
        /**
         * @generated from protobuf field: GetChatBotsResponseProto get_chat_bots = 2;
         */
        getChatBots: GetChatBotsResponseProto;
    } | {
        oneofKind: "listChats";
        /**
         * @generated from protobuf field: ListChatsResponseProto list_chats = 3;
         */
        listChats: ListChatsResponseProto;
    } | {
        oneofKind: "getChatMessages";
        /**
         * @generated from protobuf field: GetChatMessagesResponseProto get_chat_messages = 4;
         */
        getChatMessages: GetChatMessagesResponseProto;
    } | {
        oneofKind: undefined;
    };
    /**
     * @generated from protobuf field: map<string, google.protobuf.Duration> latencies = 100;
     */
    latencies: {
        [key: string]: Duration;
    };
}
/**
 * @generated from protobuf message ChatStreamApiRequestProto
 */
export interface ChatStreamApiRequestProto {
    /**
     * @generated from protobuf field: string encoded_user_auth = 1;
     */
    encodedUserAuth: string;
    /**
     * @generated from protobuf oneof: request
     */
    request: {
        oneofKind: "postChatMessage";
        /**
         * @generated from protobuf field: PostChatMessageRequestProto post_chat_message = 2;
         */
        postChatMessage: PostChatMessageRequestProto;
    } | {
        oneofKind: "openChat";
        /**
         * @generated from protobuf field: OpenChatRequestProto open_chat = 3;
         */
        openChat: OpenChatRequestProto;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message ChatStreamApiResponseHeaderProto
 */
export interface ChatStreamApiResponseHeaderProto {
    /**
     * If present the token was refreshed and the client should use this new one from now onwards.
     *
     * @generated from protobuf field: string refreshed_encoded_user_auth = 1;
     */
    refreshedEncodedUserAuth: string;
    /**
     * @generated from protobuf oneof: header
     */
    header: {
        oneofKind: "postChatMessageHeader";
        /**
         * @generated from protobuf field: PostChatMessageResponseHeaderProto post_chat_message_header = 2;
         */
        postChatMessageHeader: PostChatMessageResponseHeaderProto;
    } | {
        oneofKind: "openChatHeader";
        /**
         * @generated from protobuf field: OpenChatResponseHeaderProto open_chat_header = 3;
         */
        openChatHeader: OpenChatResponseHeaderProto;
    } | {
        oneofKind: undefined;
    };
    /**
     * @generated from protobuf field: map<string, google.protobuf.Duration> latencies = 100;
     */
    latencies: {
        [key: string]: Duration;
    };
}
/**
 * @generated from protobuf message ChatStreamApiResponseDeltaProto
 */
export interface ChatStreamApiResponseDeltaProto {
    /**
     * @generated from protobuf oneof: response_delta
     */
    responseDelta: {
        oneofKind: "assistant";
        /**
         * @generated from protobuf field: ChatAssistantMessageDeltaProto assistant = 1;
         */
        assistant: ChatAssistantMessageDeltaProto;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message GetChatBotsRequestProto
 */
export interface GetChatBotsRequestProto {
    /**
     * @generated from protobuf field: ChatBotProto.Type type = 1;
     */
    type: ChatBotProto_Type;
}
/**
 * @generated from protobuf message GetChatBotsResponseProto
 */
export interface GetChatBotsResponseProto {
    /**
     * @generated from protobuf field: repeated ChatBotProto bots = 1;
     */
    bots: ChatBotProto[];
}
/**
 * @generated from protobuf message ListChatsRequestProto
 */
export interface ListChatsRequestProto {
}
/**
 * @generated from protobuf message ChatSnippetProto
 */
export interface ChatSnippetProto {
    /**
     * @generated from protobuf field: string chat_id = 1;
     */
    chatId: string;
    /**
     * @generated from protobuf field: string text = 2;
     */
    text: string;
}
/**
 * @generated from protobuf message ListChatsResponseProto
 */
export interface ListChatsResponseProto {
    /**
     * @generated from protobuf field: repeated ChatSnippetProto snippets = 1;
     */
    snippets: ChatSnippetProto[];
}
/**
 * @generated from protobuf message GetChatMessagesRequestProto
 */
export interface GetChatMessagesRequestProto {
    /**
     * @generated from protobuf field: string chat_id = 1;
     */
    chatId: string;
}
/**
 * @generated from protobuf message GetChatMessagesResponseProto
 */
export interface GetChatMessagesResponseProto {
    /**
     * @generated from protobuf field: repeated ChatMessageProto messages = 1;
     */
    messages: ChatMessageProto[];
}
/**
 * @generated from protobuf message PostChatMessageRequestProto
 */
export interface PostChatMessageRequestProto {
    /**
     * @generated from protobuf field: string chat_id = 1;
     */
    chatId: string;
}
/**
 * @generated from protobuf message PostChatMessageResponseHeaderProto
 */
export interface PostChatMessageResponseHeaderProto {
    /**
     * @generated from protobuf field: string streamed_message_id = 1;
     */
    streamedMessageId: string;
}
/**
 * @generated from protobuf message OpenChatRequestProto
 */
export interface OpenChatRequestProto {
    /**
     * @generated from protobuf field: string bot_id = 1;
     */
    botId: string;
    /**
     * @generated from protobuf field: bool restart = 2;
     */
    restart: boolean;
}
/**
 * @generated from protobuf message OpenChatResponseHeaderProto
 */
export interface OpenChatResponseHeaderProto {
    /**
     * @generated from protobuf field: string chat_id = 1;
     */
    chatId: string;
    /**
     * @generated from protobuf field: repeated ChatMessageProto messages = 2;
     */
    messages: ChatMessageProto[];
    /**
     * @generated from protobuf field: string streamed_message_id = 3;
     */
    streamedMessageId: string;
}
/**
 * @generated from protobuf message ChatAssistantMessageDeltaProto
 */
export interface ChatAssistantMessageDeltaProto {
    /**
     * @generated from protobuf oneof: delta
     */
    delta: {
        oneofKind: "textDelta";
        /**
         * Append current text block.
         *
         * @generated from protobuf field: string text_delta = 1;
         */
        textDelta: string;
    } | {
        oneofKind: "activityId";
        /**
         * Append activity ID to the current block.
         * Start a new block on next text_delta.
         *
         * @generated from protobuf field: string activity_id = 2;
         */
        activityId: string;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message ChatBotProto
 */
export interface ChatBotProto {
    /**
     * @generated from protobuf field: string bot_id = 1;
     */
    botId: string;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp created_at = 5;
     */
    createdAt?: Timestamp;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp last_modified_at = 6;
     */
    lastModifiedAt?: Timestamp;
    /**
     * @generated from protobuf field: ChatBotProto.Type type = 7;
     */
    type: ChatBotProto_Type;
    /**
     * @generated from protobuf field: string display_name = 2;
     */
    displayName: string;
    /**
     * @generated from protobuf field: string description_prompt = 3;
     */
    descriptionPrompt: string;
    /**
     * @generated from protobuf field: ChatActivitiesProto activities = 4;
     */
    activities?: ChatActivitiesProto;
}
/**
 * @generated from protobuf enum ChatBotProto.Type
 */
export enum ChatBotProto_Type {
    /**
     * @generated from protobuf enum value: UNDEFINED = 0;
     */
    UNDEFINED = 0,
    /**
     * @generated from protobuf enum value: STORY_BOT = 1;
     */
    STORY_BOT = 1,
    /**
     * @generated from protobuf enum value: GLOBAL_BOT = 2;
     */
    GLOBAL_BOT = 2
}
/**
 * @generated from protobuf message ChatActivitiesProto
 */
export interface ChatActivitiesProto {
    /**
     * @generated from protobuf field: string description_prompt = 1;
     */
    descriptionPrompt: string;
    /**
     * @generated from protobuf field: repeated ChatActivityProto activities = 2;
     */
    activities: ChatActivityProto[];
}
/**
 * @generated from protobuf message ChatActivityProto
 */
export interface ChatActivityProto {
    /**
     * Machine identifier, LLM-readable, e.g. "compare-and-contrast", "writing-challenge"
     *
     * @generated from protobuf field: string activity_id = 1;
     */
    activityId: string;
    /**
     * How it should be diplayed to the user
     *
     * @generated from protobuf field: string display_name = 2;
     */
    displayName: string;
    /**
     * @generated from protobuf field: string description_prompt = 3;
     */
    descriptionPrompt: string;
    /**
     * @generated from protobuf field: string action_prompt = 4;
     */
    actionPrompt: string;
}
/**
 * @generated from protobuf message ChatAssistantMessageBlockProto
 */
export interface ChatAssistantMessageBlockProto {
    /**
     * @generated from protobuf field: string text = 2;
     */
    text: string;
    /**
     * @generated from protobuf field: repeated string activity_ids = 3;
     */
    activityIds: string[];
}
/**
 * @generated from protobuf message ChatAssistantMessageProto
 */
export interface ChatAssistantMessageProto {
    /**
     * @generated from protobuf field: repeated ChatAssistantMessageBlockProto blocks = 1;
     */
    blocks: ChatAssistantMessageBlockProto[];
}
/**
 * @generated from protobuf message ChatUserMessageProto
 */
export interface ChatUserMessageProto {
    /**
     * Explicitly entered by the user
     *
     * @generated from protobuf field: string text = 1;
     */
    text: string;
    /**
     * User selected one of the activities
     *
     * @generated from protobuf field: string activity_id = 2;
     */
    activityId: string;
}
/**
 * @generated from protobuf message ChatMessageProto
 */
export interface ChatMessageProto {
    /**
     * @generated from protobuf field: string message_id = 1;
     */
    messageId: string;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp created_at = 2;
     */
    createdAt?: Timestamp;
    /**
     * @generated from protobuf oneof: type
     */
    type: {
        oneofKind: "assistant";
        /**
         * @generated from protobuf field: ChatAssistantMessageProto assistant = 3;
         */
        assistant: ChatAssistantMessageProto;
    } | {
        oneofKind: "user";
        /**
         * @generated from protobuf field: ChatUserMessageProto user = 4;
         */
        user: ChatUserMessageProto;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message ChatSessionProto
 */
export interface ChatSessionProto {
    /**
     * @generated from protobuf field: string chat_session_id = 1;
     */
    chatSessionId: string;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp created_at = 2;
     */
    createdAt?: Timestamp;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp last_modified_at = 3;
     */
    lastModifiedAt?: Timestamp;
    /**
     * @generated from protobuf field: string story_id = 4;
     */
    storyId: string;
    /**
     * @generated from protobuf field: string bot_id = 5;
     */
    botId: string;
    /**
     * @generated from protobuf field: repeated ChatMessageProto messages = 7;
     */
    messages: ChatMessageProto[];
}
// @generated message type with reflection information, may provide speed optimized methods
class ChatApiRequestProto$Type extends MessageType<ChatApiRequestProto> {
    constructor() {
        super("ChatApiRequestProto", [
            { no: 1, name: "encoded_user_auth", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "get_chat_bots", kind: "message", oneof: "request", T: () => GetChatBotsRequestProto },
            { no: 3, name: "list_chats", kind: "message", oneof: "request", T: () => ListChatsRequestProto },
            { no: 4, name: "get_chat_messages", kind: "message", oneof: "request", T: () => GetChatMessagesRequestProto }
        ]);
    }
    create(value?: PartialMessage<ChatApiRequestProto>): ChatApiRequestProto {
        const message = { encodedUserAuth: "", request: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChatApiRequestProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChatApiRequestProto): ChatApiRequestProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string encoded_user_auth */ 1:
                    message.encodedUserAuth = reader.string();
                    break;
                case /* GetChatBotsRequestProto get_chat_bots */ 2:
                    message.request = {
                        oneofKind: "getChatBots",
                        getChatBots: GetChatBotsRequestProto.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).getChatBots)
                    };
                    break;
                case /* ListChatsRequestProto list_chats */ 3:
                    message.request = {
                        oneofKind: "listChats",
                        listChats: ListChatsRequestProto.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).listChats)
                    };
                    break;
                case /* GetChatMessagesRequestProto get_chat_messages */ 4:
                    message.request = {
                        oneofKind: "getChatMessages",
                        getChatMessages: GetChatMessagesRequestProto.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).getChatMessages)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChatApiRequestProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string encoded_user_auth = 1; */
        if (message.encodedUserAuth !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.encodedUserAuth);
        /* GetChatBotsRequestProto get_chat_bots = 2; */
        if (message.request.oneofKind === "getChatBots")
            GetChatBotsRequestProto.internalBinaryWrite(message.request.getChatBots, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* ListChatsRequestProto list_chats = 3; */
        if (message.request.oneofKind === "listChats")
            ListChatsRequestProto.internalBinaryWrite(message.request.listChats, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* GetChatMessagesRequestProto get_chat_messages = 4; */
        if (message.request.oneofKind === "getChatMessages")
            GetChatMessagesRequestProto.internalBinaryWrite(message.request.getChatMessages, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ChatApiRequestProto
 */
export const ChatApiRequestProto = new ChatApiRequestProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChatApiResponseProto$Type extends MessageType<ChatApiResponseProto> {
    constructor() {
        super("ChatApiResponseProto", [
            { no: 1, name: "refreshed_encoded_user_auth", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "get_chat_bots", kind: "message", oneof: "response", T: () => GetChatBotsResponseProto },
            { no: 3, name: "list_chats", kind: "message", oneof: "response", T: () => ListChatsResponseProto },
            { no: 4, name: "get_chat_messages", kind: "message", oneof: "response", T: () => GetChatMessagesResponseProto },
            { no: 100, name: "latencies", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => Duration } }
        ]);
    }
    create(value?: PartialMessage<ChatApiResponseProto>): ChatApiResponseProto {
        const message = { refreshedEncodedUserAuth: "", response: { oneofKind: undefined }, latencies: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChatApiResponseProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChatApiResponseProto): ChatApiResponseProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string refreshed_encoded_user_auth */ 1:
                    message.refreshedEncodedUserAuth = reader.string();
                    break;
                case /* GetChatBotsResponseProto get_chat_bots */ 2:
                    message.response = {
                        oneofKind: "getChatBots",
                        getChatBots: GetChatBotsResponseProto.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).getChatBots)
                    };
                    break;
                case /* ListChatsResponseProto list_chats */ 3:
                    message.response = {
                        oneofKind: "listChats",
                        listChats: ListChatsResponseProto.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).listChats)
                    };
                    break;
                case /* GetChatMessagesResponseProto get_chat_messages */ 4:
                    message.response = {
                        oneofKind: "getChatMessages",
                        getChatMessages: GetChatMessagesResponseProto.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).getChatMessages)
                    };
                    break;
                case /* map<string, google.protobuf.Duration> latencies */ 100:
                    this.binaryReadMap100(message.latencies, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap100(map: ChatApiResponseProto["latencies"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof ChatApiResponseProto["latencies"] | undefined, val: ChatApiResponseProto["latencies"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = Duration.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field ChatApiResponseProto.latencies");
            }
        }
        map[key ?? ""] = val ?? Duration.create();
    }
    internalBinaryWrite(message: ChatApiResponseProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string refreshed_encoded_user_auth = 1; */
        if (message.refreshedEncodedUserAuth !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.refreshedEncodedUserAuth);
        /* GetChatBotsResponseProto get_chat_bots = 2; */
        if (message.response.oneofKind === "getChatBots")
            GetChatBotsResponseProto.internalBinaryWrite(message.response.getChatBots, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* ListChatsResponseProto list_chats = 3; */
        if (message.response.oneofKind === "listChats")
            ListChatsResponseProto.internalBinaryWrite(message.response.listChats, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* GetChatMessagesResponseProto get_chat_messages = 4; */
        if (message.response.oneofKind === "getChatMessages")
            GetChatMessagesResponseProto.internalBinaryWrite(message.response.getChatMessages, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* map<string, google.protobuf.Duration> latencies = 100; */
        for (let k of Object.keys(message.latencies)) {
            writer.tag(100, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            Duration.internalBinaryWrite(message.latencies[k], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ChatApiResponseProto
 */
export const ChatApiResponseProto = new ChatApiResponseProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChatStreamApiRequestProto$Type extends MessageType<ChatStreamApiRequestProto> {
    constructor() {
        super("ChatStreamApiRequestProto", [
            { no: 1, name: "encoded_user_auth", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "post_chat_message", kind: "message", oneof: "request", T: () => PostChatMessageRequestProto },
            { no: 3, name: "open_chat", kind: "message", oneof: "request", T: () => OpenChatRequestProto }
        ]);
    }
    create(value?: PartialMessage<ChatStreamApiRequestProto>): ChatStreamApiRequestProto {
        const message = { encodedUserAuth: "", request: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChatStreamApiRequestProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChatStreamApiRequestProto): ChatStreamApiRequestProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string encoded_user_auth */ 1:
                    message.encodedUserAuth = reader.string();
                    break;
                case /* PostChatMessageRequestProto post_chat_message */ 2:
                    message.request = {
                        oneofKind: "postChatMessage",
                        postChatMessage: PostChatMessageRequestProto.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).postChatMessage)
                    };
                    break;
                case /* OpenChatRequestProto open_chat */ 3:
                    message.request = {
                        oneofKind: "openChat",
                        openChat: OpenChatRequestProto.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).openChat)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChatStreamApiRequestProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string encoded_user_auth = 1; */
        if (message.encodedUserAuth !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.encodedUserAuth);
        /* PostChatMessageRequestProto post_chat_message = 2; */
        if (message.request.oneofKind === "postChatMessage")
            PostChatMessageRequestProto.internalBinaryWrite(message.request.postChatMessage, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* OpenChatRequestProto open_chat = 3; */
        if (message.request.oneofKind === "openChat")
            OpenChatRequestProto.internalBinaryWrite(message.request.openChat, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ChatStreamApiRequestProto
 */
export const ChatStreamApiRequestProto = new ChatStreamApiRequestProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChatStreamApiResponseHeaderProto$Type extends MessageType<ChatStreamApiResponseHeaderProto> {
    constructor() {
        super("ChatStreamApiResponseHeaderProto", [
            { no: 1, name: "refreshed_encoded_user_auth", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "post_chat_message_header", kind: "message", oneof: "header", T: () => PostChatMessageResponseHeaderProto },
            { no: 3, name: "open_chat_header", kind: "message", oneof: "header", T: () => OpenChatResponseHeaderProto },
            { no: 100, name: "latencies", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => Duration } }
        ]);
    }
    create(value?: PartialMessage<ChatStreamApiResponseHeaderProto>): ChatStreamApiResponseHeaderProto {
        const message = { refreshedEncodedUserAuth: "", header: { oneofKind: undefined }, latencies: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChatStreamApiResponseHeaderProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChatStreamApiResponseHeaderProto): ChatStreamApiResponseHeaderProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string refreshed_encoded_user_auth */ 1:
                    message.refreshedEncodedUserAuth = reader.string();
                    break;
                case /* PostChatMessageResponseHeaderProto post_chat_message_header */ 2:
                    message.header = {
                        oneofKind: "postChatMessageHeader",
                        postChatMessageHeader: PostChatMessageResponseHeaderProto.internalBinaryRead(reader, reader.uint32(), options, (message.header as any).postChatMessageHeader)
                    };
                    break;
                case /* OpenChatResponseHeaderProto open_chat_header */ 3:
                    message.header = {
                        oneofKind: "openChatHeader",
                        openChatHeader: OpenChatResponseHeaderProto.internalBinaryRead(reader, reader.uint32(), options, (message.header as any).openChatHeader)
                    };
                    break;
                case /* map<string, google.protobuf.Duration> latencies */ 100:
                    this.binaryReadMap100(message.latencies, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap100(map: ChatStreamApiResponseHeaderProto["latencies"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof ChatStreamApiResponseHeaderProto["latencies"] | undefined, val: ChatStreamApiResponseHeaderProto["latencies"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = Duration.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field ChatStreamApiResponseHeaderProto.latencies");
            }
        }
        map[key ?? ""] = val ?? Duration.create();
    }
    internalBinaryWrite(message: ChatStreamApiResponseHeaderProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string refreshed_encoded_user_auth = 1; */
        if (message.refreshedEncodedUserAuth !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.refreshedEncodedUserAuth);
        /* PostChatMessageResponseHeaderProto post_chat_message_header = 2; */
        if (message.header.oneofKind === "postChatMessageHeader")
            PostChatMessageResponseHeaderProto.internalBinaryWrite(message.header.postChatMessageHeader, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* OpenChatResponseHeaderProto open_chat_header = 3; */
        if (message.header.oneofKind === "openChatHeader")
            OpenChatResponseHeaderProto.internalBinaryWrite(message.header.openChatHeader, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* map<string, google.protobuf.Duration> latencies = 100; */
        for (let k of Object.keys(message.latencies)) {
            writer.tag(100, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            Duration.internalBinaryWrite(message.latencies[k], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ChatStreamApiResponseHeaderProto
 */
export const ChatStreamApiResponseHeaderProto = new ChatStreamApiResponseHeaderProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChatStreamApiResponseDeltaProto$Type extends MessageType<ChatStreamApiResponseDeltaProto> {
    constructor() {
        super("ChatStreamApiResponseDeltaProto", [
            { no: 1, name: "assistant", kind: "message", oneof: "responseDelta", T: () => ChatAssistantMessageDeltaProto }
        ]);
    }
    create(value?: PartialMessage<ChatStreamApiResponseDeltaProto>): ChatStreamApiResponseDeltaProto {
        const message = { responseDelta: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChatStreamApiResponseDeltaProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChatStreamApiResponseDeltaProto): ChatStreamApiResponseDeltaProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ChatAssistantMessageDeltaProto assistant */ 1:
                    message.responseDelta = {
                        oneofKind: "assistant",
                        assistant: ChatAssistantMessageDeltaProto.internalBinaryRead(reader, reader.uint32(), options, (message.responseDelta as any).assistant)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChatStreamApiResponseDeltaProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* ChatAssistantMessageDeltaProto assistant = 1; */
        if (message.responseDelta.oneofKind === "assistant")
            ChatAssistantMessageDeltaProto.internalBinaryWrite(message.responseDelta.assistant, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ChatStreamApiResponseDeltaProto
 */
export const ChatStreamApiResponseDeltaProto = new ChatStreamApiResponseDeltaProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetChatBotsRequestProto$Type extends MessageType<GetChatBotsRequestProto> {
    constructor() {
        super("GetChatBotsRequestProto", [
            { no: 1, name: "type", kind: "enum", T: () => ["ChatBotProto.Type", ChatBotProto_Type] }
        ]);
    }
    create(value?: PartialMessage<GetChatBotsRequestProto>): GetChatBotsRequestProto {
        const message = { type: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetChatBotsRequestProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetChatBotsRequestProto): GetChatBotsRequestProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ChatBotProto.Type type */ 1:
                    message.type = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetChatBotsRequestProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* ChatBotProto.Type type = 1; */
        if (message.type !== 0)
            writer.tag(1, WireType.Varint).int32(message.type);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetChatBotsRequestProto
 */
export const GetChatBotsRequestProto = new GetChatBotsRequestProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetChatBotsResponseProto$Type extends MessageType<GetChatBotsResponseProto> {
    constructor() {
        super("GetChatBotsResponseProto", [
            { no: 1, name: "bots", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ChatBotProto }
        ]);
    }
    create(value?: PartialMessage<GetChatBotsResponseProto>): GetChatBotsResponseProto {
        const message = { bots: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetChatBotsResponseProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetChatBotsResponseProto): GetChatBotsResponseProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated ChatBotProto bots */ 1:
                    message.bots.push(ChatBotProto.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetChatBotsResponseProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated ChatBotProto bots = 1; */
        for (let i = 0; i < message.bots.length; i++)
            ChatBotProto.internalBinaryWrite(message.bots[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetChatBotsResponseProto
 */
export const GetChatBotsResponseProto = new GetChatBotsResponseProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListChatsRequestProto$Type extends MessageType<ListChatsRequestProto> {
    constructor() {
        super("ListChatsRequestProto", []);
    }
    create(value?: PartialMessage<ListChatsRequestProto>): ListChatsRequestProto {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListChatsRequestProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListChatsRequestProto): ListChatsRequestProto {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ListChatsRequestProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ListChatsRequestProto
 */
export const ListChatsRequestProto = new ListChatsRequestProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChatSnippetProto$Type extends MessageType<ChatSnippetProto> {
    constructor() {
        super("ChatSnippetProto", [
            { no: 1, name: "chat_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ChatSnippetProto>): ChatSnippetProto {
        const message = { chatId: "", text: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChatSnippetProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChatSnippetProto): ChatSnippetProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string chat_id */ 1:
                    message.chatId = reader.string();
                    break;
                case /* string text */ 2:
                    message.text = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChatSnippetProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string chat_id = 1; */
        if (message.chatId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.chatId);
        /* string text = 2; */
        if (message.text !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.text);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ChatSnippetProto
 */
export const ChatSnippetProto = new ChatSnippetProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListChatsResponseProto$Type extends MessageType<ListChatsResponseProto> {
    constructor() {
        super("ListChatsResponseProto", [
            { no: 1, name: "snippets", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ChatSnippetProto }
        ]);
    }
    create(value?: PartialMessage<ListChatsResponseProto>): ListChatsResponseProto {
        const message = { snippets: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListChatsResponseProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListChatsResponseProto): ListChatsResponseProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated ChatSnippetProto snippets */ 1:
                    message.snippets.push(ChatSnippetProto.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListChatsResponseProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated ChatSnippetProto snippets = 1; */
        for (let i = 0; i < message.snippets.length; i++)
            ChatSnippetProto.internalBinaryWrite(message.snippets[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ListChatsResponseProto
 */
export const ListChatsResponseProto = new ListChatsResponseProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetChatMessagesRequestProto$Type extends MessageType<GetChatMessagesRequestProto> {
    constructor() {
        super("GetChatMessagesRequestProto", [
            { no: 1, name: "chat_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetChatMessagesRequestProto>): GetChatMessagesRequestProto {
        const message = { chatId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetChatMessagesRequestProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetChatMessagesRequestProto): GetChatMessagesRequestProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string chat_id */ 1:
                    message.chatId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetChatMessagesRequestProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string chat_id = 1; */
        if (message.chatId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.chatId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetChatMessagesRequestProto
 */
export const GetChatMessagesRequestProto = new GetChatMessagesRequestProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetChatMessagesResponseProto$Type extends MessageType<GetChatMessagesResponseProto> {
    constructor() {
        super("GetChatMessagesResponseProto", [
            { no: 1, name: "messages", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ChatMessageProto }
        ]);
    }
    create(value?: PartialMessage<GetChatMessagesResponseProto>): GetChatMessagesResponseProto {
        const message = { messages: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetChatMessagesResponseProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetChatMessagesResponseProto): GetChatMessagesResponseProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated ChatMessageProto messages */ 1:
                    message.messages.push(ChatMessageProto.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetChatMessagesResponseProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated ChatMessageProto messages = 1; */
        for (let i = 0; i < message.messages.length; i++)
            ChatMessageProto.internalBinaryWrite(message.messages[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetChatMessagesResponseProto
 */
export const GetChatMessagesResponseProto = new GetChatMessagesResponseProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PostChatMessageRequestProto$Type extends MessageType<PostChatMessageRequestProto> {
    constructor() {
        super("PostChatMessageRequestProto", [
            { no: 1, name: "chat_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PostChatMessageRequestProto>): PostChatMessageRequestProto {
        const message = { chatId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PostChatMessageRequestProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PostChatMessageRequestProto): PostChatMessageRequestProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string chat_id */ 1:
                    message.chatId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PostChatMessageRequestProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string chat_id = 1; */
        if (message.chatId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.chatId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PostChatMessageRequestProto
 */
export const PostChatMessageRequestProto = new PostChatMessageRequestProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PostChatMessageResponseHeaderProto$Type extends MessageType<PostChatMessageResponseHeaderProto> {
    constructor() {
        super("PostChatMessageResponseHeaderProto", [
            { no: 1, name: "streamed_message_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PostChatMessageResponseHeaderProto>): PostChatMessageResponseHeaderProto {
        const message = { streamedMessageId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PostChatMessageResponseHeaderProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PostChatMessageResponseHeaderProto): PostChatMessageResponseHeaderProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string streamed_message_id */ 1:
                    message.streamedMessageId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PostChatMessageResponseHeaderProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string streamed_message_id = 1; */
        if (message.streamedMessageId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.streamedMessageId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PostChatMessageResponseHeaderProto
 */
export const PostChatMessageResponseHeaderProto = new PostChatMessageResponseHeaderProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OpenChatRequestProto$Type extends MessageType<OpenChatRequestProto> {
    constructor() {
        super("OpenChatRequestProto", [
            { no: 1, name: "bot_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "restart", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<OpenChatRequestProto>): OpenChatRequestProto {
        const message = { botId: "", restart: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<OpenChatRequestProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OpenChatRequestProto): OpenChatRequestProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string bot_id */ 1:
                    message.botId = reader.string();
                    break;
                case /* bool restart */ 2:
                    message.restart = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OpenChatRequestProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string bot_id = 1; */
        if (message.botId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.botId);
        /* bool restart = 2; */
        if (message.restart !== false)
            writer.tag(2, WireType.Varint).bool(message.restart);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message OpenChatRequestProto
 */
export const OpenChatRequestProto = new OpenChatRequestProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OpenChatResponseHeaderProto$Type extends MessageType<OpenChatResponseHeaderProto> {
    constructor() {
        super("OpenChatResponseHeaderProto", [
            { no: 1, name: "chat_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "messages", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ChatMessageProto },
            { no: 3, name: "streamed_message_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<OpenChatResponseHeaderProto>): OpenChatResponseHeaderProto {
        const message = { chatId: "", messages: [], streamedMessageId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<OpenChatResponseHeaderProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OpenChatResponseHeaderProto): OpenChatResponseHeaderProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string chat_id */ 1:
                    message.chatId = reader.string();
                    break;
                case /* repeated ChatMessageProto messages */ 2:
                    message.messages.push(ChatMessageProto.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string streamed_message_id */ 3:
                    message.streamedMessageId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OpenChatResponseHeaderProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string chat_id = 1; */
        if (message.chatId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.chatId);
        /* repeated ChatMessageProto messages = 2; */
        for (let i = 0; i < message.messages.length; i++)
            ChatMessageProto.internalBinaryWrite(message.messages[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string streamed_message_id = 3; */
        if (message.streamedMessageId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.streamedMessageId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message OpenChatResponseHeaderProto
 */
export const OpenChatResponseHeaderProto = new OpenChatResponseHeaderProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChatAssistantMessageDeltaProto$Type extends MessageType<ChatAssistantMessageDeltaProto> {
    constructor() {
        super("ChatAssistantMessageDeltaProto", [
            { no: 1, name: "text_delta", kind: "scalar", oneof: "delta", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "activity_id", kind: "scalar", oneof: "delta", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ChatAssistantMessageDeltaProto>): ChatAssistantMessageDeltaProto {
        const message = { delta: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChatAssistantMessageDeltaProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChatAssistantMessageDeltaProto): ChatAssistantMessageDeltaProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string text_delta */ 1:
                    message.delta = {
                        oneofKind: "textDelta",
                        textDelta: reader.string()
                    };
                    break;
                case /* string activity_id */ 2:
                    message.delta = {
                        oneofKind: "activityId",
                        activityId: reader.string()
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChatAssistantMessageDeltaProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string text_delta = 1; */
        if (message.delta.oneofKind === "textDelta")
            writer.tag(1, WireType.LengthDelimited).string(message.delta.textDelta);
        /* string activity_id = 2; */
        if (message.delta.oneofKind === "activityId")
            writer.tag(2, WireType.LengthDelimited).string(message.delta.activityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ChatAssistantMessageDeltaProto
 */
export const ChatAssistantMessageDeltaProto = new ChatAssistantMessageDeltaProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChatBotProto$Type extends MessageType<ChatBotProto> {
    constructor() {
        super("ChatBotProto", [
            { no: 1, name: "bot_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "created_at", kind: "message", T: () => Timestamp },
            { no: 6, name: "last_modified_at", kind: "message", T: () => Timestamp },
            { no: 7, name: "type", kind: "enum", T: () => ["ChatBotProto.Type", ChatBotProto_Type] },
            { no: 2, name: "display_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "description_prompt", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "activities", kind: "message", T: () => ChatActivitiesProto }
        ]);
    }
    create(value?: PartialMessage<ChatBotProto>): ChatBotProto {
        const message = { botId: "", type: 0, displayName: "", descriptionPrompt: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChatBotProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChatBotProto): ChatBotProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string bot_id */ 1:
                    message.botId = reader.string();
                    break;
                case /* google.protobuf.Timestamp created_at */ 5:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* google.protobuf.Timestamp last_modified_at */ 6:
                    message.lastModifiedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.lastModifiedAt);
                    break;
                case /* ChatBotProto.Type type */ 7:
                    message.type = reader.int32();
                    break;
                case /* string display_name */ 2:
                    message.displayName = reader.string();
                    break;
                case /* string description_prompt */ 3:
                    message.descriptionPrompt = reader.string();
                    break;
                case /* ChatActivitiesProto activities */ 4:
                    message.activities = ChatActivitiesProto.internalBinaryRead(reader, reader.uint32(), options, message.activities);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChatBotProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string bot_id = 1; */
        if (message.botId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.botId);
        /* google.protobuf.Timestamp created_at = 5; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp last_modified_at = 6; */
        if (message.lastModifiedAt)
            Timestamp.internalBinaryWrite(message.lastModifiedAt, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* ChatBotProto.Type type = 7; */
        if (message.type !== 0)
            writer.tag(7, WireType.Varint).int32(message.type);
        /* string display_name = 2; */
        if (message.displayName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.displayName);
        /* string description_prompt = 3; */
        if (message.descriptionPrompt !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.descriptionPrompt);
        /* ChatActivitiesProto activities = 4; */
        if (message.activities)
            ChatActivitiesProto.internalBinaryWrite(message.activities, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ChatBotProto
 */
export const ChatBotProto = new ChatBotProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChatActivitiesProto$Type extends MessageType<ChatActivitiesProto> {
    constructor() {
        super("ChatActivitiesProto", [
            { no: 1, name: "description_prompt", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "activities", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ChatActivityProto }
        ]);
    }
    create(value?: PartialMessage<ChatActivitiesProto>): ChatActivitiesProto {
        const message = { descriptionPrompt: "", activities: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChatActivitiesProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChatActivitiesProto): ChatActivitiesProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string description_prompt */ 1:
                    message.descriptionPrompt = reader.string();
                    break;
                case /* repeated ChatActivityProto activities */ 2:
                    message.activities.push(ChatActivityProto.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChatActivitiesProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string description_prompt = 1; */
        if (message.descriptionPrompt !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.descriptionPrompt);
        /* repeated ChatActivityProto activities = 2; */
        for (let i = 0; i < message.activities.length; i++)
            ChatActivityProto.internalBinaryWrite(message.activities[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ChatActivitiesProto
 */
export const ChatActivitiesProto = new ChatActivitiesProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChatActivityProto$Type extends MessageType<ChatActivityProto> {
    constructor() {
        super("ChatActivityProto", [
            { no: 1, name: "activity_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "display_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "description_prompt", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "action_prompt", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ChatActivityProto>): ChatActivityProto {
        const message = { activityId: "", displayName: "", descriptionPrompt: "", actionPrompt: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChatActivityProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChatActivityProto): ChatActivityProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string activity_id */ 1:
                    message.activityId = reader.string();
                    break;
                case /* string display_name */ 2:
                    message.displayName = reader.string();
                    break;
                case /* string description_prompt */ 3:
                    message.descriptionPrompt = reader.string();
                    break;
                case /* string action_prompt */ 4:
                    message.actionPrompt = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChatActivityProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string activity_id = 1; */
        if (message.activityId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.activityId);
        /* string display_name = 2; */
        if (message.displayName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.displayName);
        /* string description_prompt = 3; */
        if (message.descriptionPrompt !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.descriptionPrompt);
        /* string action_prompt = 4; */
        if (message.actionPrompt !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.actionPrompt);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ChatActivityProto
 */
export const ChatActivityProto = new ChatActivityProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChatAssistantMessageBlockProto$Type extends MessageType<ChatAssistantMessageBlockProto> {
    constructor() {
        super("ChatAssistantMessageBlockProto", [
            { no: 2, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "activity_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ChatAssistantMessageBlockProto>): ChatAssistantMessageBlockProto {
        const message = { text: "", activityIds: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChatAssistantMessageBlockProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChatAssistantMessageBlockProto): ChatAssistantMessageBlockProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string text */ 2:
                    message.text = reader.string();
                    break;
                case /* repeated string activity_ids */ 3:
                    message.activityIds.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChatAssistantMessageBlockProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string text = 2; */
        if (message.text !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.text);
        /* repeated string activity_ids = 3; */
        for (let i = 0; i < message.activityIds.length; i++)
            writer.tag(3, WireType.LengthDelimited).string(message.activityIds[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ChatAssistantMessageBlockProto
 */
export const ChatAssistantMessageBlockProto = new ChatAssistantMessageBlockProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChatAssistantMessageProto$Type extends MessageType<ChatAssistantMessageProto> {
    constructor() {
        super("ChatAssistantMessageProto", [
            { no: 1, name: "blocks", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ChatAssistantMessageBlockProto }
        ]);
    }
    create(value?: PartialMessage<ChatAssistantMessageProto>): ChatAssistantMessageProto {
        const message = { blocks: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChatAssistantMessageProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChatAssistantMessageProto): ChatAssistantMessageProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated ChatAssistantMessageBlockProto blocks */ 1:
                    message.blocks.push(ChatAssistantMessageBlockProto.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChatAssistantMessageProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated ChatAssistantMessageBlockProto blocks = 1; */
        for (let i = 0; i < message.blocks.length; i++)
            ChatAssistantMessageBlockProto.internalBinaryWrite(message.blocks[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ChatAssistantMessageProto
 */
export const ChatAssistantMessageProto = new ChatAssistantMessageProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChatUserMessageProto$Type extends MessageType<ChatUserMessageProto> {
    constructor() {
        super("ChatUserMessageProto", [
            { no: 1, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "activity_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ChatUserMessageProto>): ChatUserMessageProto {
        const message = { text: "", activityId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChatUserMessageProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChatUserMessageProto): ChatUserMessageProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string text */ 1:
                    message.text = reader.string();
                    break;
                case /* string activity_id */ 2:
                    message.activityId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChatUserMessageProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string text = 1; */
        if (message.text !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.text);
        /* string activity_id = 2; */
        if (message.activityId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.activityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ChatUserMessageProto
 */
export const ChatUserMessageProto = new ChatUserMessageProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChatMessageProto$Type extends MessageType<ChatMessageProto> {
    constructor() {
        super("ChatMessageProto", [
            { no: 1, name: "message_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "created_at", kind: "message", T: () => Timestamp },
            { no: 3, name: "assistant", kind: "message", oneof: "type", T: () => ChatAssistantMessageProto },
            { no: 4, name: "user", kind: "message", oneof: "type", T: () => ChatUserMessageProto }
        ]);
    }
    create(value?: PartialMessage<ChatMessageProto>): ChatMessageProto {
        const message = { messageId: "", type: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChatMessageProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChatMessageProto): ChatMessageProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string message_id */ 1:
                    message.messageId = reader.string();
                    break;
                case /* google.protobuf.Timestamp created_at */ 2:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* ChatAssistantMessageProto assistant */ 3:
                    message.type = {
                        oneofKind: "assistant",
                        assistant: ChatAssistantMessageProto.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).assistant)
                    };
                    break;
                case /* ChatUserMessageProto user */ 4:
                    message.type = {
                        oneofKind: "user",
                        user: ChatUserMessageProto.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).user)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChatMessageProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string message_id = 1; */
        if (message.messageId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.messageId);
        /* google.protobuf.Timestamp created_at = 2; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* ChatAssistantMessageProto assistant = 3; */
        if (message.type.oneofKind === "assistant")
            ChatAssistantMessageProto.internalBinaryWrite(message.type.assistant, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* ChatUserMessageProto user = 4; */
        if (message.type.oneofKind === "user")
            ChatUserMessageProto.internalBinaryWrite(message.type.user, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ChatMessageProto
 */
export const ChatMessageProto = new ChatMessageProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChatSessionProto$Type extends MessageType<ChatSessionProto> {
    constructor() {
        super("ChatSessionProto", [
            { no: 1, name: "chat_session_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "created_at", kind: "message", T: () => Timestamp },
            { no: 3, name: "last_modified_at", kind: "message", T: () => Timestamp },
            { no: 4, name: "story_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "bot_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "messages", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ChatMessageProto }
        ]);
    }
    create(value?: PartialMessage<ChatSessionProto>): ChatSessionProto {
        const message = { chatSessionId: "", storyId: "", botId: "", messages: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChatSessionProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChatSessionProto): ChatSessionProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string chat_session_id */ 1:
                    message.chatSessionId = reader.string();
                    break;
                case /* google.protobuf.Timestamp created_at */ 2:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* google.protobuf.Timestamp last_modified_at */ 3:
                    message.lastModifiedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.lastModifiedAt);
                    break;
                case /* string story_id */ 4:
                    message.storyId = reader.string();
                    break;
                case /* string bot_id */ 5:
                    message.botId = reader.string();
                    break;
                case /* repeated ChatMessageProto messages */ 7:
                    message.messages.push(ChatMessageProto.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChatSessionProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string chat_session_id = 1; */
        if (message.chatSessionId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.chatSessionId);
        /* google.protobuf.Timestamp created_at = 2; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp last_modified_at = 3; */
        if (message.lastModifiedAt)
            Timestamp.internalBinaryWrite(message.lastModifiedAt, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* string story_id = 4; */
        if (message.storyId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.storyId);
        /* string bot_id = 5; */
        if (message.botId !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.botId);
        /* repeated ChatMessageProto messages = 7; */
        for (let i = 0; i < message.messages.length; i++)
            ChatMessageProto.internalBinaryWrite(message.messages[i], writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ChatSessionProto
 */
export const ChatSessionProto = new ChatSessionProto$Type();
