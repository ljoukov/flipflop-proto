/* eslint-disable */
// @generated by protobuf-ts 2.8.1 with parameter eslint_disable,long_type_string,ts_nocheck
// @generated from protobuf file "ChatProto.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "./google/protobuf/timestamp";
import { Duration } from "./google/protobuf/duration";
/**
 * @generated from protobuf message ChatApiRequestProto
 */
export interface ChatApiRequestProto {
    /**
     * @generated from protobuf oneof: request
     */
    request: {
        oneofKind: "getChatBots";
        /**
         * @generated from protobuf field: GetChatBotsRequestProto get_chat_bots = 1;
         */
        getChatBots: GetChatBotsRequestProto;
    } | {
        oneofKind: "getChatSession";
        /**
         * @generated from protobuf field: GetChatSessionRequestProto get_chat_session = 2;
         */
        getChatSession: GetChatSessionRequestProto;
    } | {
        oneofKind: "updateChatSession";
        /**
         * @generated from protobuf field: UpdateChatSessionRequestProto update_chat_session = 3;
         */
        updateChatSession: UpdateChatSessionRequestProto;
    } | {
        oneofKind: "deleteChatSession";
        /**
         * @generated from protobuf field: DeleteChatSessionRequestProto delete_chat_session = 4;
         */
        deleteChatSession: DeleteChatSessionRequestProto;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message ChatApiResponseProto
 */
export interface ChatApiResponseProto {
    /**
     * @generated from protobuf oneof: response
     */
    response: {
        oneofKind: "getChatBots";
        /**
         * @generated from protobuf field: GetChatBotsResponseProto get_chat_bots = 1;
         */
        getChatBots: GetChatBotsResponseProto;
    } | {
        oneofKind: "getChatSession";
        /**
         * @generated from protobuf field: GetChatSessionResponseProto get_chat_session = 2;
         */
        getChatSession: GetChatSessionResponseProto;
    } | {
        oneofKind: "updateChatSession";
        /**
         * @generated from protobuf field: UpdateChatSessionResponseProto update_chat_session = 3;
         */
        updateChatSession: UpdateChatSessionResponseProto;
    } | {
        oneofKind: "deleteChatSession";
        /**
         * @generated from protobuf field: DeleteChatSessionResponseProto delete_chat_session = 4;
         */
        deleteChatSession: DeleteChatSessionResponseProto;
    } | {
        oneofKind: undefined;
    };
    /**
     * @generated from protobuf field: map<string, google.protobuf.Duration> latencies = 100;
     */
    latencies: {
        [key: string]: Duration;
    };
}
/**
 * @generated from protobuf message GetChatBotsRequestProto
 */
export interface GetChatBotsRequestProto {
}
/**
 * @generated from protobuf message GetChatBotsResponseProto
 */
export interface GetChatBotsResponseProto {
    /**
     * @generated from protobuf field: repeated ChatBotProto bots = 1;
     */
    bots: ChatBotProto[];
}
/**
 * @generated from protobuf message GetChatSessionRequestProto
 */
export interface GetChatSessionRequestProto {
    /**
     * @generated from protobuf field: string story_id = 1;
     */
    storyId: string;
}
/**
 * @generated from protobuf message GetChatSessionResponseProto
 */
export interface GetChatSessionResponseProto {
    /**
     * @generated from protobuf field: ChatSessionProto chat_session = 1;
     */
    chatSession?: ChatSessionProto;
}
/**
 * @generated from protobuf message UpdateChatSessionRequestProto
 */
export interface UpdateChatSessionRequestProto {
    /**
     * @generated from protobuf field: ChatSessionProto chat_session = 1;
     */
    chatSession?: ChatSessionProto;
}
/**
 * @generated from protobuf message UpdateChatSessionResponseProto
 */
export interface UpdateChatSessionResponseProto {
}
/**
 * @generated from protobuf message DeleteChatSessionRequestProto
 */
export interface DeleteChatSessionRequestProto {
    /**
     * @generated from protobuf field: string chat_session_id = 1;
     */
    chatSessionId: string;
}
/**
 * @generated from protobuf message DeleteChatSessionResponseProto
 */
export interface DeleteChatSessionResponseProto {
}
/**
 * @generated from protobuf message ChatBotProto
 */
export interface ChatBotProto {
    /**
     * @generated from protobuf field: string bot_id = 1;
     */
    botId: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: string description_prompt = 3;
     */
    descriptionPrompt: string;
    /**
     * @generated from protobuf field: ChatActivitiesProto activities = 4;
     */
    activities?: ChatActivitiesProto;
}
/**
 * @generated from protobuf message ChatActivitiesProto
 */
export interface ChatActivitiesProto {
    /**
     * @generated from protobuf field: string description_prompt = 1;
     */
    descriptionPrompt: string;
    /**
     * @generated from protobuf field: repeated ChatActivityProto activities = 2;
     */
    activities: ChatActivityProto[];
}
/**
 * @generated from protobuf message ChatActivityProto
 */
export interface ChatActivityProto {
    /**
     * Machine identifier, LLM-readable, e.g. "compare-and-contrast", "writing-challenge"
     *
     * @generated from protobuf field: string activity_id = 1;
     */
    activityId: string;
    /**
     * How it should be diplayed to the user
     *
     * @generated from protobuf field: string display_name = 2;
     */
    displayName: string;
    /**
     * @generated from protobuf field: string description_prompt = 3;
     */
    descriptionPrompt: string;
    /**
     * @generated from protobuf field: string action_prompt = 4;
     */
    actionPrompt: string;
}
/**
 * @generated from protobuf message ChatAssistantMessageBlockProto
 */
export interface ChatAssistantMessageBlockProto {
    /**
     * @generated from protobuf field: string text = 2;
     */
    text: string;
    /**
     * @generated from protobuf field: repeated string activity_ids = 3;
     */
    activityIds: string[];
}
/**
 * @generated from protobuf message ChatAssistantMessageProto
 */
export interface ChatAssistantMessageProto {
    /**
     * @generated from protobuf field: repeated ChatAssistantMessageBlockProto blocks = 1;
     */
    blocks: ChatAssistantMessageBlockProto[];
}
/**
 * @generated from protobuf message ChatUserMessageProto
 */
export interface ChatUserMessageProto {
    /**
     * Explicitly entered by the user
     *
     * @generated from protobuf field: string text = 1;
     */
    text: string;
    /**
     * User selected one of the activities
     *
     * @generated from protobuf field: string activity_id = 2;
     */
    activityId: string;
}
/**
 * @generated from protobuf message ChatMessageProto
 */
export interface ChatMessageProto {
    /**
     * @generated from protobuf field: string message_id = 1;
     */
    messageId: string;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp created_at = 2;
     */
    createdAt?: Timestamp;
    /**
     * @generated from protobuf oneof: type
     */
    type: {
        oneofKind: "assistant";
        /**
         * @generated from protobuf field: ChatAssistantMessageProto assistant = 3;
         */
        assistant: ChatAssistantMessageProto;
    } | {
        oneofKind: "user";
        /**
         * @generated from protobuf field: ChatUserMessageProto user = 4;
         */
        user: ChatUserMessageProto;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message ChatSessionProto
 */
export interface ChatSessionProto {
    /**
     * @generated from protobuf field: string chat_session_id = 1;
     */
    chatSessionId: string;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp created_at = 2;
     */
    createdAt?: Timestamp;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp last_modified_at = 3;
     */
    lastModifiedAt?: Timestamp;
    /**
     * @generated from protobuf field: string story_id = 4;
     */
    storyId: string;
    /**
     * @generated from protobuf field: string bot_id = 5;
     */
    botId: string;
    /**
     * @generated from protobuf field: repeated ChatMessageProto messages = 7;
     */
    messages: ChatMessageProto[];
}
// @generated message type with reflection information, may provide speed optimized methods
class ChatApiRequestProto$Type extends MessageType<ChatApiRequestProto> {
    constructor() {
        super("ChatApiRequestProto", [
            { no: 1, name: "get_chat_bots", kind: "message", oneof: "request", T: () => GetChatBotsRequestProto },
            { no: 2, name: "get_chat_session", kind: "message", oneof: "request", T: () => GetChatSessionRequestProto },
            { no: 3, name: "update_chat_session", kind: "message", oneof: "request", T: () => UpdateChatSessionRequestProto },
            { no: 4, name: "delete_chat_session", kind: "message", oneof: "request", T: () => DeleteChatSessionRequestProto }
        ]);
    }
    create(value?: PartialMessage<ChatApiRequestProto>): ChatApiRequestProto {
        const message = { request: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChatApiRequestProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChatApiRequestProto): ChatApiRequestProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* GetChatBotsRequestProto get_chat_bots */ 1:
                    message.request = {
                        oneofKind: "getChatBots",
                        getChatBots: GetChatBotsRequestProto.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).getChatBots)
                    };
                    break;
                case /* GetChatSessionRequestProto get_chat_session */ 2:
                    message.request = {
                        oneofKind: "getChatSession",
                        getChatSession: GetChatSessionRequestProto.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).getChatSession)
                    };
                    break;
                case /* UpdateChatSessionRequestProto update_chat_session */ 3:
                    message.request = {
                        oneofKind: "updateChatSession",
                        updateChatSession: UpdateChatSessionRequestProto.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).updateChatSession)
                    };
                    break;
                case /* DeleteChatSessionRequestProto delete_chat_session */ 4:
                    message.request = {
                        oneofKind: "deleteChatSession",
                        deleteChatSession: DeleteChatSessionRequestProto.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).deleteChatSession)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChatApiRequestProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* GetChatBotsRequestProto get_chat_bots = 1; */
        if (message.request.oneofKind === "getChatBots")
            GetChatBotsRequestProto.internalBinaryWrite(message.request.getChatBots, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* GetChatSessionRequestProto get_chat_session = 2; */
        if (message.request.oneofKind === "getChatSession")
            GetChatSessionRequestProto.internalBinaryWrite(message.request.getChatSession, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* UpdateChatSessionRequestProto update_chat_session = 3; */
        if (message.request.oneofKind === "updateChatSession")
            UpdateChatSessionRequestProto.internalBinaryWrite(message.request.updateChatSession, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* DeleteChatSessionRequestProto delete_chat_session = 4; */
        if (message.request.oneofKind === "deleteChatSession")
            DeleteChatSessionRequestProto.internalBinaryWrite(message.request.deleteChatSession, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ChatApiRequestProto
 */
export const ChatApiRequestProto = new ChatApiRequestProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChatApiResponseProto$Type extends MessageType<ChatApiResponseProto> {
    constructor() {
        super("ChatApiResponseProto", [
            { no: 1, name: "get_chat_bots", kind: "message", oneof: "response", T: () => GetChatBotsResponseProto },
            { no: 2, name: "get_chat_session", kind: "message", oneof: "response", T: () => GetChatSessionResponseProto },
            { no: 3, name: "update_chat_session", kind: "message", oneof: "response", T: () => UpdateChatSessionResponseProto },
            { no: 4, name: "delete_chat_session", kind: "message", oneof: "response", T: () => DeleteChatSessionResponseProto },
            { no: 100, name: "latencies", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => Duration } }
        ]);
    }
    create(value?: PartialMessage<ChatApiResponseProto>): ChatApiResponseProto {
        const message = { response: { oneofKind: undefined }, latencies: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChatApiResponseProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChatApiResponseProto): ChatApiResponseProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* GetChatBotsResponseProto get_chat_bots */ 1:
                    message.response = {
                        oneofKind: "getChatBots",
                        getChatBots: GetChatBotsResponseProto.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).getChatBots)
                    };
                    break;
                case /* GetChatSessionResponseProto get_chat_session */ 2:
                    message.response = {
                        oneofKind: "getChatSession",
                        getChatSession: GetChatSessionResponseProto.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).getChatSession)
                    };
                    break;
                case /* UpdateChatSessionResponseProto update_chat_session */ 3:
                    message.response = {
                        oneofKind: "updateChatSession",
                        updateChatSession: UpdateChatSessionResponseProto.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).updateChatSession)
                    };
                    break;
                case /* DeleteChatSessionResponseProto delete_chat_session */ 4:
                    message.response = {
                        oneofKind: "deleteChatSession",
                        deleteChatSession: DeleteChatSessionResponseProto.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).deleteChatSession)
                    };
                    break;
                case /* map<string, google.protobuf.Duration> latencies */ 100:
                    this.binaryReadMap100(message.latencies, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap100(map: ChatApiResponseProto["latencies"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof ChatApiResponseProto["latencies"] | undefined, val: ChatApiResponseProto["latencies"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = Duration.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field ChatApiResponseProto.latencies");
            }
        }
        map[key ?? ""] = val ?? Duration.create();
    }
    internalBinaryWrite(message: ChatApiResponseProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* GetChatBotsResponseProto get_chat_bots = 1; */
        if (message.response.oneofKind === "getChatBots")
            GetChatBotsResponseProto.internalBinaryWrite(message.response.getChatBots, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* GetChatSessionResponseProto get_chat_session = 2; */
        if (message.response.oneofKind === "getChatSession")
            GetChatSessionResponseProto.internalBinaryWrite(message.response.getChatSession, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* UpdateChatSessionResponseProto update_chat_session = 3; */
        if (message.response.oneofKind === "updateChatSession")
            UpdateChatSessionResponseProto.internalBinaryWrite(message.response.updateChatSession, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* DeleteChatSessionResponseProto delete_chat_session = 4; */
        if (message.response.oneofKind === "deleteChatSession")
            DeleteChatSessionResponseProto.internalBinaryWrite(message.response.deleteChatSession, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* map<string, google.protobuf.Duration> latencies = 100; */
        for (let k of Object.keys(message.latencies)) {
            writer.tag(100, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            Duration.internalBinaryWrite(message.latencies[k], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ChatApiResponseProto
 */
export const ChatApiResponseProto = new ChatApiResponseProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetChatBotsRequestProto$Type extends MessageType<GetChatBotsRequestProto> {
    constructor() {
        super("GetChatBotsRequestProto", []);
    }
    create(value?: PartialMessage<GetChatBotsRequestProto>): GetChatBotsRequestProto {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetChatBotsRequestProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetChatBotsRequestProto): GetChatBotsRequestProto {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetChatBotsRequestProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetChatBotsRequestProto
 */
export const GetChatBotsRequestProto = new GetChatBotsRequestProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetChatBotsResponseProto$Type extends MessageType<GetChatBotsResponseProto> {
    constructor() {
        super("GetChatBotsResponseProto", [
            { no: 1, name: "bots", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ChatBotProto }
        ]);
    }
    create(value?: PartialMessage<GetChatBotsResponseProto>): GetChatBotsResponseProto {
        const message = { bots: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetChatBotsResponseProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetChatBotsResponseProto): GetChatBotsResponseProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated ChatBotProto bots */ 1:
                    message.bots.push(ChatBotProto.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetChatBotsResponseProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated ChatBotProto bots = 1; */
        for (let i = 0; i < message.bots.length; i++)
            ChatBotProto.internalBinaryWrite(message.bots[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetChatBotsResponseProto
 */
export const GetChatBotsResponseProto = new GetChatBotsResponseProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetChatSessionRequestProto$Type extends MessageType<GetChatSessionRequestProto> {
    constructor() {
        super("GetChatSessionRequestProto", [
            { no: 1, name: "story_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetChatSessionRequestProto>): GetChatSessionRequestProto {
        const message = { storyId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetChatSessionRequestProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetChatSessionRequestProto): GetChatSessionRequestProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string story_id */ 1:
                    message.storyId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetChatSessionRequestProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string story_id = 1; */
        if (message.storyId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.storyId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetChatSessionRequestProto
 */
export const GetChatSessionRequestProto = new GetChatSessionRequestProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetChatSessionResponseProto$Type extends MessageType<GetChatSessionResponseProto> {
    constructor() {
        super("GetChatSessionResponseProto", [
            { no: 1, name: "chat_session", kind: "message", T: () => ChatSessionProto }
        ]);
    }
    create(value?: PartialMessage<GetChatSessionResponseProto>): GetChatSessionResponseProto {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetChatSessionResponseProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetChatSessionResponseProto): GetChatSessionResponseProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ChatSessionProto chat_session */ 1:
                    message.chatSession = ChatSessionProto.internalBinaryRead(reader, reader.uint32(), options, message.chatSession);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetChatSessionResponseProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* ChatSessionProto chat_session = 1; */
        if (message.chatSession)
            ChatSessionProto.internalBinaryWrite(message.chatSession, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetChatSessionResponseProto
 */
export const GetChatSessionResponseProto = new GetChatSessionResponseProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateChatSessionRequestProto$Type extends MessageType<UpdateChatSessionRequestProto> {
    constructor() {
        super("UpdateChatSessionRequestProto", [
            { no: 1, name: "chat_session", kind: "message", T: () => ChatSessionProto }
        ]);
    }
    create(value?: PartialMessage<UpdateChatSessionRequestProto>): UpdateChatSessionRequestProto {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdateChatSessionRequestProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateChatSessionRequestProto): UpdateChatSessionRequestProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ChatSessionProto chat_session */ 1:
                    message.chatSession = ChatSessionProto.internalBinaryRead(reader, reader.uint32(), options, message.chatSession);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateChatSessionRequestProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* ChatSessionProto chat_session = 1; */
        if (message.chatSession)
            ChatSessionProto.internalBinaryWrite(message.chatSession, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message UpdateChatSessionRequestProto
 */
export const UpdateChatSessionRequestProto = new UpdateChatSessionRequestProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateChatSessionResponseProto$Type extends MessageType<UpdateChatSessionResponseProto> {
    constructor() {
        super("UpdateChatSessionResponseProto", []);
    }
    create(value?: PartialMessage<UpdateChatSessionResponseProto>): UpdateChatSessionResponseProto {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdateChatSessionResponseProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateChatSessionResponseProto): UpdateChatSessionResponseProto {
        return target ?? this.create();
    }
    internalBinaryWrite(message: UpdateChatSessionResponseProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message UpdateChatSessionResponseProto
 */
export const UpdateChatSessionResponseProto = new UpdateChatSessionResponseProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteChatSessionRequestProto$Type extends MessageType<DeleteChatSessionRequestProto> {
    constructor() {
        super("DeleteChatSessionRequestProto", [
            { no: 1, name: "chat_session_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteChatSessionRequestProto>): DeleteChatSessionRequestProto {
        const message = { chatSessionId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DeleteChatSessionRequestProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteChatSessionRequestProto): DeleteChatSessionRequestProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string chat_session_id */ 1:
                    message.chatSessionId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteChatSessionRequestProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string chat_session_id = 1; */
        if (message.chatSessionId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.chatSessionId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DeleteChatSessionRequestProto
 */
export const DeleteChatSessionRequestProto = new DeleteChatSessionRequestProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteChatSessionResponseProto$Type extends MessageType<DeleteChatSessionResponseProto> {
    constructor() {
        super("DeleteChatSessionResponseProto", []);
    }
    create(value?: PartialMessage<DeleteChatSessionResponseProto>): DeleteChatSessionResponseProto {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DeleteChatSessionResponseProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteChatSessionResponseProto): DeleteChatSessionResponseProto {
        return target ?? this.create();
    }
    internalBinaryWrite(message: DeleteChatSessionResponseProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DeleteChatSessionResponseProto
 */
export const DeleteChatSessionResponseProto = new DeleteChatSessionResponseProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChatBotProto$Type extends MessageType<ChatBotProto> {
    constructor() {
        super("ChatBotProto", [
            { no: 1, name: "bot_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "description_prompt", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "activities", kind: "message", T: () => ChatActivitiesProto }
        ]);
    }
    create(value?: PartialMessage<ChatBotProto>): ChatBotProto {
        const message = { botId: "", name: "", descriptionPrompt: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChatBotProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChatBotProto): ChatBotProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string bot_id */ 1:
                    message.botId = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string description_prompt */ 3:
                    message.descriptionPrompt = reader.string();
                    break;
                case /* ChatActivitiesProto activities */ 4:
                    message.activities = ChatActivitiesProto.internalBinaryRead(reader, reader.uint32(), options, message.activities);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChatBotProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string bot_id = 1; */
        if (message.botId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.botId);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string description_prompt = 3; */
        if (message.descriptionPrompt !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.descriptionPrompt);
        /* ChatActivitiesProto activities = 4; */
        if (message.activities)
            ChatActivitiesProto.internalBinaryWrite(message.activities, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ChatBotProto
 */
export const ChatBotProto = new ChatBotProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChatActivitiesProto$Type extends MessageType<ChatActivitiesProto> {
    constructor() {
        super("ChatActivitiesProto", [
            { no: 1, name: "description_prompt", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "activities", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ChatActivityProto }
        ]);
    }
    create(value?: PartialMessage<ChatActivitiesProto>): ChatActivitiesProto {
        const message = { descriptionPrompt: "", activities: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChatActivitiesProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChatActivitiesProto): ChatActivitiesProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string description_prompt */ 1:
                    message.descriptionPrompt = reader.string();
                    break;
                case /* repeated ChatActivityProto activities */ 2:
                    message.activities.push(ChatActivityProto.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChatActivitiesProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string description_prompt = 1; */
        if (message.descriptionPrompt !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.descriptionPrompt);
        /* repeated ChatActivityProto activities = 2; */
        for (let i = 0; i < message.activities.length; i++)
            ChatActivityProto.internalBinaryWrite(message.activities[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ChatActivitiesProto
 */
export const ChatActivitiesProto = new ChatActivitiesProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChatActivityProto$Type extends MessageType<ChatActivityProto> {
    constructor() {
        super("ChatActivityProto", [
            { no: 1, name: "activity_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "display_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "description_prompt", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "action_prompt", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ChatActivityProto>): ChatActivityProto {
        const message = { activityId: "", displayName: "", descriptionPrompt: "", actionPrompt: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChatActivityProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChatActivityProto): ChatActivityProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string activity_id */ 1:
                    message.activityId = reader.string();
                    break;
                case /* string display_name */ 2:
                    message.displayName = reader.string();
                    break;
                case /* string description_prompt */ 3:
                    message.descriptionPrompt = reader.string();
                    break;
                case /* string action_prompt */ 4:
                    message.actionPrompt = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChatActivityProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string activity_id = 1; */
        if (message.activityId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.activityId);
        /* string display_name = 2; */
        if (message.displayName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.displayName);
        /* string description_prompt = 3; */
        if (message.descriptionPrompt !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.descriptionPrompt);
        /* string action_prompt = 4; */
        if (message.actionPrompt !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.actionPrompt);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ChatActivityProto
 */
export const ChatActivityProto = new ChatActivityProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChatAssistantMessageBlockProto$Type extends MessageType<ChatAssistantMessageBlockProto> {
    constructor() {
        super("ChatAssistantMessageBlockProto", [
            { no: 2, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "activity_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ChatAssistantMessageBlockProto>): ChatAssistantMessageBlockProto {
        const message = { text: "", activityIds: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChatAssistantMessageBlockProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChatAssistantMessageBlockProto): ChatAssistantMessageBlockProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string text */ 2:
                    message.text = reader.string();
                    break;
                case /* repeated string activity_ids */ 3:
                    message.activityIds.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChatAssistantMessageBlockProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string text = 2; */
        if (message.text !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.text);
        /* repeated string activity_ids = 3; */
        for (let i = 0; i < message.activityIds.length; i++)
            writer.tag(3, WireType.LengthDelimited).string(message.activityIds[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ChatAssistantMessageBlockProto
 */
export const ChatAssistantMessageBlockProto = new ChatAssistantMessageBlockProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChatAssistantMessageProto$Type extends MessageType<ChatAssistantMessageProto> {
    constructor() {
        super("ChatAssistantMessageProto", [
            { no: 1, name: "blocks", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ChatAssistantMessageBlockProto }
        ]);
    }
    create(value?: PartialMessage<ChatAssistantMessageProto>): ChatAssistantMessageProto {
        const message = { blocks: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChatAssistantMessageProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChatAssistantMessageProto): ChatAssistantMessageProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated ChatAssistantMessageBlockProto blocks */ 1:
                    message.blocks.push(ChatAssistantMessageBlockProto.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChatAssistantMessageProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated ChatAssistantMessageBlockProto blocks = 1; */
        for (let i = 0; i < message.blocks.length; i++)
            ChatAssistantMessageBlockProto.internalBinaryWrite(message.blocks[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ChatAssistantMessageProto
 */
export const ChatAssistantMessageProto = new ChatAssistantMessageProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChatUserMessageProto$Type extends MessageType<ChatUserMessageProto> {
    constructor() {
        super("ChatUserMessageProto", [
            { no: 1, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "activity_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ChatUserMessageProto>): ChatUserMessageProto {
        const message = { text: "", activityId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChatUserMessageProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChatUserMessageProto): ChatUserMessageProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string text */ 1:
                    message.text = reader.string();
                    break;
                case /* string activity_id */ 2:
                    message.activityId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChatUserMessageProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string text = 1; */
        if (message.text !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.text);
        /* string activity_id = 2; */
        if (message.activityId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.activityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ChatUserMessageProto
 */
export const ChatUserMessageProto = new ChatUserMessageProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChatMessageProto$Type extends MessageType<ChatMessageProto> {
    constructor() {
        super("ChatMessageProto", [
            { no: 1, name: "message_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "created_at", kind: "message", T: () => Timestamp },
            { no: 3, name: "assistant", kind: "message", oneof: "type", T: () => ChatAssistantMessageProto },
            { no: 4, name: "user", kind: "message", oneof: "type", T: () => ChatUserMessageProto }
        ]);
    }
    create(value?: PartialMessage<ChatMessageProto>): ChatMessageProto {
        const message = { messageId: "", type: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChatMessageProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChatMessageProto): ChatMessageProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string message_id */ 1:
                    message.messageId = reader.string();
                    break;
                case /* google.protobuf.Timestamp created_at */ 2:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* ChatAssistantMessageProto assistant */ 3:
                    message.type = {
                        oneofKind: "assistant",
                        assistant: ChatAssistantMessageProto.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).assistant)
                    };
                    break;
                case /* ChatUserMessageProto user */ 4:
                    message.type = {
                        oneofKind: "user",
                        user: ChatUserMessageProto.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).user)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChatMessageProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string message_id = 1; */
        if (message.messageId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.messageId);
        /* google.protobuf.Timestamp created_at = 2; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* ChatAssistantMessageProto assistant = 3; */
        if (message.type.oneofKind === "assistant")
            ChatAssistantMessageProto.internalBinaryWrite(message.type.assistant, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* ChatUserMessageProto user = 4; */
        if (message.type.oneofKind === "user")
            ChatUserMessageProto.internalBinaryWrite(message.type.user, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ChatMessageProto
 */
export const ChatMessageProto = new ChatMessageProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChatSessionProto$Type extends MessageType<ChatSessionProto> {
    constructor() {
        super("ChatSessionProto", [
            { no: 1, name: "chat_session_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "created_at", kind: "message", T: () => Timestamp },
            { no: 3, name: "last_modified_at", kind: "message", T: () => Timestamp },
            { no: 4, name: "story_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "bot_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "messages", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ChatMessageProto }
        ]);
    }
    create(value?: PartialMessage<ChatSessionProto>): ChatSessionProto {
        const message = { chatSessionId: "", storyId: "", botId: "", messages: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChatSessionProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChatSessionProto): ChatSessionProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string chat_session_id */ 1:
                    message.chatSessionId = reader.string();
                    break;
                case /* google.protobuf.Timestamp created_at */ 2:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* google.protobuf.Timestamp last_modified_at */ 3:
                    message.lastModifiedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.lastModifiedAt);
                    break;
                case /* string story_id */ 4:
                    message.storyId = reader.string();
                    break;
                case /* string bot_id */ 5:
                    message.botId = reader.string();
                    break;
                case /* repeated ChatMessageProto messages */ 7:
                    message.messages.push(ChatMessageProto.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChatSessionProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string chat_session_id = 1; */
        if (message.chatSessionId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.chatSessionId);
        /* google.protobuf.Timestamp created_at = 2; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp last_modified_at = 3; */
        if (message.lastModifiedAt)
            Timestamp.internalBinaryWrite(message.lastModifiedAt, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* string story_id = 4; */
        if (message.storyId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.storyId);
        /* string bot_id = 5; */
        if (message.botId !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.botId);
        /* repeated ChatMessageProto messages = 7; */
        for (let i = 0; i < message.messages.length; i++)
            ChatMessageProto.internalBinaryWrite(message.messages[i], writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ChatSessionProto
 */
export const ChatSessionProto = new ChatSessionProto$Type();
