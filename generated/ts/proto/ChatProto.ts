/* eslint-disable */
// @generated by protobuf-ts 2.9.1 with parameter eslint_disable,long_type_string,ts_nocheck
// @generated from protobuf file "ChatProto.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "./google/protobuf/timestamp";
import { Duration } from "./google/protobuf/duration";
/**
 * @generated from protobuf message ChatApiRequestProto
 */
export interface ChatApiRequestProto {
    /**
     * @generated from protobuf field: string encoded_user_auth = 1;
     */
    encodedUserAuth: string;
    /**
     * @generated from protobuf oneof: request
     */
    request: {
        oneofKind: "listChats";
        /**
         * @generated from protobuf field: ListChatsRequestProto list_chats = 2;
         */
        listChats: ListChatsRequestProto;
    } | {
        oneofKind: "getChat";
        /**
         * @generated from protobuf field: GetChatRequestProto get_chat = 3;
         */
        getChat: GetChatRequestProto;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message ChatApiResponseProto
 */
export interface ChatApiResponseProto {
    /**
     * If present the token was refreshed and the client should use this new one
     * from now onwards.
     *
     * @generated from protobuf field: string refreshed_encoded_user_auth = 1;
     */
    refreshedEncodedUserAuth: string;
    /**
     * @generated from protobuf oneof: response
     */
    response: {
        oneofKind: "listChats";
        /**
         * @generated from protobuf field: ListChatsResponseProto list_chats = 2;
         */
        listChats: ListChatsResponseProto;
    } | {
        oneofKind: "getChat";
        /**
         * @generated from protobuf field: GetChatResponseProto get_chat = 3;
         */
        getChat: GetChatResponseProto;
    } | {
        oneofKind: undefined;
    };
    /**
     * @generated from protobuf field: map<string, google.protobuf.Duration> latencies = 100;
     */
    latencies: {
        [key: string]: Duration;
    };
}
/**
 * @generated from protobuf message ChatStreamApiRequestProto
 */
export interface ChatStreamApiRequestProto {
    /**
     * @generated from protobuf field: string encoded_user_auth = 1;
     */
    encodedUserAuth: string;
    /**
     * @generated from protobuf oneof: request
     */
    request: {
        oneofKind: "openChat";
        /**
         * @generated from protobuf field: OpenChatRequestProto open_chat = 2;
         */
        openChat: OpenChatRequestProto;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message ChatStreamApiResponseHeaderProto
 */
export interface ChatStreamApiResponseHeaderProto {
    /**
     * If present the token was refreshed and the client should use this new one
     * from now onwards.
     *
     * @generated from protobuf field: string refreshed_encoded_user_auth = 1;
     */
    refreshedEncodedUserAuth: string;
    /**
     * @generated from protobuf oneof: header
     */
    header: {
        oneofKind: "openChatHeader";
        /**
         * @generated from protobuf field: OpenChatResponseHeaderProto open_chat_header = 2;
         */
        openChatHeader: OpenChatResponseHeaderProto;
    } | {
        oneofKind: undefined;
    };
    /**
     * @generated from protobuf field: map<string, google.protobuf.Duration> latencies = 100;
     */
    latencies: {
        [key: string]: Duration;
    };
}
/**
 * @generated from protobuf message ChatStreamApiResponseDeltaProto
 */
export interface ChatStreamApiResponseDeltaProto {
    /**
     * @generated from protobuf oneof: response_delta
     */
    responseDelta: {
        oneofKind: "assistant";
        /**
         * @generated from protobuf field: ChatAssistantMessageDeltaProto assistant = 1;
         */
        assistant: ChatAssistantMessageDeltaProto;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message ListChatsRequestProto
 */
export interface ListChatsRequestProto {
    /**
     * @generated from protobuf field: google.protobuf.Timestamp last_modified_after = 1;
     */
    lastModifiedAfter?: Timestamp;
}
/**
 * @generated from protobuf message ListChatsResponseProto
 */
export interface ListChatsResponseProto {
    /**
     * @generated from protobuf field: repeated ChatSnippetProto snippets = 1;
     */
    snippets: ChatSnippetProto[];
}
/**
 * @generated from protobuf message ChatSnippetProto
 */
export interface ChatSnippetProto {
    /**
     * @generated from protobuf field: string last_message_id = 1;
     */
    lastMessageId: string;
    /**
     * @generated from protobuf field: string text = 2;
     */
    text: string;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp last_modified_at = 3;
     */
    lastModifiedAt?: Timestamp;
}
/**
 * @generated from protobuf message GetChatRequestProto
 */
export interface GetChatRequestProto {
    /**
     * @generated from protobuf field: string last_message_id = 1;
     */
    lastMessageId: string;
}
/**
 * @generated from protobuf message GetChatResponseProto
 */
export interface GetChatResponseProto {
    /**
     * @generated from protobuf field: repeated ChatMessageProto messages = 1;
     */
    messages: ChatMessageProto[];
}
/**
 * @generated from protobuf message OpenChatRequestProto
 */
export interface OpenChatRequestProto {
    /**
     * @generated from protobuf oneof: type
     */
    type: {
        oneofKind: "botId";
        /**
         * @generated from protobuf field: ChatBotIdProto bot_id = 1;
         */
        botId: ChatBotIdProto;
    } | {
        oneofKind: "withUserMessage";
        /**
         * @generated from protobuf field: OpenChatWithUserMessageProto with_user_message = 3;
         */
        withUserMessage: OpenChatWithUserMessageProto;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message OpenChatResponseHeaderProto
 */
export interface OpenChatResponseHeaderProto {
    /**
     * @generated from protobuf field: repeated ChatMessageProto messages = 1;
     */
    messages: ChatMessageProto[];
    /**
     * @generated from protobuf field: string streamed_message_id = 2;
     */
    streamedMessageId: string;
    /**
     * @generated from protobuf field: ChatBotIdProto bot_id = 3;
     */
    botId: ChatBotIdProto; // Bot used to produce this output.
}
/**
 * @generated from protobuf message ChatMessageProto
 */
export interface ChatMessageProto {
    /**
     * @generated from protobuf field: string message_id = 1;
     */
    messageId: string;
    /**
     * @generated from protobuf field: string parent_message_id = 2;
     */
    parentMessageId: string; // If empty this is the root message.
    /**
     * @generated from protobuf field: google.protobuf.Timestamp created_at = 3;
     */
    createdAt?: Timestamp;
    /**
     * @generated from protobuf oneof: type
     */
    type: {
        oneofKind: "assistant";
        /**
         * @generated from protobuf field: ChatAssistantMessageProto assistant = 4;
         */
        assistant: ChatAssistantMessageProto;
    } | {
        oneofKind: "user";
        /**
         * @generated from protobuf field: ChatUserMessageProto user = 5;
         */
        user: ChatUserMessageProto;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message ChatAssistantMessageDeltaProto
 */
export interface ChatAssistantMessageDeltaProto {
    /**
     * @generated from protobuf oneof: delta
     */
    delta: {
        oneofKind: "textDelta";
        /**
         * Append current text block.
         *
         * @generated from protobuf field: string text_delta = 1;
         */
        textDelta: string;
    } | {
        oneofKind: "activity";
        /**
         * Append activity to the current block.
         * Start a new block on next text_delta.
         *
         * @generated from protobuf field: ChatActivityIntroProto activity = 2;
         */
        activity: ChatActivityIntroProto;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message ChatAssistantMessageProto
 */
export interface ChatAssistantMessageProto {
    /**
     * @generated from protobuf field: repeated ChatAssistantMessageBlockProto blocks = 1;
     */
    blocks: ChatAssistantMessageBlockProto[];
}
/**
 * @generated from protobuf message ChatAssistantMessageBlockProto
 */
export interface ChatAssistantMessageBlockProto {
    /**
     * @generated from protobuf field: string text = 1;
     */
    text: string;
    /**
     * @generated from protobuf field: repeated ChatActivityIntroProto activities = 2;
     */
    activities: ChatActivityIntroProto[];
}
/**
 * @generated from protobuf message ChatActivityIntroProto
 */
export interface ChatActivityIntroProto {
    /**
     * @generated from protobuf field: string activity_id = 1;
     */
    activityId: string;
    /**
     * @generated from protobuf field: string display_name = 2;
     */
    displayName: string;
}
/**
 * @generated from protobuf message OpenChatWithUserMessageProto
 */
export interface OpenChatWithUserMessageProto {
    /**
     * @generated from protobuf field: string parent_message_id = 1;
     */
    parentMessageId: string; // If empty this is the root message.
    /**
     * @generated from protobuf field: ChatUserMessageProto user_message = 2;
     */
    userMessage?: ChatUserMessageProto;
}
/**
 * @generated from protobuf message ChatUserMessageProto
 */
export interface ChatUserMessageProto {
    /**
     * @generated from protobuf oneof: type
     */
    type: {
        oneofKind: "textInput";
        /**
         * @generated from protobuf field: ChatUserTextInputProto text_input = 1;
         */
        textInput: ChatUserTextInputProto;
    } | {
        oneofKind: "activityId";
        /**
         * @generated from protobuf field: string activity_id = 3;
         */
        activityId: string;
    } | {
        oneofKind: "activitiesForStoryId";
        /**
         * @generated from protobuf field: string activities_for_story_id = 2;
         */
        activitiesForStoryId: string;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message ChatUserTextInputProto
 */
export interface ChatUserTextInputProto {
    /**
     * @generated from protobuf field: ChatBotIdProto bot_id = 1;
     */
    botId: ChatBotIdProto;
    /**
     * @generated from protobuf field: string text = 2;
     */
    text: string;
}
/**
 * @generated from protobuf enum ChatBotIdProto
 */
export enum ChatBotIdProto {
    /**
     * @generated from protobuf enum value: CHAT_BOT_ID_PROTO_UNDEFINED = 0;
     */
    UNDEFINED = 0,
    /**
     * @generated from protobuf enum value: CHAT_BOT_ID_PROTO_GREETING = 1;
     */
    GREETING = 1,
    /**
     * @generated from protobuf enum value: CHAT_BOT_ID_PROTO_AFFIRMATION = 2;
     */
    AFFIRMATION = 2,
    /**
     * @generated from protobuf enum value: CHAT_BOT_ID_PROTO_SHORT = 3;
     */
    SHORT = 3,
    /**
     * @generated from protobuf enum value: CHAT_BOT_ID_PROTO_REASON = 4;
     */
    REASON = 4,
    /**
     * @generated from protobuf enum value: CHAT_BOT_ID_PROTO_SIMPLIFY = 5;
     */
    SIMPLIFY = 5,
    /**
     * @generated from protobuf enum value: CHAT_BOT_ID_PROTO_BRAINSTORM = 6;
     */
    BRAINSTORM = 6
}
// @generated message type with reflection information, may provide speed optimized methods
class ChatApiRequestProto$Type extends MessageType<ChatApiRequestProto> {
    constructor() {
        super("ChatApiRequestProto", [
            { no: 1, name: "encoded_user_auth", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "list_chats", kind: "message", oneof: "request", T: () => ListChatsRequestProto },
            { no: 3, name: "get_chat", kind: "message", oneof: "request", T: () => GetChatRequestProto }
        ]);
    }
    create(value?: PartialMessage<ChatApiRequestProto>): ChatApiRequestProto {
        const message = { encodedUserAuth: "", request: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChatApiRequestProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChatApiRequestProto): ChatApiRequestProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string encoded_user_auth */ 1:
                    message.encodedUserAuth = reader.string();
                    break;
                case /* ListChatsRequestProto list_chats */ 2:
                    message.request = {
                        oneofKind: "listChats",
                        listChats: ListChatsRequestProto.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).listChats)
                    };
                    break;
                case /* GetChatRequestProto get_chat */ 3:
                    message.request = {
                        oneofKind: "getChat",
                        getChat: GetChatRequestProto.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).getChat)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChatApiRequestProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string encoded_user_auth = 1; */
        if (message.encodedUserAuth !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.encodedUserAuth);
        /* ListChatsRequestProto list_chats = 2; */
        if (message.request.oneofKind === "listChats")
            ListChatsRequestProto.internalBinaryWrite(message.request.listChats, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* GetChatRequestProto get_chat = 3; */
        if (message.request.oneofKind === "getChat")
            GetChatRequestProto.internalBinaryWrite(message.request.getChat, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ChatApiRequestProto
 */
export const ChatApiRequestProto = new ChatApiRequestProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChatApiResponseProto$Type extends MessageType<ChatApiResponseProto> {
    constructor() {
        super("ChatApiResponseProto", [
            { no: 1, name: "refreshed_encoded_user_auth", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "list_chats", kind: "message", oneof: "response", T: () => ListChatsResponseProto },
            { no: 3, name: "get_chat", kind: "message", oneof: "response", T: () => GetChatResponseProto },
            { no: 100, name: "latencies", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => Duration } }
        ]);
    }
    create(value?: PartialMessage<ChatApiResponseProto>): ChatApiResponseProto {
        const message = { refreshedEncodedUserAuth: "", response: { oneofKind: undefined }, latencies: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChatApiResponseProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChatApiResponseProto): ChatApiResponseProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string refreshed_encoded_user_auth */ 1:
                    message.refreshedEncodedUserAuth = reader.string();
                    break;
                case /* ListChatsResponseProto list_chats */ 2:
                    message.response = {
                        oneofKind: "listChats",
                        listChats: ListChatsResponseProto.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).listChats)
                    };
                    break;
                case /* GetChatResponseProto get_chat */ 3:
                    message.response = {
                        oneofKind: "getChat",
                        getChat: GetChatResponseProto.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).getChat)
                    };
                    break;
                case /* map<string, google.protobuf.Duration> latencies */ 100:
                    this.binaryReadMap100(message.latencies, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap100(map: ChatApiResponseProto["latencies"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof ChatApiResponseProto["latencies"] | undefined, val: ChatApiResponseProto["latencies"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = Duration.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field ChatApiResponseProto.latencies");
            }
        }
        map[key ?? ""] = val ?? Duration.create();
    }
    internalBinaryWrite(message: ChatApiResponseProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string refreshed_encoded_user_auth = 1; */
        if (message.refreshedEncodedUserAuth !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.refreshedEncodedUserAuth);
        /* ListChatsResponseProto list_chats = 2; */
        if (message.response.oneofKind === "listChats")
            ListChatsResponseProto.internalBinaryWrite(message.response.listChats, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* GetChatResponseProto get_chat = 3; */
        if (message.response.oneofKind === "getChat")
            GetChatResponseProto.internalBinaryWrite(message.response.getChat, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* map<string, google.protobuf.Duration> latencies = 100; */
        for (let k of Object.keys(message.latencies)) {
            writer.tag(100, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            Duration.internalBinaryWrite(message.latencies[k], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ChatApiResponseProto
 */
export const ChatApiResponseProto = new ChatApiResponseProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChatStreamApiRequestProto$Type extends MessageType<ChatStreamApiRequestProto> {
    constructor() {
        super("ChatStreamApiRequestProto", [
            { no: 1, name: "encoded_user_auth", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "open_chat", kind: "message", oneof: "request", T: () => OpenChatRequestProto }
        ]);
    }
    create(value?: PartialMessage<ChatStreamApiRequestProto>): ChatStreamApiRequestProto {
        const message = { encodedUserAuth: "", request: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChatStreamApiRequestProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChatStreamApiRequestProto): ChatStreamApiRequestProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string encoded_user_auth */ 1:
                    message.encodedUserAuth = reader.string();
                    break;
                case /* OpenChatRequestProto open_chat */ 2:
                    message.request = {
                        oneofKind: "openChat",
                        openChat: OpenChatRequestProto.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).openChat)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChatStreamApiRequestProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string encoded_user_auth = 1; */
        if (message.encodedUserAuth !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.encodedUserAuth);
        /* OpenChatRequestProto open_chat = 2; */
        if (message.request.oneofKind === "openChat")
            OpenChatRequestProto.internalBinaryWrite(message.request.openChat, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ChatStreamApiRequestProto
 */
export const ChatStreamApiRequestProto = new ChatStreamApiRequestProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChatStreamApiResponseHeaderProto$Type extends MessageType<ChatStreamApiResponseHeaderProto> {
    constructor() {
        super("ChatStreamApiResponseHeaderProto", [
            { no: 1, name: "refreshed_encoded_user_auth", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "open_chat_header", kind: "message", oneof: "header", T: () => OpenChatResponseHeaderProto },
            { no: 100, name: "latencies", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => Duration } }
        ]);
    }
    create(value?: PartialMessage<ChatStreamApiResponseHeaderProto>): ChatStreamApiResponseHeaderProto {
        const message = { refreshedEncodedUserAuth: "", header: { oneofKind: undefined }, latencies: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChatStreamApiResponseHeaderProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChatStreamApiResponseHeaderProto): ChatStreamApiResponseHeaderProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string refreshed_encoded_user_auth */ 1:
                    message.refreshedEncodedUserAuth = reader.string();
                    break;
                case /* OpenChatResponseHeaderProto open_chat_header */ 2:
                    message.header = {
                        oneofKind: "openChatHeader",
                        openChatHeader: OpenChatResponseHeaderProto.internalBinaryRead(reader, reader.uint32(), options, (message.header as any).openChatHeader)
                    };
                    break;
                case /* map<string, google.protobuf.Duration> latencies */ 100:
                    this.binaryReadMap100(message.latencies, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap100(map: ChatStreamApiResponseHeaderProto["latencies"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof ChatStreamApiResponseHeaderProto["latencies"] | undefined, val: ChatStreamApiResponseHeaderProto["latencies"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = Duration.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field ChatStreamApiResponseHeaderProto.latencies");
            }
        }
        map[key ?? ""] = val ?? Duration.create();
    }
    internalBinaryWrite(message: ChatStreamApiResponseHeaderProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string refreshed_encoded_user_auth = 1; */
        if (message.refreshedEncodedUserAuth !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.refreshedEncodedUserAuth);
        /* OpenChatResponseHeaderProto open_chat_header = 2; */
        if (message.header.oneofKind === "openChatHeader")
            OpenChatResponseHeaderProto.internalBinaryWrite(message.header.openChatHeader, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* map<string, google.protobuf.Duration> latencies = 100; */
        for (let k of Object.keys(message.latencies)) {
            writer.tag(100, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            Duration.internalBinaryWrite(message.latencies[k], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ChatStreamApiResponseHeaderProto
 */
export const ChatStreamApiResponseHeaderProto = new ChatStreamApiResponseHeaderProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChatStreamApiResponseDeltaProto$Type extends MessageType<ChatStreamApiResponseDeltaProto> {
    constructor() {
        super("ChatStreamApiResponseDeltaProto", [
            { no: 1, name: "assistant", kind: "message", oneof: "responseDelta", T: () => ChatAssistantMessageDeltaProto }
        ]);
    }
    create(value?: PartialMessage<ChatStreamApiResponseDeltaProto>): ChatStreamApiResponseDeltaProto {
        const message = { responseDelta: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChatStreamApiResponseDeltaProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChatStreamApiResponseDeltaProto): ChatStreamApiResponseDeltaProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ChatAssistantMessageDeltaProto assistant */ 1:
                    message.responseDelta = {
                        oneofKind: "assistant",
                        assistant: ChatAssistantMessageDeltaProto.internalBinaryRead(reader, reader.uint32(), options, (message.responseDelta as any).assistant)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChatStreamApiResponseDeltaProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* ChatAssistantMessageDeltaProto assistant = 1; */
        if (message.responseDelta.oneofKind === "assistant")
            ChatAssistantMessageDeltaProto.internalBinaryWrite(message.responseDelta.assistant, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ChatStreamApiResponseDeltaProto
 */
export const ChatStreamApiResponseDeltaProto = new ChatStreamApiResponseDeltaProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListChatsRequestProto$Type extends MessageType<ListChatsRequestProto> {
    constructor() {
        super("ListChatsRequestProto", [
            { no: 1, name: "last_modified_after", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<ListChatsRequestProto>): ListChatsRequestProto {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListChatsRequestProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListChatsRequestProto): ListChatsRequestProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Timestamp last_modified_after */ 1:
                    message.lastModifiedAfter = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.lastModifiedAfter);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListChatsRequestProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.Timestamp last_modified_after = 1; */
        if (message.lastModifiedAfter)
            Timestamp.internalBinaryWrite(message.lastModifiedAfter, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ListChatsRequestProto
 */
export const ListChatsRequestProto = new ListChatsRequestProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListChatsResponseProto$Type extends MessageType<ListChatsResponseProto> {
    constructor() {
        super("ListChatsResponseProto", [
            { no: 1, name: "snippets", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ChatSnippetProto }
        ]);
    }
    create(value?: PartialMessage<ListChatsResponseProto>): ListChatsResponseProto {
        const message = { snippets: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListChatsResponseProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListChatsResponseProto): ListChatsResponseProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated ChatSnippetProto snippets */ 1:
                    message.snippets.push(ChatSnippetProto.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListChatsResponseProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated ChatSnippetProto snippets = 1; */
        for (let i = 0; i < message.snippets.length; i++)
            ChatSnippetProto.internalBinaryWrite(message.snippets[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ListChatsResponseProto
 */
export const ListChatsResponseProto = new ListChatsResponseProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChatSnippetProto$Type extends MessageType<ChatSnippetProto> {
    constructor() {
        super("ChatSnippetProto", [
            { no: 1, name: "last_message_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "last_modified_at", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<ChatSnippetProto>): ChatSnippetProto {
        const message = { lastMessageId: "", text: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChatSnippetProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChatSnippetProto): ChatSnippetProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string last_message_id */ 1:
                    message.lastMessageId = reader.string();
                    break;
                case /* string text */ 2:
                    message.text = reader.string();
                    break;
                case /* google.protobuf.Timestamp last_modified_at */ 3:
                    message.lastModifiedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.lastModifiedAt);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChatSnippetProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string last_message_id = 1; */
        if (message.lastMessageId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.lastMessageId);
        /* string text = 2; */
        if (message.text !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.text);
        /* google.protobuf.Timestamp last_modified_at = 3; */
        if (message.lastModifiedAt)
            Timestamp.internalBinaryWrite(message.lastModifiedAt, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ChatSnippetProto
 */
export const ChatSnippetProto = new ChatSnippetProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetChatRequestProto$Type extends MessageType<GetChatRequestProto> {
    constructor() {
        super("GetChatRequestProto", [
            { no: 1, name: "last_message_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetChatRequestProto>): GetChatRequestProto {
        const message = { lastMessageId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetChatRequestProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetChatRequestProto): GetChatRequestProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string last_message_id */ 1:
                    message.lastMessageId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetChatRequestProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string last_message_id = 1; */
        if (message.lastMessageId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.lastMessageId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetChatRequestProto
 */
export const GetChatRequestProto = new GetChatRequestProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetChatResponseProto$Type extends MessageType<GetChatResponseProto> {
    constructor() {
        super("GetChatResponseProto", [
            { no: 1, name: "messages", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ChatMessageProto }
        ]);
    }
    create(value?: PartialMessage<GetChatResponseProto>): GetChatResponseProto {
        const message = { messages: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetChatResponseProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetChatResponseProto): GetChatResponseProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated ChatMessageProto messages */ 1:
                    message.messages.push(ChatMessageProto.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetChatResponseProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated ChatMessageProto messages = 1; */
        for (let i = 0; i < message.messages.length; i++)
            ChatMessageProto.internalBinaryWrite(message.messages[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetChatResponseProto
 */
export const GetChatResponseProto = new GetChatResponseProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OpenChatRequestProto$Type extends MessageType<OpenChatRequestProto> {
    constructor() {
        super("OpenChatRequestProto", [
            { no: 1, name: "bot_id", kind: "enum", oneof: "type", T: () => ["ChatBotIdProto", ChatBotIdProto, "CHAT_BOT_ID_PROTO_"] },
            { no: 3, name: "with_user_message", kind: "message", oneof: "type", T: () => OpenChatWithUserMessageProto }
        ]);
    }
    create(value?: PartialMessage<OpenChatRequestProto>): OpenChatRequestProto {
        const message = { type: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<OpenChatRequestProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OpenChatRequestProto): OpenChatRequestProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ChatBotIdProto bot_id */ 1:
                    message.type = {
                        oneofKind: "botId",
                        botId: reader.int32()
                    };
                    break;
                case /* OpenChatWithUserMessageProto with_user_message */ 3:
                    message.type = {
                        oneofKind: "withUserMessage",
                        withUserMessage: OpenChatWithUserMessageProto.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).withUserMessage)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OpenChatRequestProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* ChatBotIdProto bot_id = 1; */
        if (message.type.oneofKind === "botId")
            writer.tag(1, WireType.Varint).int32(message.type.botId);
        /* OpenChatWithUserMessageProto with_user_message = 3; */
        if (message.type.oneofKind === "withUserMessage")
            OpenChatWithUserMessageProto.internalBinaryWrite(message.type.withUserMessage, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message OpenChatRequestProto
 */
export const OpenChatRequestProto = new OpenChatRequestProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OpenChatResponseHeaderProto$Type extends MessageType<OpenChatResponseHeaderProto> {
    constructor() {
        super("OpenChatResponseHeaderProto", [
            { no: 1, name: "messages", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ChatMessageProto },
            { no: 2, name: "streamed_message_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "bot_id", kind: "enum", T: () => ["ChatBotIdProto", ChatBotIdProto, "CHAT_BOT_ID_PROTO_"] }
        ]);
    }
    create(value?: PartialMessage<OpenChatResponseHeaderProto>): OpenChatResponseHeaderProto {
        const message = { messages: [], streamedMessageId: "", botId: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<OpenChatResponseHeaderProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OpenChatResponseHeaderProto): OpenChatResponseHeaderProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated ChatMessageProto messages */ 1:
                    message.messages.push(ChatMessageProto.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string streamed_message_id */ 2:
                    message.streamedMessageId = reader.string();
                    break;
                case /* ChatBotIdProto bot_id */ 3:
                    message.botId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OpenChatResponseHeaderProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated ChatMessageProto messages = 1; */
        for (let i = 0; i < message.messages.length; i++)
            ChatMessageProto.internalBinaryWrite(message.messages[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string streamed_message_id = 2; */
        if (message.streamedMessageId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.streamedMessageId);
        /* ChatBotIdProto bot_id = 3; */
        if (message.botId !== 0)
            writer.tag(3, WireType.Varint).int32(message.botId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message OpenChatResponseHeaderProto
 */
export const OpenChatResponseHeaderProto = new OpenChatResponseHeaderProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChatMessageProto$Type extends MessageType<ChatMessageProto> {
    constructor() {
        super("ChatMessageProto", [
            { no: 1, name: "message_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "parent_message_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "created_at", kind: "message", T: () => Timestamp },
            { no: 4, name: "assistant", kind: "message", oneof: "type", T: () => ChatAssistantMessageProto },
            { no: 5, name: "user", kind: "message", oneof: "type", T: () => ChatUserMessageProto }
        ]);
    }
    create(value?: PartialMessage<ChatMessageProto>): ChatMessageProto {
        const message = { messageId: "", parentMessageId: "", type: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChatMessageProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChatMessageProto): ChatMessageProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string message_id */ 1:
                    message.messageId = reader.string();
                    break;
                case /* string parent_message_id */ 2:
                    message.parentMessageId = reader.string();
                    break;
                case /* google.protobuf.Timestamp created_at */ 3:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* ChatAssistantMessageProto assistant */ 4:
                    message.type = {
                        oneofKind: "assistant",
                        assistant: ChatAssistantMessageProto.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).assistant)
                    };
                    break;
                case /* ChatUserMessageProto user */ 5:
                    message.type = {
                        oneofKind: "user",
                        user: ChatUserMessageProto.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).user)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChatMessageProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string message_id = 1; */
        if (message.messageId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.messageId);
        /* string parent_message_id = 2; */
        if (message.parentMessageId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.parentMessageId);
        /* google.protobuf.Timestamp created_at = 3; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* ChatAssistantMessageProto assistant = 4; */
        if (message.type.oneofKind === "assistant")
            ChatAssistantMessageProto.internalBinaryWrite(message.type.assistant, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* ChatUserMessageProto user = 5; */
        if (message.type.oneofKind === "user")
            ChatUserMessageProto.internalBinaryWrite(message.type.user, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ChatMessageProto
 */
export const ChatMessageProto = new ChatMessageProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChatAssistantMessageDeltaProto$Type extends MessageType<ChatAssistantMessageDeltaProto> {
    constructor() {
        super("ChatAssistantMessageDeltaProto", [
            { no: 1, name: "text_delta", kind: "scalar", oneof: "delta", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "activity", kind: "message", oneof: "delta", T: () => ChatActivityIntroProto }
        ]);
    }
    create(value?: PartialMessage<ChatAssistantMessageDeltaProto>): ChatAssistantMessageDeltaProto {
        const message = { delta: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChatAssistantMessageDeltaProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChatAssistantMessageDeltaProto): ChatAssistantMessageDeltaProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string text_delta */ 1:
                    message.delta = {
                        oneofKind: "textDelta",
                        textDelta: reader.string()
                    };
                    break;
                case /* ChatActivityIntroProto activity */ 2:
                    message.delta = {
                        oneofKind: "activity",
                        activity: ChatActivityIntroProto.internalBinaryRead(reader, reader.uint32(), options, (message.delta as any).activity)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChatAssistantMessageDeltaProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string text_delta = 1; */
        if (message.delta.oneofKind === "textDelta")
            writer.tag(1, WireType.LengthDelimited).string(message.delta.textDelta);
        /* ChatActivityIntroProto activity = 2; */
        if (message.delta.oneofKind === "activity")
            ChatActivityIntroProto.internalBinaryWrite(message.delta.activity, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ChatAssistantMessageDeltaProto
 */
export const ChatAssistantMessageDeltaProto = new ChatAssistantMessageDeltaProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChatAssistantMessageProto$Type extends MessageType<ChatAssistantMessageProto> {
    constructor() {
        super("ChatAssistantMessageProto", [
            { no: 1, name: "blocks", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ChatAssistantMessageBlockProto }
        ]);
    }
    create(value?: PartialMessage<ChatAssistantMessageProto>): ChatAssistantMessageProto {
        const message = { blocks: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChatAssistantMessageProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChatAssistantMessageProto): ChatAssistantMessageProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated ChatAssistantMessageBlockProto blocks */ 1:
                    message.blocks.push(ChatAssistantMessageBlockProto.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChatAssistantMessageProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated ChatAssistantMessageBlockProto blocks = 1; */
        for (let i = 0; i < message.blocks.length; i++)
            ChatAssistantMessageBlockProto.internalBinaryWrite(message.blocks[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ChatAssistantMessageProto
 */
export const ChatAssistantMessageProto = new ChatAssistantMessageProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChatAssistantMessageBlockProto$Type extends MessageType<ChatAssistantMessageBlockProto> {
    constructor() {
        super("ChatAssistantMessageBlockProto", [
            { no: 1, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "activities", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ChatActivityIntroProto }
        ]);
    }
    create(value?: PartialMessage<ChatAssistantMessageBlockProto>): ChatAssistantMessageBlockProto {
        const message = { text: "", activities: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChatAssistantMessageBlockProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChatAssistantMessageBlockProto): ChatAssistantMessageBlockProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string text */ 1:
                    message.text = reader.string();
                    break;
                case /* repeated ChatActivityIntroProto activities */ 2:
                    message.activities.push(ChatActivityIntroProto.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChatAssistantMessageBlockProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string text = 1; */
        if (message.text !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.text);
        /* repeated ChatActivityIntroProto activities = 2; */
        for (let i = 0; i < message.activities.length; i++)
            ChatActivityIntroProto.internalBinaryWrite(message.activities[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ChatAssistantMessageBlockProto
 */
export const ChatAssistantMessageBlockProto = new ChatAssistantMessageBlockProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChatActivityIntroProto$Type extends MessageType<ChatActivityIntroProto> {
    constructor() {
        super("ChatActivityIntroProto", [
            { no: 1, name: "activity_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "display_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ChatActivityIntroProto>): ChatActivityIntroProto {
        const message = { activityId: "", displayName: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChatActivityIntroProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChatActivityIntroProto): ChatActivityIntroProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string activity_id */ 1:
                    message.activityId = reader.string();
                    break;
                case /* string display_name */ 2:
                    message.displayName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChatActivityIntroProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string activity_id = 1; */
        if (message.activityId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.activityId);
        /* string display_name = 2; */
        if (message.displayName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.displayName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ChatActivityIntroProto
 */
export const ChatActivityIntroProto = new ChatActivityIntroProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OpenChatWithUserMessageProto$Type extends MessageType<OpenChatWithUserMessageProto> {
    constructor() {
        super("OpenChatWithUserMessageProto", [
            { no: 1, name: "parent_message_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "user_message", kind: "message", T: () => ChatUserMessageProto }
        ]);
    }
    create(value?: PartialMessage<OpenChatWithUserMessageProto>): OpenChatWithUserMessageProto {
        const message = { parentMessageId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<OpenChatWithUserMessageProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OpenChatWithUserMessageProto): OpenChatWithUserMessageProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string parent_message_id */ 1:
                    message.parentMessageId = reader.string();
                    break;
                case /* ChatUserMessageProto user_message */ 2:
                    message.userMessage = ChatUserMessageProto.internalBinaryRead(reader, reader.uint32(), options, message.userMessage);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OpenChatWithUserMessageProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string parent_message_id = 1; */
        if (message.parentMessageId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.parentMessageId);
        /* ChatUserMessageProto user_message = 2; */
        if (message.userMessage)
            ChatUserMessageProto.internalBinaryWrite(message.userMessage, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message OpenChatWithUserMessageProto
 */
export const OpenChatWithUserMessageProto = new OpenChatWithUserMessageProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChatUserMessageProto$Type extends MessageType<ChatUserMessageProto> {
    constructor() {
        super("ChatUserMessageProto", [
            { no: 1, name: "text_input", kind: "message", oneof: "type", T: () => ChatUserTextInputProto },
            { no: 3, name: "activity_id", kind: "scalar", oneof: "type", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "activities_for_story_id", kind: "scalar", oneof: "type", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ChatUserMessageProto>): ChatUserMessageProto {
        const message = { type: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChatUserMessageProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChatUserMessageProto): ChatUserMessageProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ChatUserTextInputProto text_input */ 1:
                    message.type = {
                        oneofKind: "textInput",
                        textInput: ChatUserTextInputProto.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).textInput)
                    };
                    break;
                case /* string activity_id */ 3:
                    message.type = {
                        oneofKind: "activityId",
                        activityId: reader.string()
                    };
                    break;
                case /* string activities_for_story_id */ 2:
                    message.type = {
                        oneofKind: "activitiesForStoryId",
                        activitiesForStoryId: reader.string()
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChatUserMessageProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* ChatUserTextInputProto text_input = 1; */
        if (message.type.oneofKind === "textInput")
            ChatUserTextInputProto.internalBinaryWrite(message.type.textInput, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string activity_id = 3; */
        if (message.type.oneofKind === "activityId")
            writer.tag(3, WireType.LengthDelimited).string(message.type.activityId);
        /* string activities_for_story_id = 2; */
        if (message.type.oneofKind === "activitiesForStoryId")
            writer.tag(2, WireType.LengthDelimited).string(message.type.activitiesForStoryId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ChatUserMessageProto
 */
export const ChatUserMessageProto = new ChatUserMessageProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChatUserTextInputProto$Type extends MessageType<ChatUserTextInputProto> {
    constructor() {
        super("ChatUserTextInputProto", [
            { no: 1, name: "bot_id", kind: "enum", T: () => ["ChatBotIdProto", ChatBotIdProto, "CHAT_BOT_ID_PROTO_"] },
            { no: 2, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ChatUserTextInputProto>): ChatUserTextInputProto {
        const message = { botId: 0, text: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChatUserTextInputProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChatUserTextInputProto): ChatUserTextInputProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ChatBotIdProto bot_id */ 1:
                    message.botId = reader.int32();
                    break;
                case /* string text */ 2:
                    message.text = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChatUserTextInputProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* ChatBotIdProto bot_id = 1; */
        if (message.botId !== 0)
            writer.tag(1, WireType.Varint).int32(message.botId);
        /* string text = 2; */
        if (message.text !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.text);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ChatUserTextInputProto
 */
export const ChatUserTextInputProto = new ChatUserTextInputProto$Type();
