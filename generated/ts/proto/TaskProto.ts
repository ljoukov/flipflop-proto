/* eslint-disable */
// @generated by protobuf-ts 2.9.4 with parameter eslint_disable,long_type_string,ts_nocheck
// @generated from protobuf file "TaskProto.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "./google/protobuf/timestamp";
/**
 * @generated from protobuf message TaskProto
 */
export interface TaskProto {
    /**
     * @generated from protobuf field: string task_id = 1;
     */
    taskId: string;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp created_at = 2;
     */
    createdAt?: Timestamp;
    /**
     * @generated from protobuf oneof: type
     */
    type: {
        oneofKind: "generatePodcast";
        /**
         * @generated from protobuf field: GeneratePodcastTaskProto generate_podcast = 10;
         */
        generatePodcast: GeneratePodcastTaskProto;
    } | {
        oneofKind: "generateSuggestions";
        /**
         * @generated from protobuf field: GeneratePodcastSuggestionsTaskProto generate_suggestions = 11;
         */
        generateSuggestions: GeneratePodcastSuggestionsTaskProto;
    } | {
        oneofKind: "generateStory";
        /**
         * @generated from protobuf field: GeneratePodcastStoryTaskProto generate_story = 12;
         */
        generateStory: GeneratePodcastStoryTaskProto;
    } | {
        oneofKind: "finalizeSuggestions";
        /**
         * @generated from protobuf field: FinalizeSuggestionsTaskProto finalize_suggestions = 13;
         */
        finalizeSuggestions: FinalizeSuggestionsTaskProto;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message GeneratePodcastTaskProto
 */
export interface GeneratePodcastTaskProto {
    /**
     * @generated from protobuf field: string podcast_id = 1;
     */
    podcastId: string;
}
/**
 * @generated from protobuf message GeneratePodcastSuggestionsTaskProto
 */
export interface GeneratePodcastSuggestionsTaskProto {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
}
/**
 * @generated from protobuf message GeneratePodcastStoryTaskProto
 */
export interface GeneratePodcastStoryTaskProto {
    /**
     * @generated from protobuf field: string story_id = 1;
     */
    storyId: string;
}
/**
 * @generated from protobuf message FinalizeSuggestionsTaskProto
 */
export interface FinalizeSuggestionsTaskProto {
    /**
     * @generated from protobuf field: string suggestions_id = 1;
     */
    suggestionsId: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class TaskProto$Type extends MessageType<TaskProto> {
    constructor() {
        super("TaskProto", [
            { no: 1, name: "task_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "created_at", kind: "message", T: () => Timestamp },
            { no: 10, name: "generate_podcast", kind: "message", oneof: "type", T: () => GeneratePodcastTaskProto },
            { no: 11, name: "generate_suggestions", kind: "message", oneof: "type", T: () => GeneratePodcastSuggestionsTaskProto },
            { no: 12, name: "generate_story", kind: "message", oneof: "type", T: () => GeneratePodcastStoryTaskProto },
            { no: 13, name: "finalize_suggestions", kind: "message", oneof: "type", T: () => FinalizeSuggestionsTaskProto }
        ]);
    }
    create(value?: PartialMessage<TaskProto>): TaskProto {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.taskId = "";
        message.type = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<TaskProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TaskProto): TaskProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string task_id */ 1:
                    message.taskId = reader.string();
                    break;
                case /* google.protobuf.Timestamp created_at */ 2:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* GeneratePodcastTaskProto generate_podcast */ 10:
                    message.type = {
                        oneofKind: "generatePodcast",
                        generatePodcast: GeneratePodcastTaskProto.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).generatePodcast)
                    };
                    break;
                case /* GeneratePodcastSuggestionsTaskProto generate_suggestions */ 11:
                    message.type = {
                        oneofKind: "generateSuggestions",
                        generateSuggestions: GeneratePodcastSuggestionsTaskProto.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).generateSuggestions)
                    };
                    break;
                case /* GeneratePodcastStoryTaskProto generate_story */ 12:
                    message.type = {
                        oneofKind: "generateStory",
                        generateStory: GeneratePodcastStoryTaskProto.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).generateStory)
                    };
                    break;
                case /* FinalizeSuggestionsTaskProto finalize_suggestions */ 13:
                    message.type = {
                        oneofKind: "finalizeSuggestions",
                        finalizeSuggestions: FinalizeSuggestionsTaskProto.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).finalizeSuggestions)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TaskProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string task_id = 1; */
        if (message.taskId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.taskId);
        /* google.protobuf.Timestamp created_at = 2; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* GeneratePodcastTaskProto generate_podcast = 10; */
        if (message.type.oneofKind === "generatePodcast")
            GeneratePodcastTaskProto.internalBinaryWrite(message.type.generatePodcast, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* GeneratePodcastSuggestionsTaskProto generate_suggestions = 11; */
        if (message.type.oneofKind === "generateSuggestions")
            GeneratePodcastSuggestionsTaskProto.internalBinaryWrite(message.type.generateSuggestions, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* GeneratePodcastStoryTaskProto generate_story = 12; */
        if (message.type.oneofKind === "generateStory")
            GeneratePodcastStoryTaskProto.internalBinaryWrite(message.type.generateStory, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* FinalizeSuggestionsTaskProto finalize_suggestions = 13; */
        if (message.type.oneofKind === "finalizeSuggestions")
            FinalizeSuggestionsTaskProto.internalBinaryWrite(message.type.finalizeSuggestions, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TaskProto
 */
export const TaskProto = new TaskProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GeneratePodcastTaskProto$Type extends MessageType<GeneratePodcastTaskProto> {
    constructor() {
        super("GeneratePodcastTaskProto", [
            { no: 1, name: "podcast_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GeneratePodcastTaskProto>): GeneratePodcastTaskProto {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.podcastId = "";
        if (value !== undefined)
            reflectionMergePartial<GeneratePodcastTaskProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GeneratePodcastTaskProto): GeneratePodcastTaskProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string podcast_id */ 1:
                    message.podcastId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GeneratePodcastTaskProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string podcast_id = 1; */
        if (message.podcastId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.podcastId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GeneratePodcastTaskProto
 */
export const GeneratePodcastTaskProto = new GeneratePodcastTaskProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GeneratePodcastSuggestionsTaskProto$Type extends MessageType<GeneratePodcastSuggestionsTaskProto> {
    constructor() {
        super("GeneratePodcastSuggestionsTaskProto", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GeneratePodcastSuggestionsTaskProto>): GeneratePodcastSuggestionsTaskProto {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userId = "";
        if (value !== undefined)
            reflectionMergePartial<GeneratePodcastSuggestionsTaskProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GeneratePodcastSuggestionsTaskProto): GeneratePodcastSuggestionsTaskProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GeneratePodcastSuggestionsTaskProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GeneratePodcastSuggestionsTaskProto
 */
export const GeneratePodcastSuggestionsTaskProto = new GeneratePodcastSuggestionsTaskProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GeneratePodcastStoryTaskProto$Type extends MessageType<GeneratePodcastStoryTaskProto> {
    constructor() {
        super("GeneratePodcastStoryTaskProto", [
            { no: 1, name: "story_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GeneratePodcastStoryTaskProto>): GeneratePodcastStoryTaskProto {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.storyId = "";
        if (value !== undefined)
            reflectionMergePartial<GeneratePodcastStoryTaskProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GeneratePodcastStoryTaskProto): GeneratePodcastStoryTaskProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string story_id */ 1:
                    message.storyId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GeneratePodcastStoryTaskProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string story_id = 1; */
        if (message.storyId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.storyId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GeneratePodcastStoryTaskProto
 */
export const GeneratePodcastStoryTaskProto = new GeneratePodcastStoryTaskProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FinalizeSuggestionsTaskProto$Type extends MessageType<FinalizeSuggestionsTaskProto> {
    constructor() {
        super("FinalizeSuggestionsTaskProto", [
            { no: 1, name: "suggestions_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<FinalizeSuggestionsTaskProto>): FinalizeSuggestionsTaskProto {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.suggestionsId = "";
        if (value !== undefined)
            reflectionMergePartial<FinalizeSuggestionsTaskProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FinalizeSuggestionsTaskProto): FinalizeSuggestionsTaskProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string suggestions_id */ 1:
                    message.suggestionsId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FinalizeSuggestionsTaskProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string suggestions_id = 1; */
        if (message.suggestionsId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.suggestionsId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message FinalizeSuggestionsTaskProto
 */
export const FinalizeSuggestionsTaskProto = new FinalizeSuggestionsTaskProto$Type();
