/* eslint-disable */
// @generated by protobuf-ts 2.9.4 with parameter eslint_disable,long_type_string,ts_nocheck
// @generated from protobuf file "CommonProto.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message UserAgentProto
 */
export interface UserAgentProto {
    /**
     * @generated from protobuf field: string user_agent = 1;
     */
    userAgent: string;
    /**
     * @generated from protobuf field: DeviceProto device = 2;
     */
    device?: DeviceProto;
    /**
     * @generated from protobuf field: LocaleProto locale = 3;
     */
    locale?: LocaleProto;
    /**
     * @generated from protobuf field: LocationProto location = 4;
     */
    location?: LocationProto;
}
/**
 * @generated from protobuf message LocaleProto
 */
export interface LocaleProto {
    /**
     * @generated from protobuf field: string language = 1;
     */
    language: string;
    /**
     * @generated from protobuf field: string country = 2;
     */
    country: string;
    /**
     * @generated from protobuf field: string time_zone = 3;
     */
    timeZone: string;
}
/**
 * @generated from protobuf message LocationProto
 */
export interface LocationProto {
    /**
     * @generated from protobuf field: string region_code = 1;
     */
    regionCode: string;
    /**
     * @generated from protobuf field: string country = 2;
     */
    country: string;
    /**
     * @generated from protobuf field: string city = 3;
     */
    city: string;
    /**
     * @generated from protobuf field: string time_zone = 4;
     */
    timeZone: string;
    /**
     * @generated from protobuf field: double latitude = 5;
     */
    latitude: number;
    /**
     * @generated from protobuf field: double longitude = 6;
     */
    longitude: number;
}
/**
 * @generated from protobuf message DeviceProto
 */
export interface DeviceProto {
    /**
     * @generated from protobuf oneof: type
     */
    type: {
        oneofKind: "ios";
        /**
         * @generated from protobuf field: IOSDeviceProto ios = 1;
         */
        ios: IOSDeviceProto;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message IOSDeviceProto
 */
export interface IOSDeviceProto {
    /**
     * @generated from protobuf field: string device_model = 1;
     */
    deviceModel: string;
    /**
     * @generated from protobuf field: string device_identifier = 2;
     */
    deviceIdentifier: string;
    /**
     * @generated from protobuf field: bool is_simulator = 3;
     */
    isSimulator: boolean;
    /**
     * @generated from protobuf field: string os_name = 4;
     */
    osName: string;
    /**
     * @generated from protobuf field: string os_version = 5;
     */
    osVersion: string;
    /**
     * @generated from protobuf field: string app_bundle_name = 6;
     */
    appBundleName: string;
    /**
     * @generated from protobuf field: string app_bundle_version = 7;
     */
    appBundleVersion: string;
    /**
     * @generated from protobuf field: string app_build_number = 8;
     */
    appBuildNumber: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class UserAgentProto$Type extends MessageType<UserAgentProto> {
    constructor() {
        super("UserAgentProto", [
            { no: 1, name: "user_agent", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "device", kind: "message", T: () => DeviceProto },
            { no: 3, name: "locale", kind: "message", T: () => LocaleProto },
            { no: 4, name: "location", kind: "message", T: () => LocationProto }
        ]);
    }
    create(value?: PartialMessage<UserAgentProto>): UserAgentProto {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userAgent = "";
        if (value !== undefined)
            reflectionMergePartial<UserAgentProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UserAgentProto): UserAgentProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_agent */ 1:
                    message.userAgent = reader.string();
                    break;
                case /* DeviceProto device */ 2:
                    message.device = DeviceProto.internalBinaryRead(reader, reader.uint32(), options, message.device);
                    break;
                case /* LocaleProto locale */ 3:
                    message.locale = LocaleProto.internalBinaryRead(reader, reader.uint32(), options, message.locale);
                    break;
                case /* LocationProto location */ 4:
                    message.location = LocationProto.internalBinaryRead(reader, reader.uint32(), options, message.location);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UserAgentProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_agent = 1; */
        if (message.userAgent !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userAgent);
        /* DeviceProto device = 2; */
        if (message.device)
            DeviceProto.internalBinaryWrite(message.device, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* LocaleProto locale = 3; */
        if (message.locale)
            LocaleProto.internalBinaryWrite(message.locale, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* LocationProto location = 4; */
        if (message.location)
            LocationProto.internalBinaryWrite(message.location, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message UserAgentProto
 */
export const UserAgentProto = new UserAgentProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LocaleProto$Type extends MessageType<LocaleProto> {
    constructor() {
        super("LocaleProto", [
            { no: 1, name: "language", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "country", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "time_zone", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LocaleProto>): LocaleProto {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.language = "";
        message.country = "";
        message.timeZone = "";
        if (value !== undefined)
            reflectionMergePartial<LocaleProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LocaleProto): LocaleProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string language */ 1:
                    message.language = reader.string();
                    break;
                case /* string country */ 2:
                    message.country = reader.string();
                    break;
                case /* string time_zone */ 3:
                    message.timeZone = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LocaleProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string language = 1; */
        if (message.language !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.language);
        /* string country = 2; */
        if (message.country !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.country);
        /* string time_zone = 3; */
        if (message.timeZone !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.timeZone);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LocaleProto
 */
export const LocaleProto = new LocaleProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LocationProto$Type extends MessageType<LocationProto> {
    constructor() {
        super("LocationProto", [
            { no: 1, name: "region_code", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "country", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "city", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "time_zone", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "latitude", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 6, name: "longitude", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ }
        ]);
    }
    create(value?: PartialMessage<LocationProto>): LocationProto {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.regionCode = "";
        message.country = "";
        message.city = "";
        message.timeZone = "";
        message.latitude = 0;
        message.longitude = 0;
        if (value !== undefined)
            reflectionMergePartial<LocationProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LocationProto): LocationProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string region_code */ 1:
                    message.regionCode = reader.string();
                    break;
                case /* string country */ 2:
                    message.country = reader.string();
                    break;
                case /* string city */ 3:
                    message.city = reader.string();
                    break;
                case /* string time_zone */ 4:
                    message.timeZone = reader.string();
                    break;
                case /* double latitude */ 5:
                    message.latitude = reader.double();
                    break;
                case /* double longitude */ 6:
                    message.longitude = reader.double();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LocationProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string region_code = 1; */
        if (message.regionCode !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.regionCode);
        /* string country = 2; */
        if (message.country !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.country);
        /* string city = 3; */
        if (message.city !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.city);
        /* string time_zone = 4; */
        if (message.timeZone !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.timeZone);
        /* double latitude = 5; */
        if (message.latitude !== 0)
            writer.tag(5, WireType.Bit64).double(message.latitude);
        /* double longitude = 6; */
        if (message.longitude !== 0)
            writer.tag(6, WireType.Bit64).double(message.longitude);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LocationProto
 */
export const LocationProto = new LocationProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeviceProto$Type extends MessageType<DeviceProto> {
    constructor() {
        super("DeviceProto", [
            { no: 1, name: "ios", kind: "message", oneof: "type", T: () => IOSDeviceProto }
        ]);
    }
    create(value?: PartialMessage<DeviceProto>): DeviceProto {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.type = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<DeviceProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeviceProto): DeviceProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* IOSDeviceProto ios */ 1:
                    message.type = {
                        oneofKind: "ios",
                        ios: IOSDeviceProto.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).ios)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeviceProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* IOSDeviceProto ios = 1; */
        if (message.type.oneofKind === "ios")
            IOSDeviceProto.internalBinaryWrite(message.type.ios, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DeviceProto
 */
export const DeviceProto = new DeviceProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IOSDeviceProto$Type extends MessageType<IOSDeviceProto> {
    constructor() {
        super("IOSDeviceProto", [
            { no: 1, name: "device_model", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "device_identifier", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "is_simulator", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "os_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "os_version", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "app_bundle_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "app_bundle_version", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "app_build_number", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<IOSDeviceProto>): IOSDeviceProto {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.deviceModel = "";
        message.deviceIdentifier = "";
        message.isSimulator = false;
        message.osName = "";
        message.osVersion = "";
        message.appBundleName = "";
        message.appBundleVersion = "";
        message.appBuildNumber = "";
        if (value !== undefined)
            reflectionMergePartial<IOSDeviceProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IOSDeviceProto): IOSDeviceProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string device_model */ 1:
                    message.deviceModel = reader.string();
                    break;
                case /* string device_identifier */ 2:
                    message.deviceIdentifier = reader.string();
                    break;
                case /* bool is_simulator */ 3:
                    message.isSimulator = reader.bool();
                    break;
                case /* string os_name */ 4:
                    message.osName = reader.string();
                    break;
                case /* string os_version */ 5:
                    message.osVersion = reader.string();
                    break;
                case /* string app_bundle_name */ 6:
                    message.appBundleName = reader.string();
                    break;
                case /* string app_bundle_version */ 7:
                    message.appBundleVersion = reader.string();
                    break;
                case /* string app_build_number */ 8:
                    message.appBuildNumber = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IOSDeviceProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string device_model = 1; */
        if (message.deviceModel !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.deviceModel);
        /* string device_identifier = 2; */
        if (message.deviceIdentifier !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.deviceIdentifier);
        /* bool is_simulator = 3; */
        if (message.isSimulator !== false)
            writer.tag(3, WireType.Varint).bool(message.isSimulator);
        /* string os_name = 4; */
        if (message.osName !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.osName);
        /* string os_version = 5; */
        if (message.osVersion !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.osVersion);
        /* string app_bundle_name = 6; */
        if (message.appBundleName !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.appBundleName);
        /* string app_bundle_version = 7; */
        if (message.appBundleVersion !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.appBundleVersion);
        /* string app_build_number = 8; */
        if (message.appBuildNumber !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.appBuildNumber);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IOSDeviceProto
 */
export const IOSDeviceProto = new IOSDeviceProto$Type();
