/* eslint-disable */
// @generated by protobuf-ts 2.9.1 with parameter eslint_disable,long_type_string,ts_nocheck
// @generated from protobuf file "StackProto.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "./google/protobuf/timestamp";
import { Duration } from "./google/protobuf/duration";
/**
 * @generated from protobuf message StackStreamApiRequestProto
 */
export interface StackStreamApiRequestProto {
    /**
     * @generated from protobuf field: string encoded_user_auth = 1;
     */
    encodedUserAuth: string;
    /**
     * @generated from protobuf oneof: request
     */
    request: {
        oneofKind: "create";
        /**
         * @generated from protobuf field: CreateStacksRequestProto create = 2;
         */
        create: CreateStacksRequestProto;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message StackStreamApiResponseHeaderProto
 */
export interface StackStreamApiResponseHeaderProto {
    /**
     * If present the token was refreshed and the client should use this new one
     * from now onwards.
     *
     * @generated from protobuf field: string refreshed_encoded_user_auth = 1;
     */
    refreshedEncodedUserAuth: string;
    /**
     * @generated from protobuf oneof: header
     */
    header: {
        oneofKind: "createHeader";
        /**
         * @generated from protobuf field: CreateStacksResponseHeaderProto create_header = 2;
         */
        createHeader: CreateStacksResponseHeaderProto;
    } | {
        oneofKind: undefined;
    };
    /**
     * @generated from protobuf field: map<string, google.protobuf.Duration> latencies = 100;
     */
    latencies: {
        [key: string]: Duration;
    };
}
/**
 * @generated from protobuf message StackStreamApiResponseDeltaProto
 */
export interface StackStreamApiResponseDeltaProto {
    /**
     * @generated from protobuf oneof: response_delta
     */
    responseDelta: {
        oneofKind: "createDelta";
        /**
         * @generated from protobuf field: CreateStacksResponseDeltaProto create_delta = 1;
         */
        createDelta: CreateStacksResponseDeltaProto;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message CreateStacksRequestProto
 */
export interface CreateStacksRequestProto {
    /**
     * @generated from protobuf field: string prompt = 1;
     */
    prompt: string;
}
/**
 * @generated from protobuf message CreateStacksResponseHeaderProto
 */
export interface CreateStacksResponseHeaderProto {
}
/**
 * @generated from protobuf message CreateStacksResponseDeltaProto
 */
export interface CreateStacksResponseDeltaProto {
    /**
     * @generated from protobuf field: StackItemProto stack = 1;
     */
    stack?: StackItemProto;
}
/**
 * Presentable as a two-sided card.
 *
 * @generated from protobuf message StackItemProto
 */
export interface StackItemProto {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string created_by = 2;
     */
    createdBy: string;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp created_at = 3;
     */
    createdAt?: Timestamp;
    /**
     * @generated from protobuf oneof: type
     */
    type: {
        oneofKind: "knowledge";
        /**
         * @generated from protobuf field: KnowledgeItemProto knowledge = 10;
         */
        knowledge: KnowledgeItemProto;
    } | {
        oneofKind: "question";
        /**
         * @generated from protobuf field: QuestionItemProto question = 11;
         */
        question: QuestionItemProto;
    } | {
        oneofKind: "multipleChoice";
        /**
         * @generated from protobuf field: MultipleChoiceItemProto multiple_choice = 12;
         */
        multipleChoice: MultipleChoiceItemProto;
    } | {
        oneofKind: "poll";
        /**
         * @generated from protobuf field: PollItemProto poll = 13;
         */
        poll: PollItemProto;
    } | {
        oneofKind: undefined;
    };
}
/**
 * No user input assumed
 *
 * @generated from protobuf message KnowledgeItemProto
 */
export interface KnowledgeItemProto {
    /**
     * @generated from protobuf field: string title = 1;
     */
    title: string;
    /**
     * @generated from protobuf field: string title_emoji = 2;
     */
    titleEmoji: string;
    /**
     * @generated from protobuf field: string text = 3;
     */
    text: string;
    /**
     * Whole page explanation
     *
     * @generated from protobuf field: string explanation = 4;
     */
    explanation: string;
}
/**
 * Free text user input
 *
 * @generated from protobuf message QuestionItemProto
 */
export interface QuestionItemProto {
    /**
     * @generated from protobuf field: string title = 1;
     */
    title: string;
    /**
     * @generated from protobuf field: string title_emoji = 2;
     */
    titleEmoji: string;
    /**
     * @generated from protobuf field: string question = 3;
     */
    question: string;
    /**
     * Whole page explanation
     *
     * @generated from protobuf field: string answer = 4;
     */
    answer: string;
}
/**
 * 2: True/False, 3: A/B/C or 4: 1/2/3/4 user input
 *
 * @generated from protobuf message MultipleChoiceItemProto
 */
export interface MultipleChoiceItemProto {
    /**
     * @generated from protobuf field: string title = 1;
     */
    title: string;
    /**
     * @generated from protobuf field: string title_emoji = 2;
     */
    titleEmoji: string;
    /**
     * @generated from protobuf field: string question = 3;
     */
    question: string;
    /**
     * @generated from protobuf field: repeated MultipleChoiceOptionProto options = 4;
     */
    options: MultipleChoiceOptionProto[];
    /**
     * @generated from protobuf field: int32 correct_answer_index = 5;
     */
    correctAnswerIndex: number;
    /**
     * Short hint for the whole question
     *
     * @generated from protobuf field: string hint = 6;
     */
    hint: string;
    /**
     * Whole page explanation
     *
     * @generated from protobuf field: string explanation = 7;
     */
    explanation: string;
}
/**
 * @generated from protobuf message MultipleChoiceOptionProto
 */
export interface MultipleChoiceOptionProto {
    /**
     * Could be a label like True/False or a short sentence
     *
     * @generated from protobuf field: string text = 1;
     */
    text: string;
    /**
     * Short text to show if this answer is selected.
     *
     * @generated from protobuf field: string hint = 2;
     */
    hint: string;
}
/**
 * 2, 3 or 4 options to vote for
 *
 * @generated from protobuf message PollItemProto
 */
export interface PollItemProto {
    /**
     * @generated from protobuf field: string title = 1;
     */
    title: string;
    /**
     * @generated from protobuf field: string title_emoji = 2;
     */
    titleEmoji: string;
    /**
     * @generated from protobuf field: string question = 3;
     */
    question: string;
    /**
     * @generated from protobuf field: repeated PollOptionProto options = 4;
     */
    options: PollOptionProto[];
    /**
     * @generated from protobuf field: string commentary = 5;
     */
    commentary: string;
}
/**
 * @generated from protobuf message PollOptionProto
 */
export interface PollOptionProto {
    /**
     * @generated from protobuf field: string text = 1;
     */
    text: string;
    /**
     * Fraction of votes this option received
     *
     * @generated from protobuf field: float votes_frac = 2;
     */
    votesFrac: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class StackStreamApiRequestProto$Type extends MessageType<StackStreamApiRequestProto> {
    constructor() {
        super("StackStreamApiRequestProto", [
            { no: 1, name: "encoded_user_auth", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "create", kind: "message", oneof: "request", T: () => CreateStacksRequestProto }
        ]);
    }
    create(value?: PartialMessage<StackStreamApiRequestProto>): StackStreamApiRequestProto {
        const message = { encodedUserAuth: "", request: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StackStreamApiRequestProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StackStreamApiRequestProto): StackStreamApiRequestProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string encoded_user_auth */ 1:
                    message.encodedUserAuth = reader.string();
                    break;
                case /* CreateStacksRequestProto create */ 2:
                    message.request = {
                        oneofKind: "create",
                        create: CreateStacksRequestProto.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).create)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StackStreamApiRequestProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string encoded_user_auth = 1; */
        if (message.encodedUserAuth !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.encodedUserAuth);
        /* CreateStacksRequestProto create = 2; */
        if (message.request.oneofKind === "create")
            CreateStacksRequestProto.internalBinaryWrite(message.request.create, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message StackStreamApiRequestProto
 */
export const StackStreamApiRequestProto = new StackStreamApiRequestProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StackStreamApiResponseHeaderProto$Type extends MessageType<StackStreamApiResponseHeaderProto> {
    constructor() {
        super("StackStreamApiResponseHeaderProto", [
            { no: 1, name: "refreshed_encoded_user_auth", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "create_header", kind: "message", oneof: "header", T: () => CreateStacksResponseHeaderProto },
            { no: 100, name: "latencies", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => Duration } }
        ]);
    }
    create(value?: PartialMessage<StackStreamApiResponseHeaderProto>): StackStreamApiResponseHeaderProto {
        const message = { refreshedEncodedUserAuth: "", header: { oneofKind: undefined }, latencies: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StackStreamApiResponseHeaderProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StackStreamApiResponseHeaderProto): StackStreamApiResponseHeaderProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string refreshed_encoded_user_auth */ 1:
                    message.refreshedEncodedUserAuth = reader.string();
                    break;
                case /* CreateStacksResponseHeaderProto create_header */ 2:
                    message.header = {
                        oneofKind: "createHeader",
                        createHeader: CreateStacksResponseHeaderProto.internalBinaryRead(reader, reader.uint32(), options, (message.header as any).createHeader)
                    };
                    break;
                case /* map<string, google.protobuf.Duration> latencies */ 100:
                    this.binaryReadMap100(message.latencies, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap100(map: StackStreamApiResponseHeaderProto["latencies"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof StackStreamApiResponseHeaderProto["latencies"] | undefined, val: StackStreamApiResponseHeaderProto["latencies"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = Duration.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field StackStreamApiResponseHeaderProto.latencies");
            }
        }
        map[key ?? ""] = val ?? Duration.create();
    }
    internalBinaryWrite(message: StackStreamApiResponseHeaderProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string refreshed_encoded_user_auth = 1; */
        if (message.refreshedEncodedUserAuth !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.refreshedEncodedUserAuth);
        /* CreateStacksResponseHeaderProto create_header = 2; */
        if (message.header.oneofKind === "createHeader")
            CreateStacksResponseHeaderProto.internalBinaryWrite(message.header.createHeader, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* map<string, google.protobuf.Duration> latencies = 100; */
        for (let k of Object.keys(message.latencies)) {
            writer.tag(100, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            Duration.internalBinaryWrite(message.latencies[k], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message StackStreamApiResponseHeaderProto
 */
export const StackStreamApiResponseHeaderProto = new StackStreamApiResponseHeaderProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StackStreamApiResponseDeltaProto$Type extends MessageType<StackStreamApiResponseDeltaProto> {
    constructor() {
        super("StackStreamApiResponseDeltaProto", [
            { no: 1, name: "create_delta", kind: "message", oneof: "responseDelta", T: () => CreateStacksResponseDeltaProto }
        ]);
    }
    create(value?: PartialMessage<StackStreamApiResponseDeltaProto>): StackStreamApiResponseDeltaProto {
        const message = { responseDelta: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StackStreamApiResponseDeltaProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StackStreamApiResponseDeltaProto): StackStreamApiResponseDeltaProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* CreateStacksResponseDeltaProto create_delta */ 1:
                    message.responseDelta = {
                        oneofKind: "createDelta",
                        createDelta: CreateStacksResponseDeltaProto.internalBinaryRead(reader, reader.uint32(), options, (message.responseDelta as any).createDelta)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StackStreamApiResponseDeltaProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* CreateStacksResponseDeltaProto create_delta = 1; */
        if (message.responseDelta.oneofKind === "createDelta")
            CreateStacksResponseDeltaProto.internalBinaryWrite(message.responseDelta.createDelta, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message StackStreamApiResponseDeltaProto
 */
export const StackStreamApiResponseDeltaProto = new StackStreamApiResponseDeltaProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateStacksRequestProto$Type extends MessageType<CreateStacksRequestProto> {
    constructor() {
        super("CreateStacksRequestProto", [
            { no: 1, name: "prompt", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateStacksRequestProto>): CreateStacksRequestProto {
        const message = { prompt: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateStacksRequestProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateStacksRequestProto): CreateStacksRequestProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string prompt */ 1:
                    message.prompt = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateStacksRequestProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string prompt = 1; */
        if (message.prompt !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.prompt);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CreateStacksRequestProto
 */
export const CreateStacksRequestProto = new CreateStacksRequestProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateStacksResponseHeaderProto$Type extends MessageType<CreateStacksResponseHeaderProto> {
    constructor() {
        super("CreateStacksResponseHeaderProto", []);
    }
    create(value?: PartialMessage<CreateStacksResponseHeaderProto>): CreateStacksResponseHeaderProto {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateStacksResponseHeaderProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateStacksResponseHeaderProto): CreateStacksResponseHeaderProto {
        return target ?? this.create();
    }
    internalBinaryWrite(message: CreateStacksResponseHeaderProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CreateStacksResponseHeaderProto
 */
export const CreateStacksResponseHeaderProto = new CreateStacksResponseHeaderProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateStacksResponseDeltaProto$Type extends MessageType<CreateStacksResponseDeltaProto> {
    constructor() {
        super("CreateStacksResponseDeltaProto", [
            { no: 1, name: "stack", kind: "message", T: () => StackItemProto }
        ]);
    }
    create(value?: PartialMessage<CreateStacksResponseDeltaProto>): CreateStacksResponseDeltaProto {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateStacksResponseDeltaProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateStacksResponseDeltaProto): CreateStacksResponseDeltaProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* StackItemProto stack */ 1:
                    message.stack = StackItemProto.internalBinaryRead(reader, reader.uint32(), options, message.stack);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateStacksResponseDeltaProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* StackItemProto stack = 1; */
        if (message.stack)
            StackItemProto.internalBinaryWrite(message.stack, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CreateStacksResponseDeltaProto
 */
export const CreateStacksResponseDeltaProto = new CreateStacksResponseDeltaProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StackItemProto$Type extends MessageType<StackItemProto> {
    constructor() {
        super("StackItemProto", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "created_by", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "created_at", kind: "message", T: () => Timestamp },
            { no: 10, name: "knowledge", kind: "message", oneof: "type", T: () => KnowledgeItemProto },
            { no: 11, name: "question", kind: "message", oneof: "type", T: () => QuestionItemProto },
            { no: 12, name: "multiple_choice", kind: "message", oneof: "type", T: () => MultipleChoiceItemProto },
            { no: 13, name: "poll", kind: "message", oneof: "type", T: () => PollItemProto }
        ]);
    }
    create(value?: PartialMessage<StackItemProto>): StackItemProto {
        const message = { id: "", createdBy: "", type: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StackItemProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StackItemProto): StackItemProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string created_by */ 2:
                    message.createdBy = reader.string();
                    break;
                case /* google.protobuf.Timestamp created_at */ 3:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* KnowledgeItemProto knowledge */ 10:
                    message.type = {
                        oneofKind: "knowledge",
                        knowledge: KnowledgeItemProto.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).knowledge)
                    };
                    break;
                case /* QuestionItemProto question */ 11:
                    message.type = {
                        oneofKind: "question",
                        question: QuestionItemProto.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).question)
                    };
                    break;
                case /* MultipleChoiceItemProto multiple_choice */ 12:
                    message.type = {
                        oneofKind: "multipleChoice",
                        multipleChoice: MultipleChoiceItemProto.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).multipleChoice)
                    };
                    break;
                case /* PollItemProto poll */ 13:
                    message.type = {
                        oneofKind: "poll",
                        poll: PollItemProto.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).poll)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StackItemProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string created_by = 2; */
        if (message.createdBy !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.createdBy);
        /* google.protobuf.Timestamp created_at = 3; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* KnowledgeItemProto knowledge = 10; */
        if (message.type.oneofKind === "knowledge")
            KnowledgeItemProto.internalBinaryWrite(message.type.knowledge, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* QuestionItemProto question = 11; */
        if (message.type.oneofKind === "question")
            QuestionItemProto.internalBinaryWrite(message.type.question, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* MultipleChoiceItemProto multiple_choice = 12; */
        if (message.type.oneofKind === "multipleChoice")
            MultipleChoiceItemProto.internalBinaryWrite(message.type.multipleChoice, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* PollItemProto poll = 13; */
        if (message.type.oneofKind === "poll")
            PollItemProto.internalBinaryWrite(message.type.poll, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message StackItemProto
 */
export const StackItemProto = new StackItemProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class KnowledgeItemProto$Type extends MessageType<KnowledgeItemProto> {
    constructor() {
        super("KnowledgeItemProto", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "title_emoji", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "explanation", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<KnowledgeItemProto>): KnowledgeItemProto {
        const message = { title: "", titleEmoji: "", text: "", explanation: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<KnowledgeItemProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: KnowledgeItemProto): KnowledgeItemProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* string title_emoji */ 2:
                    message.titleEmoji = reader.string();
                    break;
                case /* string text */ 3:
                    message.text = reader.string();
                    break;
                case /* string explanation */ 4:
                    message.explanation = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: KnowledgeItemProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* string title_emoji = 2; */
        if (message.titleEmoji !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.titleEmoji);
        /* string text = 3; */
        if (message.text !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.text);
        /* string explanation = 4; */
        if (message.explanation !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.explanation);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message KnowledgeItemProto
 */
export const KnowledgeItemProto = new KnowledgeItemProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QuestionItemProto$Type extends MessageType<QuestionItemProto> {
    constructor() {
        super("QuestionItemProto", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "title_emoji", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "question", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "answer", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<QuestionItemProto>): QuestionItemProto {
        const message = { title: "", titleEmoji: "", question: "", answer: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QuestionItemProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QuestionItemProto): QuestionItemProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* string title_emoji */ 2:
                    message.titleEmoji = reader.string();
                    break;
                case /* string question */ 3:
                    message.question = reader.string();
                    break;
                case /* string answer */ 4:
                    message.answer = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QuestionItemProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* string title_emoji = 2; */
        if (message.titleEmoji !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.titleEmoji);
        /* string question = 3; */
        if (message.question !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.question);
        /* string answer = 4; */
        if (message.answer !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.answer);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message QuestionItemProto
 */
export const QuestionItemProto = new QuestionItemProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MultipleChoiceItemProto$Type extends MessageType<MultipleChoiceItemProto> {
    constructor() {
        super("MultipleChoiceItemProto", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "title_emoji", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "question", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "options", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => MultipleChoiceOptionProto },
            { no: 5, name: "correct_answer_index", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "hint", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "explanation", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<MultipleChoiceItemProto>): MultipleChoiceItemProto {
        const message = { title: "", titleEmoji: "", question: "", options: [], correctAnswerIndex: 0, hint: "", explanation: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MultipleChoiceItemProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MultipleChoiceItemProto): MultipleChoiceItemProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* string title_emoji */ 2:
                    message.titleEmoji = reader.string();
                    break;
                case /* string question */ 3:
                    message.question = reader.string();
                    break;
                case /* repeated MultipleChoiceOptionProto options */ 4:
                    message.options.push(MultipleChoiceOptionProto.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int32 correct_answer_index */ 5:
                    message.correctAnswerIndex = reader.int32();
                    break;
                case /* string hint */ 6:
                    message.hint = reader.string();
                    break;
                case /* string explanation */ 7:
                    message.explanation = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MultipleChoiceItemProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* string title_emoji = 2; */
        if (message.titleEmoji !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.titleEmoji);
        /* string question = 3; */
        if (message.question !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.question);
        /* repeated MultipleChoiceOptionProto options = 4; */
        for (let i = 0; i < message.options.length; i++)
            MultipleChoiceOptionProto.internalBinaryWrite(message.options[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* int32 correct_answer_index = 5; */
        if (message.correctAnswerIndex !== 0)
            writer.tag(5, WireType.Varint).int32(message.correctAnswerIndex);
        /* string hint = 6; */
        if (message.hint !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.hint);
        /* string explanation = 7; */
        if (message.explanation !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.explanation);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MultipleChoiceItemProto
 */
export const MultipleChoiceItemProto = new MultipleChoiceItemProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MultipleChoiceOptionProto$Type extends MessageType<MultipleChoiceOptionProto> {
    constructor() {
        super("MultipleChoiceOptionProto", [
            { no: 1, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "hint", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<MultipleChoiceOptionProto>): MultipleChoiceOptionProto {
        const message = { text: "", hint: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MultipleChoiceOptionProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MultipleChoiceOptionProto): MultipleChoiceOptionProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string text */ 1:
                    message.text = reader.string();
                    break;
                case /* string hint */ 2:
                    message.hint = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MultipleChoiceOptionProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string text = 1; */
        if (message.text !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.text);
        /* string hint = 2; */
        if (message.hint !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.hint);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MultipleChoiceOptionProto
 */
export const MultipleChoiceOptionProto = new MultipleChoiceOptionProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PollItemProto$Type extends MessageType<PollItemProto> {
    constructor() {
        super("PollItemProto", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "title_emoji", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "question", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "options", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PollOptionProto },
            { no: 5, name: "commentary", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PollItemProto>): PollItemProto {
        const message = { title: "", titleEmoji: "", question: "", options: [], commentary: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PollItemProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PollItemProto): PollItemProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* string title_emoji */ 2:
                    message.titleEmoji = reader.string();
                    break;
                case /* string question */ 3:
                    message.question = reader.string();
                    break;
                case /* repeated PollOptionProto options */ 4:
                    message.options.push(PollOptionProto.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string commentary */ 5:
                    message.commentary = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PollItemProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* string title_emoji = 2; */
        if (message.titleEmoji !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.titleEmoji);
        /* string question = 3; */
        if (message.question !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.question);
        /* repeated PollOptionProto options = 4; */
        for (let i = 0; i < message.options.length; i++)
            PollOptionProto.internalBinaryWrite(message.options[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* string commentary = 5; */
        if (message.commentary !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.commentary);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PollItemProto
 */
export const PollItemProto = new PollItemProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PollOptionProto$Type extends MessageType<PollOptionProto> {
    constructor() {
        super("PollOptionProto", [
            { no: 1, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "votes_frac", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<PollOptionProto>): PollOptionProto {
        const message = { text: "", votesFrac: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PollOptionProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PollOptionProto): PollOptionProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string text */ 1:
                    message.text = reader.string();
                    break;
                case /* float votes_frac */ 2:
                    message.votesFrac = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PollOptionProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string text = 1; */
        if (message.text !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.text);
        /* float votes_frac = 2; */
        if (message.votesFrac !== 0)
            writer.tag(2, WireType.Bit32).float(message.votesFrac);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PollOptionProto
 */
export const PollOptionProto = new PollOptionProto$Type();
