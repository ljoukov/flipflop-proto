/* eslint-disable */
// @generated by protobuf-ts 2.9.1 with parameter eslint_disable,long_type_string,ts_nocheck
// @generated from protobuf file "WeatherProto.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "./google/protobuf/timestamp";
/**
 * @generated from protobuf message WeatherProto
 */
export interface WeatherProto {
    /**
     * @generated from protobuf field: google.protobuf.Timestamp created_at = 1;
     */
    createdAt?: Timestamp;
    /**
     * @generated from protobuf field: string region_code = 2;
     */
    regionCode: string;
    /**
     * @generated from protobuf field: string country = 3;
     */
    country: string;
    /**
     * @generated from protobuf field: string city = 4;
     */
    city: string;
    /**
     * @generated from protobuf field: string time_zone = 5;
     */
    timeZone: string;
    /**
     * @generated from protobuf field: double latitude = 6;
     */
    latitude: number;
    /**
     * @generated from protobuf field: double longitude = 7;
     */
    longitude: number;
    /**
     * @generated from protobuf field: WeatherConditionProto condition = 8;
     */
    condition: WeatherConditionProto;
    /**
     * @generated from protobuf field: int32 open_weather_condition_id = 9;
     */
    openWeatherConditionId: number;
    /**
     * @generated from protobuf field: float temperature = 10;
     */
    temperature: number; // Celcius
    /**
     * @generated from protobuf field: float temperature_feels_like = 11;
     */
    temperatureFeelsLike: number; // Celcius
    /**
     * @generated from protobuf field: float temperature_min = 12;
     */
    temperatureMin: number; // Celcius
    /**
     * @generated from protobuf field: float temperature_max = 13;
     */
    temperatureMax: number; // Celcius
    /**
     * @generated from protobuf field: int32 pressure = 14;
     */
    pressure: number; // Atmospheric pressure on the sea level, hPa
    /**
     * @generated from protobuf field: int32 humidity = 15;
     */
    humidity: number; // Humidity, %
    /**
     * @generated from protobuf field: int32 visibility = 16;
     */
    visibility: number; // Visibility, meter.
    /**
     * @generated from protobuf field: float wind_speed = 17;
     */
    windSpeed: number; // Wind speed, meter/sec.
    /**
     * @generated from protobuf field: int32 wind_degrees = 18;
     */
    windDegrees: number; // Wind direction, degrees (meteorological)
}
/**
 * @generated from protobuf message WeatherCacheProto
 */
export interface WeatherCacheProto {
    /**
     * @generated from protobuf field: google.protobuf.Timestamp updated_at = 1;
     */
    updatedAt?: Timestamp;
    /**
     * @generated from protobuf field: repeated WeatherProto weather = 2;
     */
    weather: WeatherProto[];
}
/**
 * @generated from protobuf enum WeatherConditionProto
 */
export enum WeatherConditionProto {
    /**
     * @generated from protobuf enum value: WEATHER_CONDITION_UNKNOWN = 0;
     */
    WEATHER_CONDITION_UNKNOWN = 0,
    /**
     * @generated from protobuf enum value: WEATHER_CONDITION_THUNDERSTORM = 1;
     */
    WEATHER_CONDITION_THUNDERSTORM = 1,
    /**
     * @generated from protobuf enum value: WEATHER_CONDITION_DRIZZLE = 2;
     */
    WEATHER_CONDITION_DRIZZLE = 2,
    /**
     * @generated from protobuf enum value: WEATHER_CONDITION_RAIN = 3;
     */
    WEATHER_CONDITION_RAIN = 3,
    /**
     * @generated from protobuf enum value: WEATHER_CONDITION_SNOW = 4;
     */
    WEATHER_CONDITION_SNOW = 4,
    /**
     * @generated from protobuf enum value: WEATHER_CONDITION_MIST = 5;
     */
    WEATHER_CONDITION_MIST = 5,
    /**
     * @generated from protobuf enum value: WEATHER_CONDITION_SMOKE = 6;
     */
    WEATHER_CONDITION_SMOKE = 6,
    /**
     * @generated from protobuf enum value: WEATHER_CONDITION_HAZE = 7;
     */
    WEATHER_CONDITION_HAZE = 7,
    /**
     * @generated from protobuf enum value: WEATHER_CONDITION_DUST = 8;
     */
    WEATHER_CONDITION_DUST = 8,
    /**
     * @generated from protobuf enum value: WEATHER_CONDITION_FOG = 9;
     */
    WEATHER_CONDITION_FOG = 9,
    /**
     * @generated from protobuf enum value: WEATHER_CONDITION_SAND = 10;
     */
    WEATHER_CONDITION_SAND = 10,
    /**
     * @generated from protobuf enum value: WEATHER_CONDITION_ASH = 11;
     */
    WEATHER_CONDITION_ASH = 11,
    /**
     * @generated from protobuf enum value: WEATHER_CONDITION_SQUALL = 12;
     */
    WEATHER_CONDITION_SQUALL = 12,
    /**
     * @generated from protobuf enum value: WEATHER_CONDITION_TORNADO = 13;
     */
    WEATHER_CONDITION_TORNADO = 13,
    /**
     * @generated from protobuf enum value: WEATHER_CONDITION_CLEAR = 14;
     */
    WEATHER_CONDITION_CLEAR = 14,
    /**
     * @generated from protobuf enum value: WEATHER_CONDITION_CLOUDS = 15;
     */
    WEATHER_CONDITION_CLOUDS = 15
}
// @generated message type with reflection information, may provide speed optimized methods
class WeatherProto$Type extends MessageType<WeatherProto> {
    constructor() {
        super("WeatherProto", [
            { no: 1, name: "created_at", kind: "message", T: () => Timestamp },
            { no: 2, name: "region_code", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "country", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "city", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "time_zone", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "latitude", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 7, name: "longitude", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 8, name: "condition", kind: "enum", T: () => ["WeatherConditionProto", WeatherConditionProto] },
            { no: 9, name: "open_weather_condition_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 10, name: "temperature", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 11, name: "temperature_feels_like", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 12, name: "temperature_min", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 13, name: "temperature_max", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 14, name: "pressure", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 15, name: "humidity", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 16, name: "visibility", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 17, name: "wind_speed", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 18, name: "wind_degrees", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<WeatherProto>): WeatherProto {
        const message = { regionCode: "", country: "", city: "", timeZone: "", latitude: 0, longitude: 0, condition: 0, openWeatherConditionId: 0, temperature: 0, temperatureFeelsLike: 0, temperatureMin: 0, temperatureMax: 0, pressure: 0, humidity: 0, visibility: 0, windSpeed: 0, windDegrees: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WeatherProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WeatherProto): WeatherProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Timestamp created_at */ 1:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* string region_code */ 2:
                    message.regionCode = reader.string();
                    break;
                case /* string country */ 3:
                    message.country = reader.string();
                    break;
                case /* string city */ 4:
                    message.city = reader.string();
                    break;
                case /* string time_zone */ 5:
                    message.timeZone = reader.string();
                    break;
                case /* double latitude */ 6:
                    message.latitude = reader.double();
                    break;
                case /* double longitude */ 7:
                    message.longitude = reader.double();
                    break;
                case /* WeatherConditionProto condition */ 8:
                    message.condition = reader.int32();
                    break;
                case /* int32 open_weather_condition_id */ 9:
                    message.openWeatherConditionId = reader.int32();
                    break;
                case /* float temperature */ 10:
                    message.temperature = reader.float();
                    break;
                case /* float temperature_feels_like */ 11:
                    message.temperatureFeelsLike = reader.float();
                    break;
                case /* float temperature_min */ 12:
                    message.temperatureMin = reader.float();
                    break;
                case /* float temperature_max */ 13:
                    message.temperatureMax = reader.float();
                    break;
                case /* int32 pressure */ 14:
                    message.pressure = reader.int32();
                    break;
                case /* int32 humidity */ 15:
                    message.humidity = reader.int32();
                    break;
                case /* int32 visibility */ 16:
                    message.visibility = reader.int32();
                    break;
                case /* float wind_speed */ 17:
                    message.windSpeed = reader.float();
                    break;
                case /* int32 wind_degrees */ 18:
                    message.windDegrees = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WeatherProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.Timestamp created_at = 1; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string region_code = 2; */
        if (message.regionCode !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.regionCode);
        /* string country = 3; */
        if (message.country !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.country);
        /* string city = 4; */
        if (message.city !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.city);
        /* string time_zone = 5; */
        if (message.timeZone !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.timeZone);
        /* double latitude = 6; */
        if (message.latitude !== 0)
            writer.tag(6, WireType.Bit64).double(message.latitude);
        /* double longitude = 7; */
        if (message.longitude !== 0)
            writer.tag(7, WireType.Bit64).double(message.longitude);
        /* WeatherConditionProto condition = 8; */
        if (message.condition !== 0)
            writer.tag(8, WireType.Varint).int32(message.condition);
        /* int32 open_weather_condition_id = 9; */
        if (message.openWeatherConditionId !== 0)
            writer.tag(9, WireType.Varint).int32(message.openWeatherConditionId);
        /* float temperature = 10; */
        if (message.temperature !== 0)
            writer.tag(10, WireType.Bit32).float(message.temperature);
        /* float temperature_feels_like = 11; */
        if (message.temperatureFeelsLike !== 0)
            writer.tag(11, WireType.Bit32).float(message.temperatureFeelsLike);
        /* float temperature_min = 12; */
        if (message.temperatureMin !== 0)
            writer.tag(12, WireType.Bit32).float(message.temperatureMin);
        /* float temperature_max = 13; */
        if (message.temperatureMax !== 0)
            writer.tag(13, WireType.Bit32).float(message.temperatureMax);
        /* int32 pressure = 14; */
        if (message.pressure !== 0)
            writer.tag(14, WireType.Varint).int32(message.pressure);
        /* int32 humidity = 15; */
        if (message.humidity !== 0)
            writer.tag(15, WireType.Varint).int32(message.humidity);
        /* int32 visibility = 16; */
        if (message.visibility !== 0)
            writer.tag(16, WireType.Varint).int32(message.visibility);
        /* float wind_speed = 17; */
        if (message.windSpeed !== 0)
            writer.tag(17, WireType.Bit32).float(message.windSpeed);
        /* int32 wind_degrees = 18; */
        if (message.windDegrees !== 0)
            writer.tag(18, WireType.Varint).int32(message.windDegrees);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message WeatherProto
 */
export const WeatherProto = new WeatherProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WeatherCacheProto$Type extends MessageType<WeatherCacheProto> {
    constructor() {
        super("WeatherCacheProto", [
            { no: 1, name: "updated_at", kind: "message", T: () => Timestamp },
            { no: 2, name: "weather", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => WeatherProto }
        ]);
    }
    create(value?: PartialMessage<WeatherCacheProto>): WeatherCacheProto {
        const message = { weather: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WeatherCacheProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WeatherCacheProto): WeatherCacheProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Timestamp updated_at */ 1:
                    message.updatedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.updatedAt);
                    break;
                case /* repeated WeatherProto weather */ 2:
                    message.weather.push(WeatherProto.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WeatherCacheProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.Timestamp updated_at = 1; */
        if (message.updatedAt)
            Timestamp.internalBinaryWrite(message.updatedAt, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated WeatherProto weather = 2; */
        for (let i = 0; i < message.weather.length; i++)
            WeatherProto.internalBinaryWrite(message.weather[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message WeatherCacheProto
 */
export const WeatherCacheProto = new WeatherCacheProto$Type();
