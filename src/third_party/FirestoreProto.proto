syntax = "proto3";

package google.firestore.v1;

import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";

enum StatusCode {
  OK = 0;
  CANCELLED = 1;
  UNKNOWN = 2;
  INVALID_ARGUMENT = 3;
  DEADLINE_EXCEEDED = 4;
  NOT_FOUND = 5;
  ALREADY_EXISTS = 6;
  PERMISSION_DENIED = 7;
  UNAUTHENTICATED = 16;
  RESOURCE_EXHAUSTED = 8;
  FAILED_PRECONDITION = 9;
  ABORTED = 10;
  OUT_OF_RANGE = 11;
  UNIMPLEMENTED = 12;
  INTERNAL = 13;
  UNAVAILABLE = 14;
  DATA_LOSS = 15;
}

message RpcError {
  int32 code = 1;
  string message = 2;
  StatusCode status = 3;
}

// A Firestore document.
//
// Must not exceed 1 MiB - 4 bytes.
message Document {
  // The resource name of the document, for example
  // `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
  string name = 1;

  // The document's fields.
  //
  // The map keys represent field names.
  //
  // A simple field name contains only characters `a` to `z`, `A` to `Z`,
  // `0` to `9`, or `_`, and must not start with `0` to `9`. For example,
  // `foo_bar_17`.
  //
  // Field names matching the regular expression `__.*__` are reserved. Reserved
  // field names are forbidden except in certain documented contexts. The map
  // keys, represented as UTF-8, must not exceed 1,500 bytes and cannot be
  // empty.
  //
  // Field paths may be used in other contexts to refer to structured fields
  // defined here. For `map_value`, the field path is represented by the simple
  // or quoted field names of the containing fields, delimited by `.`. For
  // example, the structured field
  // `"foo" : { map_value: { "x&y" : { string_value: "hello" }}}` would be
  // represented by the field path `foo.x&y`.
  //
  // Within a field path, a quoted field name starts and ends with `` ` `` and
  // may contain any character. Some characters, including `` ` ``, must be
  // escaped using a `\`. For example, `` `x&y` `` represents `x&y` and
  // `` `bak\`tik` `` represents `` bak`tik ``.
  map<string, Value> fields = 2;

  // Output only. The time at which the document was created.
  //
  // This value increases monotonically when a document is deleted then
  // recreated. It can also be compared to values from other documents and
  // the `read_time` of a query.
  google.protobuf.Timestamp create_time = 3;

  // Output only. The time at which the document was last changed.
  //
  // This value is initially set to the `create_time` then increases
  // monotonically with each change to the document. It can also be
  // compared to values from other documents and the `read_time` of a query.
  google.protobuf.Timestamp update_time = 4;
}

// A message that can hold any of the supported value types.
message Value {
  // Must have a value set.
  oneof value_type {
    // A null value.
    google.protobuf.NullValue null_value = 11;

    // A boolean value.
    bool boolean_value = 1;

    // An integer value.
    int64 integer_value = 2;

    // A double value.
    double double_value = 3;

    // A timestamp value.
    //
    // Precise only to microseconds. When stored, any additional precision is
    // rounded down.
    google.protobuf.Timestamp timestamp_value = 10;

    // A string value.
    //
    // The string, represented as UTF-8, must not exceed 1 MiB - 89 bytes.
    // Only the first 1,500 bytes of the UTF-8 representation are considered by
    // queries.
    string string_value = 17;

    // A bytes value.
    //
    // Must not exceed 1 MiB - 89 bytes.
    // Only the first 1,500 bytes are considered by queries.
    bytes bytes_value = 18;

    // A reference to a document. For example:
    // `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
    string reference_value = 5;

    // A geo point value representing a point on the surface of Earth.
    LatLng geo_point_value = 8;

    // An array value.
    //
    // Cannot directly contain another array value, though can contain an
    // map which contains another array.
    ArrayValue array_value = 9;

    // A map value.
    MapValue map_value = 6;
  }
}

// An array value.
message ArrayValue {
  // Values in the array.
  repeated Value values = 1;
}

// A map value.
message MapValue {
  // The map's fields.
  //
  // The map keys represent field names. Field names matching the regular
  // expression `__.*__` are reserved. Reserved field names are forbidden except
  // in certain documented contexts. The map keys, represented as UTF-8, must
  // not exceed 1,500 bytes and cannot be empty.
  map<string, Value> fields = 1;
}

// An object that represents a latitude/longitude pair. This is expressed as a
// pair of doubles to represent degrees latitude and degrees longitude. Unless
// specified otherwise, this must conform to the
// <a href="http://www.unoosa.org/pdf/icg/2012/template/WGS_84.pdf">WGS84
// standard</a>. Values must be within normalized ranges.
message LatLng {
  // The latitude in degrees. It must be in the range [-90.0, +90.0].
  double latitude = 1;

  // The longitude in degrees. It must be in the range [-180.0, +180.0].
  double longitude = 2;
}

message ListDocumentsResponse {
  // The Documents found.
  repeated Document documents = 1;

  // The next page token.
  string next_page_token = 2;
}

// The request for [Firestore.Write][google.firestore.v1.Firestore.Write].
//
// The first request creates a stream, or resumes an existing one from a token.
//
// When creating a new stream, the server replies with a response containing
// only an ID and a token, to use in the next request.
//
// When resuming a stream, the server first streams any responses later than the
// given token, then a response containing only an up-to-date token, to use in
// the next request.
message WriteRequest {
  // Required. The database name. In the format:
  // `projects/{project_id}/databases/{database_id}`.
  // This is only required in the first message.
  // [SUPPLIED VIA URL PATH] string database = 1; //
  // [(google.api.field_behavior) = REQUIRED];

  // The ID of the write stream to resume.
  // This may only be set in the first message. When left empty, a new write
  // stream will be created.
  optional string stream_id = 2;

  // The writes to apply.
  //
  // Always executed atomically and in order.
  // This must be empty on the first request.
  // This may be empty on the last request.
  // This must not be empty on all other requests.
  repeated Write writes = 3;

  // A stream token that was previously sent by the server.
  //
  // The client should set this field to the token from the most recent
  // [WriteResponse][google.firestore.v1.WriteResponse] it has received. This
  // acknowledges that the client has received responses up to this token. After
  // sending this token, earlier tokens may not be used anymore.
  //
  // The server may close the stream if there are too many unacknowledged
  // responses.
  //
  // Leave this field unset when creating a new stream. To resume a stream at
  // a specific point, set this field and the `stream_id` field.
  //
  // Leave this field unset when creating a new stream.
  optional bytes stream_token = 4;

  // Labels associated with this write request.
  map<string, string> labels = 5;
}

// The response for [Firestore.Write][google.firestore.v1.Firestore.Write].
message WriteResponse {
  // The ID of the stream.
  // Only set on the first message, when a new stream was created.
  string stream_id = 1;

  // A token that represents the position of this response in the stream.
  // This can be used by a client to resume the stream at this point.
  //
  // This field is always set.
  bytes stream_token = 2;

  // The result of applying the writes.
  //
  // This i-th write result corresponds to the i-th write in the
  // request.
  repeated WriteResult write_results = 3;

  // The time at which the commit occurred. Any read with an equal or greater
  // `read_time` is guaranteed to see the effects of the write.
  google.protobuf.Timestamp commit_time = 4;
}

// The result of applying a write.
message WriteResult {
  // The last update time of the document after applying the write. Not set
  // after a `delete`.
  //
  // If the write did not actually change the document, this will be the
  // previous update_time.
  google.protobuf.Timestamp update_time = 1;

  // The results of applying each
  // [DocumentTransform.FieldTransform][google.firestore.v1.DocumentTransform.FieldTransform],
  // in the same order.
  repeated Value transform_results = 2;
}

message CommitRequest {
  // Required. The database name. In the format:
  // `projects/{project_id}/databases/{database_id}`.
  // [SUPPLIED VIA URL PATH] string database = 1 [(google.api.field_behavior) =
  // REQUIRED];

  // The writes to apply.
  //
  // Always executed atomically and in order.
  repeated Write writes = 2;

  // If set, applies all writes in this transaction, and commits it.
  bytes transaction = 3;
}

// The response for [Firestore.Commit][google.firestore.v1.Firestore.Commit].
message CommitResponse {
  // The result of applying the writes.
  //
  // This i-th write result corresponds to the i-th write in the
  // request.
  repeated WriteResult write_results = 1;

  // The time at which the commit occurred. Any read with an equal or greater
  // `read_time` is guaranteed to see the effects of the commit.
  google.protobuf.Timestamp commit_time = 2;
}

// A write on a document.
message Write {
  // The operation to execute.
  oneof operation {
    // A document to write.
    Document update = 1;

    // A document name to delete. In the format:
    // `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
    string delete = 2;

    // The name of a document on which to verify the `current_document`
    // precondition.
    // This only requires read access to the document.
    // [NOT IMPLEMENTED] string verify = 5;

    // Applies a transformation to a document.
    // [NOT IMPLEMENTED] DocumentTransform transform = 6;
  }

  // The fields to update in this write.
  //
  // This field can be set only when the operation is `update`.
  // If the mask is not set for an `update` and the document exists, any
  // existing data will be overwritten.
  // If the mask is set and the document on the server has fields not covered by
  // the mask, they are left unchanged.
  // Fields referenced in the mask, but not present in the input document, are
  // deleted from the document on the server.
  // The field paths in this mask must not contain a reserved field name.

  DocumentMask update_mask = 3;

  // The transforms to perform after update.
  //
  // This field can be set only when the operation is `update`. If present, this
  // write is equivalent to performing `update` and `transform` to the same
  // document atomically and in order.
  // [NOT IMPLEMENTED] repeated DocumentTransform.FieldTransform
  // update_transforms = 7;

  // An optional precondition on the document.
  //
  // The write will fail if this is set and not met by the target document.
  Precondition current_document = 4;
}

message DocumentMask {
  // The list of field paths in the mask. See
  // [Document.fields][google.firestore.v1.Document.fields] for a field path
  // syntax reference.
  repeated string field_paths = 1;
}

message Precondition {
  // The type of precondition.
  oneof condition_type {
    // When set to `true`, the target document must exist.
    // When set to `false`, the target document must not exist.
    bool exists = 1;

    // When set, the target document must exist and have been last updated at
    // that time. Timestamp must be microsecond aligned.
    google.protobuf.Timestamp update_time = 2;
  }
}